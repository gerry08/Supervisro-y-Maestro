
STM32_UART_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034fc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a8  080036a8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080036a8  080036a8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036a8  080036a8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036ac  080036ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080036b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          000000d4  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002f41  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d07  00000000  00000000  00022f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000458  00000000  00000000  00023c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000390  00000000  00000000  000240e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000089d8  00000000  00000000  00024478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000549a  00000000  00000000  0002ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0001f715  00000000  00000000  000322ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000519ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f48  00000000  00000000  00051a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800368c 	.word	0x0800368c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	0800368c 	.word	0x0800368c

080001e8 <CRC_Enable>:
#include <CRC.h>

void CRC_Enable(){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	int i = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
	RCC_AHB1ENR |= BIT_12; //Activa reloj para CRC
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <CRC_Enable+0x38>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <CRC_Enable+0x38>)
 80001f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001fc:	6013      	str	r3, [r2, #0]
	for (i = 0; i < 1000; i++){}; //Espera a que el reloj se estabilice
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <CRC_Enable+0x22>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000210:	dbf8      	blt.n	8000204 <CRC_Enable+0x1c>
	CRC_Restart();
 8000212:	f000 f807 	bl	8000224 <CRC_Restart>
}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40023830 	.word	0x40023830

08000224 <CRC_Restart>:

void CRC_Restart(void){
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	CRC_CR |= BIT_0;
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <CRC_Restart+0x1c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <CRC_Restart+0x1c>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40023008 	.word	0x40023008

08000244 <DMA_Init>:
void DMA_Enable(void){
	DMA2_S0CR |= BIT_0;
	while((DMA2_S0CR & BIT_0)== 0x0){} //Espera a que el bit se ponga en 1
}

void DMA_Init(uint8_t source[],uint32_t tamanio){
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
    RCC_AHB1ENR |= BIT_22; //activa reloj para DMA2
 800024e:	4b2e      	ldr	r3, [pc, #184]	; (8000308 <DMA_Init+0xc4>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a2d      	ldr	r2, [pc, #180]	; (8000308 <DMA_Init+0xc4>)
 8000254:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000258:	6013      	str	r3, [r2, #0]
    for(int i = 0; i<100;i++){}
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
 800025e:	e002      	b.n	8000266 <DMA_Init+0x22>
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	3301      	adds	r3, #1
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2b63      	cmp	r3, #99	; 0x63
 800026a:	ddf9      	ble.n	8000260 <DMA_Init+0x1c>

    DMA2_S0CR &= ~BIT_0; //Deshabilita DMA
 800026c:	4b27      	ldr	r3, [pc, #156]	; (800030c <DMA_Init+0xc8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a26      	ldr	r2, [pc, #152]	; (800030c <DMA_Init+0xc8>)
 8000272:	f023 0301 	bic.w	r3, r3, #1
 8000276:	6013      	str	r3, [r2, #0]
    while((DMA2_S0CR & BIT_0)== 0x1){} //Espera a que el bit se ponga en 0
 8000278:	bf00      	nop
 800027a:	4b24      	ldr	r3, [pc, #144]	; (800030c <DMA_Init+0xc8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	2b01      	cmp	r3, #1
 8000284:	d0f9      	beq.n	800027a <DMA_Init+0x36>

	DMA_HIFCR = 0xFFFFFFFF; //Limpia banderas de interrupcion
 8000286:	4b22      	ldr	r3, [pc, #136]	; (8000310 <DMA_Init+0xcc>)
 8000288:	f04f 32ff 	mov.w	r2, #4294967295
 800028c:	601a      	str	r2, [r3, #0]
	DMA_LIFCR = 0xFFFFFFFF; //Limpia banderas de interrupcion
 800028e:	4b21      	ldr	r3, [pc, #132]	; (8000314 <DMA_Init+0xd0>)
 8000290:	f04f 32ff 	mov.w	r2, #4294967295
 8000294:	601a      	str	r2, [r3, #0]

    DMA2_S0CR |= BIT_7; //Habilita Memory to memory
 8000296:	4b1d      	ldr	r3, [pc, #116]	; (800030c <DMA_Init+0xc8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a1c      	ldr	r2, [pc, #112]	; (800030c <DMA_Init+0xc8>)
 800029c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a0:	6013      	str	r3, [r2, #0]
    //8 bits de source, 8 bits de destination
	//DMA2_S0CR |=  BIT_12; //Source data size (Full word)- Peripheral Data Size
	//DMA2_S0CR |= BIT_14; //Destination data size (Full word) - Memory Data Size
	DMA2_S0CR |= BIT_9; //PINC Habilita incrementar el puntero del source despues de cada transaccion.
 80002a2:	4b1a      	ldr	r3, [pc, #104]	; (800030c <DMA_Init+0xc8>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a19      	ldr	r2, [pc, #100]	; (800030c <DMA_Init+0xc8>)
 80002a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ac:	6013      	str	r3, [r2, #0]
	//DMA2_S0CR |= BIT_10; //MINC habilita incrementar el puntero del destination
	DMA2_S0M0AR = (uint32_t)(CRC_DR_ADDRESS); //destination
 80002ae:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <DMA_Init+0xd4>)
 80002b0:	4a1a      	ldr	r2, [pc, #104]	; (800031c <DMA_Init+0xd8>)
 80002b2:	601a      	str	r2, [r3, #0]
	DMA2_S0PAR = (uint32_t)(source); //source
 80002b4:	4a1a      	ldr	r2, [pc, #104]	; (8000320 <DMA_Init+0xdc>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6013      	str	r3, [r2, #0]
	DMA2_S0NDTR = NUM_WORDS;
 80002ba:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <DMA_Init+0xe0>)
 80002bc:	2202      	movs	r2, #2
 80002be:	601a      	str	r2, [r3, #0]

	DMA2_S0FCR |= BIT_2;//Habilitar FIFO
 80002c0:	4b19      	ldr	r3, [pc, #100]	; (8000328 <DMA_Init+0xe4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a18      	ldr	r2, [pc, #96]	; (8000328 <DMA_Init+0xe4>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6013      	str	r3, [r2, #0]
	DMA2_S0FCR |= 0x03;//BIT_1 | BIT_0; //Threshold level: Full FIFO
 80002cc:	4b16      	ldr	r3, [pc, #88]	; (8000328 <DMA_Init+0xe4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a15      	ldr	r2, [pc, #84]	; (8000328 <DMA_Init+0xe4>)
 80002d2:	f043 0303 	orr.w	r3, r3, #3
 80002d6:	6013      	str	r3, [r2, #0]
	DMA2_S0CR |= BIT_21; //PBURST: INCR4
 80002d8:	4b0c      	ldr	r3, [pc, #48]	; (800030c <DMA_Init+0xc8>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0b      	ldr	r2, [pc, #44]	; (800030c <DMA_Init+0xc8>)
 80002de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002e2:	6013      	str	r3, [r2, #0]
	DMA2_S0CR |= BIT_23; //MBURST: INCR4
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <DMA_Init+0xc8>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a08      	ldr	r2, [pc, #32]	; (800030c <DMA_Init+0xc8>)
 80002ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002ee:	6013      	str	r3, [r2, #0]

	DMA2_S0CR |= BIT_4; //Habilita interrupcion de transaccion completa.
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <DMA_Init+0xc8>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a05      	ldr	r2, [pc, #20]	; (800030c <DMA_Init+0xc8>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	6013      	str	r3, [r2, #0]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40023830 	.word	0x40023830
 800030c:	40026410 	.word	0x40026410
 8000310:	4002640c 	.word	0x4002640c
 8000314:	40026408 	.word	0x40026408
 8000318:	4002641c 	.word	0x4002641c
 800031c:	40023000 	.word	0x40023000
 8000320:	40026418 	.word	0x40026418
 8000324:	40026414 	.word	0x40026414
 8000328:	40026424 	.word	0x40026424

0800032c <SystemInit>:
  * @retval None
  */
#include "FPU.h"

void SystemInit(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <SystemInit+0x20>)
 8000332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000336:	4a05      	ldr	r2, [pc, #20]	; (800034c <SystemInit+0x20>)
 8000338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800033c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <GPIOx_InitAF>:
#include "GPIOx.h"
#include "RCC.h"


//Inicializa en la función alterna los puertos
void GPIOx_InitAF(GPIO_TypeDef *Port_, uint8_t Pin_, uint8_t OTYPER_, uint8_t OSPEEDR_, uint8_t AFR_ ){
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	4608      	mov	r0, r1
 800035a:	4611      	mov	r1, r2
 800035c:	461a      	mov	r2, r3
 800035e:	4603      	mov	r3, r0
 8000360:	70fb      	strb	r3, [r7, #3]
 8000362:	460b      	mov	r3, r1
 8000364:	70bb      	strb	r3, [r7, #2]
 8000366:	4613      	mov	r3, r2
 8000368:	707b      	strb	r3, [r7, #1]
	Port_->MODER |= (GPIO_MODER_MODE_AF<<(Pin_*2));//Alternate Function on Pin x=1,...,15
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	2102      	movs	r1, #2
 8000374:	fa01 f303 	lsl.w	r3, r1, r3
 8000378:	431a      	orrs	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	601a      	str	r2, [r3, #0]
	Port_->OTYPER |= ((OTYPER_&1)<<(Pin_));//Opend Drain or push pull
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	78ba      	ldrb	r2, [r7, #2]
 8000384:	f002 0101 	and.w	r1, r2, #1
 8000388:	78fa      	ldrb	r2, [r7, #3]
 800038a:	fa01 f202 	lsl.w	r2, r1, r2
 800038e:	431a      	orrs	r2, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	605a      	str	r2, [r3, #4]
	Port_->OSPEEDR |= (OSPEEDR_<<(Pin_*2));//High Speed
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	689b      	ldr	r3, [r3, #8]
 8000398:	7879      	ldrb	r1, [r7, #1]
 800039a:	78fa      	ldrb	r2, [r7, #3]
 800039c:	0052      	lsls	r2, r2, #1
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
	if(Pin_>7){
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2b07      	cmp	r3, #7
 80003ac:	d90b      	bls.n	80003c6 <GPIOx_InitAF+0x76>
		Port_->AFRH |= (AFR_<<((Pin_-8)*4));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b2:	7c39      	ldrb	r1, [r7, #16]
 80003b4:	78fa      	ldrb	r2, [r7, #3]
 80003b6:	3a08      	subs	r2, #8
 80003b8:	0092      	lsls	r2, r2, #2
 80003ba:	fa01 f202 	lsl.w	r2, r1, r2
 80003be:	431a      	orrs	r2, r3
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else{
		Port_->AFRL |= (AFR_<<(Pin_*4));
	}
	//Veificar IDR? Debe estar en 1 los puertos
}
 80003c4:	e009      	b.n	80003da <GPIOx_InitAF+0x8a>
		Port_->AFRL |= (AFR_<<(Pin_*4));
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6a1b      	ldr	r3, [r3, #32]
 80003ca:	7c39      	ldrb	r1, [r7, #16]
 80003cc:	78fa      	ldrb	r2, [r7, #3]
 80003ce:	0092      	lsls	r2, r2, #2
 80003d0:	fa01 f202 	lsl.w	r2, r1, r2
 80003d4:	431a      	orrs	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	621a      	str	r2, [r3, #32]
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
	...

080003e8 <RCC_EnPort>:

void RCC_EnPort(GPIO_TypeDef *port){
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	if(port==GPIOA){
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a28      	ldr	r2, [pc, #160]	; (8000494 <RCC_EnPort+0xac>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <RCC_EnPort+0x1e>
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIOAEN ;
 80003f8:	4b27      	ldr	r3, [pc, #156]	; (8000498 <RCC_EnPort+0xb0>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a26      	ldr	r2, [pc, #152]	; (8000498 <RCC_EnPort+0xb0>)
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	6013      	str	r3, [r2, #0]
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIOGEN ;
	}
	else if(port==GPIOH){
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIOHEN ;
	}
}
 8000404:	e040      	b.n	8000488 <RCC_EnPort+0xa0>
	else if(port==GPIOB){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a24      	ldr	r2, [pc, #144]	; (800049c <RCC_EnPort+0xb4>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <RCC_EnPort+0x34>
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIOBEN ;
 800040e:	4b22      	ldr	r3, [pc, #136]	; (8000498 <RCC_EnPort+0xb0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a21      	ldr	r2, [pc, #132]	; (8000498 <RCC_EnPort+0xb0>)
 8000414:	f043 0302 	orr.w	r3, r3, #2
 8000418:	6013      	str	r3, [r2, #0]
}
 800041a:	e035      	b.n	8000488 <RCC_EnPort+0xa0>
	else if(port==GPIOC){
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a20      	ldr	r2, [pc, #128]	; (80004a0 <RCC_EnPort+0xb8>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <RCC_EnPort+0x4a>
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIOCEN ;
 8000424:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <RCC_EnPort+0xb0>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a1b      	ldr	r2, [pc, #108]	; (8000498 <RCC_EnPort+0xb0>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6013      	str	r3, [r2, #0]
}
 8000430:	e02a      	b.n	8000488 <RCC_EnPort+0xa0>
	else if(port==GPIOD){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a1b      	ldr	r2, [pc, #108]	; (80004a4 <RCC_EnPort+0xbc>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <RCC_EnPort+0x60>
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIODEN ;
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <RCC_EnPort+0xb0>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a16      	ldr	r2, [pc, #88]	; (8000498 <RCC_EnPort+0xb0>)
 8000440:	f043 0308 	orr.w	r3, r3, #8
 8000444:	6013      	str	r3, [r2, #0]
}
 8000446:	e01f      	b.n	8000488 <RCC_EnPort+0xa0>
	else if(port==GPIOE){
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <RCC_EnPort+0xc0>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <RCC_EnPort+0x76>
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIOEEN ;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <RCC_EnPort+0xb0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a10      	ldr	r2, [pc, #64]	; (8000498 <RCC_EnPort+0xb0>)
 8000456:	f043 0310 	orr.w	r3, r3, #16
 800045a:	6013      	str	r3, [r2, #0]
}
 800045c:	e014      	b.n	8000488 <RCC_EnPort+0xa0>
	else if(port==GPIOF){
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a12      	ldr	r2, [pc, #72]	; (80004ac <RCC_EnPort+0xc4>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <RCC_EnPort+0x8c>
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIOGEN ;
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <RCC_EnPort+0xb0>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <RCC_EnPort+0xb0>)
 800046c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000470:	6013      	str	r3, [r2, #0]
}
 8000472:	e009      	b.n	8000488 <RCC_EnPort+0xa0>
	else if(port==GPIOH){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <RCC_EnPort+0xc8>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d105      	bne.n	8000488 <RCC_EnPort+0xa0>
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIOHEN ;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <RCC_EnPort+0xb0>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a05      	ldr	r2, [pc, #20]	; (8000498 <RCC_EnPort+0xb0>)
 8000482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000486:	6013      	str	r3, [r2, #0]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40020000 	.word	0x40020000
 8000498:	40023830 	.word	0x40023830
 800049c:	40020400 	.word	0x40020400
 80004a0:	40020800 	.word	0x40020800
 80004a4:	40020c00 	.word	0x40020c00
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40021400 	.word	0x40021400
 80004b0:	40021c00 	.word	0x40021c00

080004b4 <LEDS_Init>:
#include <LEDS.h>

void LEDS_Init(void){
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
	//Configura LED
	RCC_AHB1ENR |= BIT_3;
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <LEDS_Init+0x64>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a16      	ldr	r2, [pc, #88]	; (8000518 <LEDS_Init+0x64>)
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 1000; i++){}; //Espera a que el reloj se estabilice
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	e002      	b.n	80004d2 <LEDS_Init+0x1e>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3301      	adds	r3, #1
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004d8:	dbf8      	blt.n	80004cc <LEDS_Init+0x18>
	GPIOD_MODER |= BIT_30; //Lo configura como salida
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <LEDS_Init+0x68>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0f      	ldr	r2, [pc, #60]	; (800051c <LEDS_Init+0x68>)
 80004e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80004e4:	6013      	str	r3, [r2, #0]
	GPIOD_MODER |= BIT_24;
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <LEDS_Init+0x68>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a0c      	ldr	r2, [pc, #48]	; (800051c <LEDS_Init+0x68>)
 80004ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004f0:	6013      	str	r3, [r2, #0]
	GPIOD_MODER |= BIT_26;
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <LEDS_Init+0x68>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a09      	ldr	r2, [pc, #36]	; (800051c <LEDS_Init+0x68>)
 80004f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80004fc:	6013      	str	r3, [r2, #0]
	GPIOD_MODER |= BIT_28;
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <LEDS_Init+0x68>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a06      	ldr	r2, [pc, #24]	; (800051c <LEDS_Init+0x68>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	6013      	str	r3, [r2, #0]
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40023830 	.word	0x40023830
 800051c:	40020c00 	.word	0x40020c00

08000520 <LEDS_Toggle>:
	GPIOD_ODR &= ~BIT_13; //Escribe 1 en el puerto
	GPIOD_ODR &= ~BIT_14; //Escribe 1 en el puerto
	GPIOD_ODR &= ~BIT_15; //Escribe 1 en el puerto
}

void LEDS_Toggle(void){
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	GPIOD_ODR ^= BIT_12; //Escribe 1 en el puerto
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <LEDS_Toggle+0x28>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <LEDS_Toggle+0x28>)
 800052a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800052e:	6013      	str	r3, [r2, #0]
	GPIOD_ODR ^= BIT_13; //Escribe 1 en el puerto
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <LEDS_Toggle+0x28>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <LEDS_Toggle+0x28>)
 8000536:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800053a:	6013      	str	r3, [r2, #0]
	//GPIOD_ODR ^= BIT_14; //Escribe 1 en el puerto
	//GPIOD_ODR ^= BIT_15; //Escribe 1 en el puerto
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40020c14 	.word	0x40020c14

0800054c <NVIC_SetCFGR>:
#include "NVIC.h"

/*
 * NVIC Configuration
 */
void NVIC_SetCFGR(uint8_t position, uint8_t priority){
 800054c:	b480      	push	{r7}
 800054e:	b087      	sub	sp, #28
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	460a      	mov	r2, r1
 8000556:	71fb      	strb	r3, [r7, #7]
 8000558:	4613      	mov	r3, r2
 800055a:	71bb      	strb	r3, [r7, #6]
	uint8_t div1 = position / 32, div2 = position / 4;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	095b      	lsrs	r3, r3, #5
 8000560:	75fb      	strb	r3, [r7, #23]
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	089b      	lsrs	r3, r3, #2
 8000566:	75bb      	strb	r3, [r7, #22]
	unsigned int * NVIC_ICERn = ( ( unsigned int * ) (NVIC_BASE + NVIC_ICER + (0x04*div1)) )  ;
 8000568:	7dfb      	ldrb	r3, [r7, #23]
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	461a      	mov	r2, r3
 800056e:	4b33      	ldr	r3, [pc, #204]	; (800063c <NVIC_SetCFGR+0xf0>)
 8000570:	4413      	add	r3, r2
 8000572:	613b      	str	r3, [r7, #16]
	unsigned int * NVIC_ISERn = ( ( unsigned int * ) (NVIC_BASE + NVIC_ISER + (0x04*div1)) )  ;
 8000574:	7dfb      	ldrb	r3, [r7, #23]
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800057c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000580:	60fb      	str	r3, [r7, #12]
	unsigned int * NVIC_IPRn = ( (  unsigned int * ) (NVIC_BASE + NVIC_IPR + (0x04*div2)) )  ;
 8000582:	7dbb      	ldrb	r3, [r7, #22]
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800058a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800058e:	60bb      	str	r3, [r7, #8]

	while(div1>0){
 8000590:	e005      	b.n	800059e <NVIC_SetCFGR+0x52>
		position -= 32;
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	3b20      	subs	r3, #32
 8000596:	71fb      	strb	r3, [r7, #7]
		div1--;
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	3b01      	subs	r3, #1
 800059c:	75fb      	strb	r3, [r7, #23]
	while(div1>0){
 800059e:	7dfb      	ldrb	r3, [r7, #23]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d1f6      	bne.n	8000592 <NVIC_SetCFGR+0x46>
	}
	div1=4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	75fb      	strb	r3, [r7, #23]
	while(div1>0){
 80005a8:	e02a      	b.n	8000600 <NVIC_SetCFGR+0xb4>
		div2 = ( ( 10 * (position - div1 + 1)) /4 ) ;//Obtenemos el valor con decimales
 80005aa:	79fa      	ldrb	r2, [r7, #7]
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	1ad3      	subs	r3, r2, r3
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	da00      	bge.n	80005c0 <NVIC_SetCFGR+0x74>
 80005be:	3303      	adds	r3, #3
 80005c0:	109b      	asrs	r3, r3, #2
 80005c2:	75bb      	strb	r3, [r7, #22]
		div2 = div2 - ( 10 * ( (position - div1 + 1) / 4) );//Recuperamos el decimal
 80005c4:	79fa      	ldrb	r2, [r7, #7]
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da00      	bge.n	80005d2 <NVIC_SetCFGR+0x86>
 80005d0:	3303      	adds	r3, #3
 80005d2:	109b      	asrs	r3, r3, #2
 80005d4:	425b      	negs	r3, r3
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	0092      	lsls	r2, r2, #2
 80005dc:	4413      	add	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	7dbb      	ldrb	r3, [r7, #22]
 80005e4:	4413      	add	r3, r2
 80005e6:	75bb      	strb	r3, [r7, #22]
		if(div2){//No corresponde a la posición
 80005e8:	7dbb      	ldrb	r3, [r7, #22]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d003      	beq.n	80005f6 <NVIC_SetCFGR+0xaa>
			div1--; //Seguimos bucando coincidencia
 80005ee:	7dfb      	ldrb	r3, [r7, #23]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	75fb      	strb	r3, [r7, #23]
 80005f4:	e004      	b.n	8000600 <NVIC_SetCFGR+0xb4>
		}
		else{//Coincidencia de posición
			div2=div1-1;//Recuperamos la posición
 80005f6:	7dfb      	ldrb	r3, [r7, #23]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	75bb      	strb	r3, [r7, #22]
			div1=0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	75fb      	strb	r3, [r7, #23]
	while(div1>0){
 8000600:	7dfb      	ldrb	r3, [r7, #23]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1d1      	bne.n	80005aa <NVIC_SetCFGR+0x5e>
		}
	}

	//*NVIC_ICERn |= (1<<position);//Limpia posible bandera pendiente, deshabilitando
	*NVIC_ISERn |= (1<<position);//Habilita la interrupción
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	79fa      	ldrb	r2, [r7, #7]
 800060c:	2101      	movs	r1, #1
 800060e:	fa01 f202 	lsl.w	r2, r1, r2
 8000612:	431a      	orrs	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	601a      	str	r2, [r3, #0]
	*NVIC_IPRn|= ((priority<<(div2*8))<<4);//Coloca Prioridad 4*x+3; x= 8 y 7 I2C1
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	79b9      	ldrb	r1, [r7, #6]
 800061e:	7dba      	ldrb	r2, [r7, #22]
 8000620:	00d2      	lsls	r2, r2, #3
 8000622:	fa01 f202 	lsl.w	r2, r1, r2
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	431a      	orrs	r2, r3
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	601a      	str	r2, [r3, #0]
	//Únicamente se usan los bits 4-7 para la prioridad
}
 800062e:	bf00      	nop
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000e180 	.word	0xe000e180

08000640 <SystClock_Init>:
 * SYSCLOCK = ( (SOURCEPLL / PRE_PLLM) * MUL_PLLN ) / PRE_PLLP -> Seguir en este orden la configuración
 * para cumplir con el rango de valores mostrados arriba
 * APB1CLOCK = ( SYSCLOCK / PRE_AHB1 ) / APB1
 * APB1CLK in MHz
 */
bool SystClock_Init(RCC_CLKCFG *SYSCLKCFG, uint8_t sourceSYS, uint8_t sourcePLL, uint8_t preAHB1, uint8_t preAPB1, uint8_t preAPB2){
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af04      	add	r7, sp, #16
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	4608      	mov	r0, r1
 800064a:	4611      	mov	r1, r2
 800064c:	461a      	mov	r2, r3
 800064e:	4603      	mov	r3, r0
 8000650:	70fb      	strb	r3, [r7, #3]
 8000652:	460b      	mov	r3, r1
 8000654:	70bb      	strb	r3, [r7, #2]
 8000656:	4613      	mov	r3, r2
 8000658:	707b      	strb	r3, [r7, #1]
	uint8_t SYSCLK = SYSCLKCFG->SYSCLK;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	73fb      	strb	r3, [r7, #15]
	RCC_APB1ENR |= RCC_APB1ENR_PWREN;
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <SystClock_Init+0xe0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a2e      	ldr	r2, [pc, #184]	; (8000720 <SystClock_Init+0xe0>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6013      	str	r3, [r2, #0]
	PWR_CR &= (~(0x3<<PWR_CR_VOS_Pos));//Limpiamos
 800066c:	4b2d      	ldr	r3, [pc, #180]	; (8000724 <SystClock_Init+0xe4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a2c      	ldr	r2, [pc, #176]	; (8000724 <SystClock_Init+0xe4>)
 8000672:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000676:	6013      	str	r3, [r2, #0]
	PWR_CR |= (1<<PWR_CR_VOS_Pos);//Selecciona modo 3 (120MHz Max)
 8000678:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <SystClock_Init+0xe4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a29      	ldr	r2, [pc, #164]	; (8000724 <SystClock_Init+0xe4>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
	//Se ignora sourcePLL y SYSCLK si se escoge directamente el valor de la fuente
	if(SYSCLK==HSICLK){//HSI
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	2b10      	cmp	r3, #16
 8000688:	d10b      	bne.n	80006a2 <SystClock_Init+0x62>
		RCC_CFGR = RCC_CFGR_SW_HSI; //HSI como fuente del sistema
 800068a:	4b27      	ldr	r3, [pc, #156]	; (8000728 <SystClock_Init+0xe8>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
		SystCLK_SetPres(SYSCLKCFG, preAHB1, preAPB1, preAPB2);
 8000690:	7f3b      	ldrb	r3, [r7, #28]
 8000692:	7e3a      	ldrb	r2, [r7, #24]
 8000694:	7879      	ldrb	r1, [r7, #1]
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f862 	bl	8000760 <SystCLK_SetPres>
		SystCLK_SetHSION();
 800069c:	f000 f9d4 	bl	8000a48 <SystCLK_SetHSION>
 80006a0:	e038      	b.n	8000714 <SystClock_Init+0xd4>
	}
	else if(SYSCLK==HSECLK){//HSE
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	2b08      	cmp	r3, #8
 80006a6:	d10b      	bne.n	80006c0 <SystClock_Init+0x80>
		RCC_CFGR = RCC_CFGR_SW_HSE; //HSE como fuente del sistema
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystClock_Init+0xe8>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
		SystCLK_SetPres(SYSCLKCFG, preAHB1, preAPB1, preAPB2);
 80006ae:	7f3b      	ldrb	r3, [r7, #28]
 80006b0:	7e3a      	ldrb	r2, [r7, #24]
 80006b2:	7879      	ldrb	r1, [r7, #1]
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f000 f853 	bl	8000760 <SystCLK_SetPres>
		SystCLK_SetHSEON();
 80006ba:	f000 f9df 	bl	8000a7c <SystCLK_SetHSEON>
 80006be:	e029      	b.n	8000714 <SystClock_Init+0xd4>
	}
	else{
		if((SYSCLK>=24)&&(SYSCLK<=180)){//Min out CLK 24MHz, max 180MHz, puede ser PLLP o PLLR
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	2b17      	cmp	r3, #23
 80006c4:	d924      	bls.n	8000710 <SystClock_Init+0xd0>
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	2bb4      	cmp	r3, #180	; 0xb4
 80006ca:	d821      	bhi.n	8000710 <SystClock_Init+0xd0>
			if(sourcePLL==0){//Source PLL -> HSI = 16 MHz, se trabajan números enteros
 80006cc:	78bb      	ldrb	r3, [r7, #2]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10d      	bne.n	80006ee <SystClock_Init+0xae>
				SystCLK_CalculatePLLCFGR(SYSCLKCFG, sourceSYS, HSICLK, preAHB1, preAPB1, preAPB2, 8);//Configura e inicializa
 80006d2:	787a      	ldrb	r2, [r7, #1]
 80006d4:	78f9      	ldrb	r1, [r7, #3]
 80006d6:	2308      	movs	r3, #8
 80006d8:	9302      	str	r3, [sp, #8]
 80006da:	7f3b      	ldrb	r3, [r7, #28]
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	7e3b      	ldrb	r3, [r7, #24]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4613      	mov	r3, r2
 80006e4:	2210      	movs	r2, #16
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 fa04 	bl	8000af4 <SystCLK_CalculatePLLCFGR>
			if(sourcePLL==0){//Source PLL -> HSI = 16 MHz, se trabajan números enteros
 80006ec:	e012      	b.n	8000714 <SystClock_Init+0xd4>
			}
			else{//Source PLL -> HSE
				RCC_EnPort(GPIOH);
 80006ee:	480f      	ldr	r0, [pc, #60]	; (800072c <SystClock_Init+0xec>)
 80006f0:	f7ff fe7a 	bl	80003e8 <RCC_EnPort>
				SystCLK_CalculatePLLCFGR(SYSCLKCFG, sourceSYS, HSECLK, preAHB1, preAPB1, preAPB2, 1);//Configura e inicializa
 80006f4:	787a      	ldrb	r2, [r7, #1]
 80006f6:	78f9      	ldrb	r1, [r7, #3]
 80006f8:	2301      	movs	r3, #1
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	7f3b      	ldrb	r3, [r7, #28]
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	7e3b      	ldrb	r3, [r7, #24]
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	4613      	mov	r3, r2
 8000706:	2208      	movs	r2, #8
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f9f3 	bl	8000af4 <SystCLK_CalculatePLLCFGR>
			if(sourcePLL==0){//Source PLL -> HSI = 16 MHz, se trabajan números enteros
 800070e:	e001      	b.n	8000714 <SystClock_Init+0xd4>
			}
		}
		else{//Configuración predeterminada en PLL
			SystCLK_SetPLLPredet();//SYS = 40MHz, APB1 = 10MHz
 8000710:	f000 fbf0 	bl	8000ef4 <SystCLK_SetPLLPredet>
		}
	}
	return true;
 8000714:	2301      	movs	r3, #1
}
 8000716:	4618      	mov	r0, r3
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023840 	.word	0x40023840
 8000724:	40007000 	.word	0x40007000
 8000728:	40023808 	.word	0x40023808
 800072c:	40021c00 	.word	0x40021c00

08000730 <Calculate_Pot2>:

//
uint8_t Calculate_Pot2(uint8_t pot){
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	uint8_t value=1;
 800073a:	2301      	movs	r3, #1
 800073c:	73fb      	strb	r3, [r7, #15]
	while(pot>0){
 800073e:	e005      	b.n	800074c <Calculate_Pot2+0x1c>
		value*=2;
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
		pot--;
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	3b01      	subs	r3, #1
 800074a:	71fb      	strb	r3, [r7, #7]
	while(pot>0){
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f6      	bne.n	8000740 <Calculate_Pot2+0x10>
	}
	return value;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SystCLK_SetPres>:
//
void SystCLK_SetPres(RCC_CLKCFG *SYSCLKCFG, uint8_t preAHB1, uint8_t preAPB1, uint8_t preAPB2){
 8000760:	b5b0      	push	{r4, r5, r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	4608      	mov	r0, r1
 800076a:	4611      	mov	r1, r2
 800076c:	461a      	mov	r2, r3
 800076e:	4603      	mov	r3, r0
 8000770:	70fb      	strb	r3, [r7, #3]
 8000772:	460b      	mov	r3, r1
 8000774:	70bb      	strb	r3, [r7, #2]
 8000776:	4613      	mov	r3, r2
 8000778:	707b      	strb	r3, [r7, #1]
	uint8_t SYSCLK = SYSCLKCFG->SYSCLK;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	75fb      	strb	r3, [r7, #23]
	uint8_t divAHB1 = (SYSCLK) / (Calculate_Pot2(preAHB1));
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ffd4 	bl	8000730 <Calculate_Pot2>
 8000788:	4603      	mov	r3, r0
 800078a:	461a      	mov	r2, r3
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000792:	75bb      	strb	r3, [r7, #22]
	uint8_t divAPB1 = 0;//(SYSCLKCFG->SYSCLK) / (Calculate_Pot2(preAHB1+preAPB1));
 8000794:	2300      	movs	r3, #0
 8000796:	757b      	strb	r3, [r7, #21]
	uint8_t divAPB2 = 0;//(SYSCLKCFG->SYSCLK) / (Calculate_Pot2(preAHB1+preAPB2));
 8000798:	2300      	movs	r3, #0
 800079a:	753b      	strb	r3, [r7, #20]
	uint8_t i=0;
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]
	uint32_t decimal;

	if((SYSCLK)&1){//Si es un número impar
 80007a0:	7dfb      	ldrb	r3, [r7, #23]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d012      	beq.n	80007d0 <SystCLK_SetPres+0x70>
		SYSCLK++;//Lo hacemos Par
 80007aa:	7dfb      	ldrb	r3, [r7, #23]
 80007ac:	3301      	adds	r3, #1
 80007ae:	75fb      	strb	r3, [r7, #23]
		SYSCLKCFG->SYSCLK++;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	701a      	strb	r2, [r3, #0]
		divAHB1 = (SYSCLK) / (Calculate_Pot2(preAHB1));
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffb6 	bl	8000730 <Calculate_Pot2>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	7dfb      	ldrb	r3, [r7, #23]
 80007ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80007ce:	75bb      	strb	r3, [r7, #22]
	}

	if(preAHB1>4){
 80007d0:	78fb      	ldrb	r3, [r7, #3]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d902      	bls.n	80007dc <SystCLK_SetPres+0x7c>
		divAHB1 /= 2;
 80007d6:	7dbb      	ldrb	r3, [r7, #22]
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	75bb      	strb	r3, [r7, #22]
	}

	if(divAHB1>=2){//Dentro del rango
 80007dc:	7dbb      	ldrb	r3, [r7, #22]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d90f      	bls.n	8000802 <SystCLK_SetPres+0xa2>
		if(preAHB1!=0){
 80007e2:	78fb      	ldrb	r3, [r7, #3]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d008      	beq.n	80007fa <SystCLK_SetPres+0x9a>
			RCC_CFGR |= ((7+preAHB1)<<RCC_CFGR_HPRE_Pos);
 80007e8:	4b95      	ldr	r3, [pc, #596]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	78fa      	ldrb	r2, [r7, #3]
 80007ee:	3207      	adds	r2, #7
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a92      	ldr	r2, [pc, #584]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 80007f6:	430b      	orrs	r3, r1
 80007f8:	6013      	str	r3, [r2, #0]
		}
		SYSCLKCFG->AHB1CLK = divAHB1;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7dba      	ldrb	r2, [r7, #22]
 80007fe:	705a      	strb	r2, [r3, #1]
 8000800:	e008      	b.n	8000814 <SystCLK_SetPres+0xb4>
	}
	else{
		RCC_CFGR |= (RCC_CFGR_HPRE_DIV1);//Dividir por 1 AHB1
 8000802:	4b8f      	ldr	r3, [pc, #572]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 8000804:	4a8e      	ldr	r2, [pc, #568]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6013      	str	r3, [r2, #0]
		SYSCLKCFG->AHB1CLK = SYSCLK;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7dfa      	ldrb	r2, [r7, #23]
 800080e:	705a      	strb	r2, [r3, #1]
		preAHB1 = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	70fb      	strb	r3, [r7, #3]
	}

	//Calculamos nuevos valores
	divAPB1 = (SYSCLK) / (Calculate_Pot2(preAHB1+preAPB1));
 8000814:	78fa      	ldrb	r2, [r7, #3]
 8000816:	78bb      	ldrb	r3, [r7, #2]
 8000818:	4413      	add	r3, r2
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff87 	bl	8000730 <Calculate_Pot2>
 8000822:	4603      	mov	r3, r0
 8000824:	461a      	mov	r2, r3
 8000826:	7dfb      	ldrb	r3, [r7, #23]
 8000828:	fbb3 f3f2 	udiv	r3, r3, r2
 800082c:	757b      	strb	r3, [r7, #21]
	divAPB2 = (SYSCLK) / (Calculate_Pot2(preAHB1+preAPB2));
 800082e:	78fa      	ldrb	r2, [r7, #3]
 8000830:	787b      	ldrb	r3, [r7, #1]
 8000832:	4413      	add	r3, r2
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff7a 	bl	8000730 <Calculate_Pot2>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	7dfb      	ldrb	r3, [r7, #23]
 8000842:	fbb3 f3f2 	udiv	r3, r3, r2
 8000846:	753b      	strb	r3, [r7, #20]

	if(preAHB1>4){
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	2b04      	cmp	r3, #4
 800084c:	d905      	bls.n	800085a <SystCLK_SetPres+0xfa>
		divAPB1 /= 2;
 800084e:	7d7b      	ldrb	r3, [r7, #21]
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	757b      	strb	r3, [r7, #21]
		divAPB2 /= 2;
 8000854:	7d3b      	ldrb	r3, [r7, #20]
 8000856:	085b      	lsrs	r3, r3, #1
 8000858:	753b      	strb	r3, [r7, #20]
	}

	if((divAPB1>=2)&&(divAPB1<=45)){
 800085a:	7d7b      	ldrb	r3, [r7, #21]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d926      	bls.n	80008ae <SystCLK_SetPres+0x14e>
 8000860:	7d7b      	ldrb	r3, [r7, #21]
 8000862:	2b2d      	cmp	r3, #45	; 0x2d
 8000864:	d823      	bhi.n	80008ae <SystCLK_SetPres+0x14e>
	    if(preAPB1!=0){
 8000866:	78bb      	ldrb	r3, [r7, #2]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d008      	beq.n	800087e <SystCLK_SetPres+0x11e>
	    	RCC_CFGR |= ((3+preAPB1)<<RCC_CFGR_PPRE1_Pos);
 800086c:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	78ba      	ldrb	r2, [r7, #2]
 8000872:	3203      	adds	r2, #3
 8000874:	0292      	lsls	r2, r2, #10
 8000876:	4611      	mov	r1, r2
 8000878:	4a71      	ldr	r2, [pc, #452]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 800087a:	430b      	orrs	r3, r1
 800087c:	6013      	str	r3, [r2, #0]
		}
	    decimal = (((uint32_t)(divAPB1))*100) - ((100*(SYSCLK)) / (Calculate_Pot2(preAHB1+preAPB1)));
 800087e:	7d7b      	ldrb	r3, [r7, #21]
 8000880:	2264      	movs	r2, #100	; 0x64
 8000882:	fb02 f403 	mul.w	r4, r2, r3
 8000886:	7dfb      	ldrb	r3, [r7, #23]
 8000888:	2264      	movs	r2, #100	; 0x64
 800088a:	fb02 f503 	mul.w	r5, r2, r3
 800088e:	78fa      	ldrb	r2, [r7, #3]
 8000890:	78bb      	ldrb	r3, [r7, #2]
 8000892:	4413      	add	r3, r2
 8000894:	b2db      	uxtb	r3, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff4a 	bl	8000730 <Calculate_Pot2>
 800089c:	4603      	mov	r3, r0
 800089e:	fb95 f3f3 	sdiv	r3, r5, r3
 80008a2:	1ae3      	subs	r3, r4, r3
 80008a4:	613b      	str	r3, [r7, #16]
		SYSCLKCFG->APB1CLK = divAPB1;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7d7a      	ldrb	r2, [r7, #21]
 80008aa:	709a      	strb	r2, [r3, #2]
 80008ac:	e03e      	b.n	800092c <SystCLK_SetPres+0x1cc>
	}
	else{
		i=0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	73fb      	strb	r3, [r7, #15]
		while((divAPB1<=45)||(i>=5)) {
 80008b2:	e012      	b.n	80008da <SystCLK_SetPres+0x17a>
			divAPB1 = (SYSCLK) / (Calculate_Pot2(i+preAHB1));
 80008b4:	7bfa      	ldrb	r2, [r7, #15]
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	4413      	add	r3, r2
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff37 	bl	8000730 <Calculate_Pot2>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	7dfb      	ldrb	r3, [r7, #23]
 80008c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80008cc:	757b      	strb	r3, [r7, #21]
			if(preAHB1>4){
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d902      	bls.n	80008da <SystCLK_SetPres+0x17a>
				divAPB1 /= 2;
 80008d4:	7d7b      	ldrb	r3, [r7, #21]
 80008d6:	085b      	lsrs	r3, r3, #1
 80008d8:	757b      	strb	r3, [r7, #21]
		while((divAPB1<=45)||(i>=5)) {
 80008da:	7d7b      	ldrb	r3, [r7, #21]
 80008dc:	2b2d      	cmp	r3, #45	; 0x2d
 80008de:	d9e9      	bls.n	80008b4 <SystCLK_SetPres+0x154>
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d8e6      	bhi.n	80008b4 <SystCLK_SetPres+0x154>
			}
		}
		if(i!=0){
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d008      	beq.n	80008fe <SystCLK_SetPres+0x19e>
			RCC_CFGR |= ((3+i)<<RCC_CFGR_PPRE1_Pos);
 80008ec:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	7bfa      	ldrb	r2, [r7, #15]
 80008f2:	3203      	adds	r2, #3
 80008f4:	0292      	lsls	r2, r2, #10
 80008f6:	4611      	mov	r1, r2
 80008f8:	4a51      	ldr	r2, [pc, #324]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 80008fa:	430b      	orrs	r3, r1
 80008fc:	6013      	str	r3, [r2, #0]
		}
		decimal = (((uint32_t)(divAPB1))*100) - ((100*(SYSCLK)) / (Calculate_Pot2(preAHB1+i)));
 80008fe:	7d7b      	ldrb	r3, [r7, #21]
 8000900:	2264      	movs	r2, #100	; 0x64
 8000902:	fb02 f403 	mul.w	r4, r2, r3
 8000906:	7dfb      	ldrb	r3, [r7, #23]
 8000908:	2264      	movs	r2, #100	; 0x64
 800090a:	fb02 f503 	mul.w	r5, r2, r3
 800090e:	78fa      	ldrb	r2, [r7, #3]
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	4413      	add	r3, r2
 8000914:	b2db      	uxtb	r3, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff0a 	bl	8000730 <Calculate_Pot2>
 800091c:	4603      	mov	r3, r0
 800091e:	fb95 f3f3 	sdiv	r3, r5, r3
 8000922:	1ae3      	subs	r3, r4, r3
 8000924:	613b      	str	r3, [r7, #16]
		SYSCLKCFG->APB1CLK = divAPB1;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7d7a      	ldrb	r2, [r7, #21]
 800092a:	709a      	strb	r2, [r3, #2]
	}

	if((divAPB2>=2)&&(divAPB2<=45)){
 800092c:	7d3b      	ldrb	r3, [r7, #20]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d926      	bls.n	8000980 <SystCLK_SetPres+0x220>
 8000932:	7d3b      	ldrb	r3, [r7, #20]
 8000934:	2b2d      	cmp	r3, #45	; 0x2d
 8000936:	d823      	bhi.n	8000980 <SystCLK_SetPres+0x220>
		if(preAPB2!=0){
 8000938:	787b      	ldrb	r3, [r7, #1]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d008      	beq.n	8000950 <SystCLK_SetPres+0x1f0>
			RCC_CFGR |= ((3+preAPB2)<<RCC_CFGR_PPRE2_Pos);
 800093e:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	787a      	ldrb	r2, [r7, #1]
 8000944:	3203      	adds	r2, #3
 8000946:	0352      	lsls	r2, r2, #13
 8000948:	4611      	mov	r1, r2
 800094a:	4a3d      	ldr	r2, [pc, #244]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 800094c:	430b      	orrs	r3, r1
 800094e:	6013      	str	r3, [r2, #0]
		}
		decimal = (((uint32_t)(divAPB2))*100) - ((100*(SYSCLK)) / (Calculate_Pot2(preAHB1+preAPB2)));
 8000950:	7d3b      	ldrb	r3, [r7, #20]
 8000952:	2264      	movs	r2, #100	; 0x64
 8000954:	fb02 f403 	mul.w	r4, r2, r3
 8000958:	7dfb      	ldrb	r3, [r7, #23]
 800095a:	2264      	movs	r2, #100	; 0x64
 800095c:	fb02 f503 	mul.w	r5, r2, r3
 8000960:	78fa      	ldrb	r2, [r7, #3]
 8000962:	787b      	ldrb	r3, [r7, #1]
 8000964:	4413      	add	r3, r2
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fee1 	bl	8000730 <Calculate_Pot2>
 800096e:	4603      	mov	r3, r0
 8000970:	fb95 f3f3 	sdiv	r3, r5, r3
 8000974:	1ae3      	subs	r3, r4, r3
 8000976:	613b      	str	r3, [r7, #16]
		SYSCLKCFG->APB2CLK = divAPB2;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7d3a      	ldrb	r2, [r7, #20]
 800097c:	70da      	strb	r2, [r3, #3]
 800097e:	e03e      	b.n	80009fe <SystCLK_SetPres+0x29e>
	}
	else{
		i=0;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]
		while((divAPB2<=45)||(i>=5)) {
 8000984:	e012      	b.n	80009ac <SystCLK_SetPres+0x24c>
			divAPB2 = (SYSCLK) / (Calculate_Pot2(i+preAHB1));
 8000986:	7bfa      	ldrb	r2, [r7, #15]
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	4413      	add	r3, r2
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fece 	bl	8000730 <Calculate_Pot2>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	7dfb      	ldrb	r3, [r7, #23]
 800099a:	fbb3 f3f2 	udiv	r3, r3, r2
 800099e:	753b      	strb	r3, [r7, #20]
			if(preAHB1>4){
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d902      	bls.n	80009ac <SystCLK_SetPres+0x24c>
				divAPB2 /= 2;
 80009a6:	7d3b      	ldrb	r3, [r7, #20]
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	753b      	strb	r3, [r7, #20]
		while((divAPB2<=45)||(i>=5)) {
 80009ac:	7d3b      	ldrb	r3, [r7, #20]
 80009ae:	2b2d      	cmp	r3, #45	; 0x2d
 80009b0:	d9e9      	bls.n	8000986 <SystCLK_SetPres+0x226>
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	d8e6      	bhi.n	8000986 <SystCLK_SetPres+0x226>
			}
		}
		if(i!=0){
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d008      	beq.n	80009d0 <SystCLK_SetPres+0x270>
			RCC_CFGR |= ((3+i)<<RCC_CFGR_PPRE2_Pos);
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	7bfa      	ldrb	r2, [r7, #15]
 80009c4:	3203      	adds	r2, #3
 80009c6:	0352      	lsls	r2, r2, #13
 80009c8:	4611      	mov	r1, r2
 80009ca:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <SystCLK_SetPres+0x2e0>)
 80009cc:	430b      	orrs	r3, r1
 80009ce:	6013      	str	r3, [r2, #0]
		}
		decimal = (((uint32_t)(divAPB2))*100) - ((100*(SYSCLK)) / (Calculate_Pot2(preAHB1+i)));
 80009d0:	7d3b      	ldrb	r3, [r7, #20]
 80009d2:	2264      	movs	r2, #100	; 0x64
 80009d4:	fb02 f403 	mul.w	r4, r2, r3
 80009d8:	7dfb      	ldrb	r3, [r7, #23]
 80009da:	2264      	movs	r2, #100	; 0x64
 80009dc:	fb02 f503 	mul.w	r5, r2, r3
 80009e0:	78fa      	ldrb	r2, [r7, #3]
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	4413      	add	r3, r2
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fea1 	bl	8000730 <Calculate_Pot2>
 80009ee:	4603      	mov	r3, r0
 80009f0:	fb95 f3f3 	sdiv	r3, r5, r3
 80009f4:	1ae3      	subs	r3, r4, r3
 80009f6:	613b      	str	r3, [r7, #16]
		SYSCLKCFG->APB2CLK = divAPB2;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7d3a      	ldrb	r2, [r7, #20]
 80009fc:	70da      	strb	r2, [r3, #3]
	}

	if(decimal){
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d003      	beq.n	8000a0c <SystCLK_SetPres+0x2ac>
		SYSCLKCFG->precision = false;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	711a      	strb	r2, [r3, #4]
 8000a0a:	e002      	b.n	8000a12 <SystCLK_SetPres+0x2b2>
	}
	else{
		SYSCLKCFG->precision = true;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	711a      	strb	r2, [r3, #4]
	}

	//Al trabajar con más de 50MHz en los periféricos se recomienda habilitar la configuración
	if(divAHB1>=50){
 8000a12:	7dbb      	ldrb	r3, [r7, #22]
 8000a14:	2b31      	cmp	r3, #49	; 0x31
 8000a16:	d909      	bls.n	8000a2c <SystCLK_SetPres+0x2cc>
		RCC_APB2ENR |= RCC_APB2ENR_SYSCFGEN;//Revisa cap. 8 del manual rm009
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <SystCLK_SetPres+0x2e4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a09      	ldr	r2, [pc, #36]	; (8000a44 <SystCLK_SetPres+0x2e4>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
		SYSCFG_SetCMP_PD();
 8000a24:	f000 fa84 	bl	8000f30 <SYSCFG_SetCMP_PD>
		SYSCFG_WaitREADY();
 8000a28:	f000 fa92 	bl	8000f50 <SYSCFG_WaitREADY>
	}

	embbFLash_Conf(SYSCLKCFG->AHB1CLK);//Se configuran los ciclos de la memoria Flash
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	785b      	ldrb	r3, [r3, #1]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 faf7 	bl	8003024 <embbFLash_Conf>
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023808 	.word	0x40023808
 8000a44:	40023844 	.word	0x40023844

08000a48 <SystCLK_SetHSION>:

void SystCLK_SetHSION(){
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
	RCC_CR = ((0x10<<RCC_CR_HSITRIM_Pos)|(0x68<<RCC_CR_HSICAL_Pos));//Configuración Para calibración
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <SystCLK_SetHSION+0x30>)
 8000a4e:	f44f 42d1 	mov.w	r2, #26752	; 0x6880
 8000a52:	601a      	str	r2, [r3, #0]
	RCC_CR |= (RCC_CR_HSION);
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <SystCLK_SetHSION+0x30>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <SystCLK_SetHSION+0x30>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6013      	str	r3, [r2, #0]
	while((RCC_CR&&RCC_CR_HSIRDY)==0);
 8000a60:	bf00      	nop
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SystCLK_SetHSION+0x30>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0fb      	beq.n	8000a62 <SystCLK_SetHSION+0x1a>
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <SystCLK_SetHSEON>:

void SystCLK_SetHSEON(){
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
	RCC_CR = (RCC_CR_HSEON);
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <SystCLK_SetHSEON+0x24>)
 8000a82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a86:	601a      	str	r2, [r3, #0]
	while((RCC_CR&&RCC_CR_HSERDY)==0);
 8000a88:	bf00      	nop
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SystCLK_SetHSEON+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0fb      	beq.n	8000a8a <SystCLK_SetHSEON+0xe>
}
 8000a92:	bf00      	nop
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800

08000aa4 <SystCLK_SetPLLON>:

void SystCLK_SetPLLON(uint8_t sourcePLL){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	if(sourcePLL==1){
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d103      	bne.n	8000abc <SystCLK_SetPLLON+0x18>
		RCC_CR = (RCC_CR_PLLON|RCC_CR_HSEON);//PLL ON, HSE ON, HSE-> Osc. PLL
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <SystCLK_SetPLLON+0x48>)
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <SystCLK_SetPLLON+0x4c>)
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	e00b      	b.n	8000ad4 <SystCLK_SetPLLON+0x30>
	}
	else{
		RCC_CR = ((0x10<<RCC_CR_HSITRIM_Pos)|(0x68<<RCC_CR_HSICAL_Pos));//Configuración Para calibración
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <SystCLK_SetPLLON+0x48>)
 8000abe:	f44f 42d1 	mov.w	r2, #26752	; 0x6880
 8000ac2:	601a      	str	r2, [r3, #0]
		RCC_CR |= (RCC_CR_PLLON|RCC_CR_HSION);//PLL ON, HSI ON, HSI-> Osc. PLL
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <SystCLK_SetPLLON+0x48>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a08      	ldr	r2, [pc, #32]	; (8000aec <SystCLK_SetPLLON+0x48>)
 8000aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]
	}
	while((RCC_CR&&RCC_CR_PLLRDY)==0);
 8000ad4:	bf00      	nop
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <SystCLK_SetPLLON+0x48>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0fb      	beq.n	8000ad6 <SystCLK_SetPLLON+0x32>

}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	40023800 	.word	0x40023800
 8000af0:	01010000 	.word	0x01010000

08000af4 <SystCLK_CalculatePLLCFGR>:
//
void SystCLK_CalculatePLLCFGR(RCC_CLKCFG *SYSCLKCFG, uint8_t sourceSYS, uint8_t PLLCLK,uint8_t preAHB1, uint8_t preAPB1, uint8_t preAPB2, uint8_t up){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af04      	add	r7, sp, #16
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	4608      	mov	r0, r1
 8000afe:	4611      	mov	r1, r2
 8000b00:	461a      	mov	r2, r3
 8000b02:	4603      	mov	r3, r0
 8000b04:	70fb      	strb	r3, [r7, #3]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70bb      	strb	r3, [r7, #2]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	707b      	strb	r3, [r7, #1]
	uint32_t auxClk = 0 ;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
	uint16_t SYSCLK = 100*(SYSCLKCFG->SYSCLK);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	461a      	mov	r2, r3
 8000b20:	0091      	lsls	r1, r2, #2
 8000b22:	461a      	mov	r2, r3
 8000b24:	460b      	mov	r3, r1
 8000b26:	4413      	add	r3, r2
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	81fb      	strh	r3, [r7, #14]
	uint8_t PLLM_ = 0, PLL_P_R_ = 2;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	74fb      	strb	r3, [r7, #19]
 8000b30:	2302      	movs	r3, #2
 8000b32:	74bb      	strb	r3, [r7, #18]
	uint16_t PLLN_ = 50;
 8000b34:	2332      	movs	r3, #50	; 0x32
 8000b36:	823b      	strh	r3, [r7, #16]
	if(up!=8){
 8000b38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b3c:	2b08      	cmp	r3, #8
 8000b3e:	d012      	beq.n	8000b66 <SystCLK_CalculatePLLCFGR+0x72>
		PLLM_=2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	74fb      	strb	r3, [r7, #19]
		auxClk =  ( (100*PLLCLK) / (PLLM_));
 8000b44:	78bb      	ldrb	r3, [r7, #2]
 8000b46:	2264      	movs	r2, #100	; 0x64
 8000b48:	fb03 f202 	mul.w	r2, r3, r2
 8000b4c:	7cfb      	ldrb	r3, [r7, #19]
 8000b4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b52:	617b      	str	r3, [r7, #20]
		PLLM_=SystCLK_GetPLLMStart(auxClk, PLLCLK, PLLM_, 1);//Obtiene el valor de PLLM para iterar
 8000b54:	7cfa      	ldrb	r2, [r7, #19]
 8000b56:	78b9      	ldrb	r1, [r7, #2]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f000 f912 	bl	8000d84 <SystCLK_GetPLLMStart>
 8000b60:	4603      	mov	r3, r0
 8000b62:	74fb      	strb	r3, [r7, #19]
 8000b64:	e093      	b.n	8000c8e <SystCLK_CalculatePLLCFGR+0x19a>
	}
	else{
		PLLM_=8;
 8000b66:	2308      	movs	r3, #8
 8000b68:	74fb      	strb	r3, [r7, #19]
		auxClk =  ( (100*PLLCLK) / (PLLM_));
 8000b6a:	78bb      	ldrb	r3, [r7, #2]
 8000b6c:	2264      	movs	r2, #100	; 0x64
 8000b6e:	fb03 f202 	mul.w	r2, r3, r2
 8000b72:	7cfb      	ldrb	r3, [r7, #19]
 8000b74:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b78:	617b      	str	r3, [r7, #20]
	}
	while((PLLM_<=PLLCLK)&&(auxClk!=SYSCLK)){//Si las dos décimas son diferente de cero se itera
 8000b7a:	e088      	b.n	8000c8e <SystCLK_CalculatePLLCFGR+0x19a>
		PLLN_=50;
 8000b7c:	2332      	movs	r3, #50	; 0x32
 8000b7e:	823b      	strh	r3, [r7, #16]
		auxClk =  ( (100*PLLCLK) / (PLLM_)) * PLLN_ ;
 8000b80:	78bb      	ldrb	r3, [r7, #2]
 8000b82:	2264      	movs	r2, #100	; 0x64
 8000b84:	fb03 f202 	mul.w	r2, r3, r2
 8000b88:	7cfb      	ldrb	r3, [r7, #19]
 8000b8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b8e:	8a3a      	ldrh	r2, [r7, #16]
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	617b      	str	r3, [r7, #20]
		PLLN_=SystCLK_GetPLLNStart(auxClk,PLLCLK, PLLM_, PLLN_);//Obtiene el valor de PLLN inicial
 8000b96:	8a3b      	ldrh	r3, [r7, #16]
 8000b98:	7cfa      	ldrb	r2, [r7, #19]
 8000b9a:	78b9      	ldrb	r1, [r7, #2]
 8000b9c:	6978      	ldr	r0, [r7, #20]
 8000b9e:	f000 f917 	bl	8000dd0 <SystCLK_GetPLLNStart>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	823b      	strh	r3, [r7, #16]
		while((PLLN_<=432)&&(auxClk!=SYSCLK)&&(auxClk<=43200)){
 8000ba6:	e05c      	b.n	8000c62 <SystCLK_CalculatePLLCFGR+0x16e>
			if(((auxClk/7)<SYSCLK)||((auxClk/8)<SYSCLK)){
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	4b72      	ldr	r3, [pc, #456]	; (8000d74 <SystCLK_CalculatePLLCFGR+0x280>)
 8000bac:	fba3 1302 	umull	r1, r3, r3, r2
 8000bb0:	1ad2      	subs	r2, r2, r3
 8000bb2:	0852      	lsrs	r2, r2, #1
 8000bb4:	4413      	add	r3, r2
 8000bb6:	089a      	lsrs	r2, r3, #2
 8000bb8:	89fb      	ldrh	r3, [r7, #14]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d304      	bcc.n	8000bc8 <SystCLK_CalculatePLLCFGR+0xd4>
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	08da      	lsrs	r2, r3, #3
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d249      	bcs.n	8000c5c <SystCLK_CalculatePLLCFGR+0x168>
				PLL_P_R_=2;//PLLP o PLLR
 8000bc8:	2302      	movs	r3, #2
 8000bca:	74bb      	strb	r3, [r7, #18]
				auxClk /= PLL_P_R_;
 8000bcc:	7cbb      	ldrb	r3, [r7, #18]
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd4:	617b      	str	r3, [r7, #20]
				if(sourceSYS==2){//PLLP values: 2, 4, 6, 8
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d10f      	bne.n	8000bfc <SystCLK_CalculatePLLCFGR+0x108>
					PLL_P_R_=SystCLK_CalculatePLL_P_R(auxClk, PLLCLK, SYSCLK, PLLM_, PLLN_, PLL_P_R_, 2);
 8000bdc:	7cf8      	ldrb	r0, [r7, #19]
 8000bde:	89fa      	ldrh	r2, [r7, #14]
 8000be0:	78b9      	ldrb	r1, [r7, #2]
 8000be2:	2302      	movs	r3, #2
 8000be4:	9302      	str	r3, [sp, #8]
 8000be6:	7cbb      	ldrb	r3, [r7, #18]
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	8a3b      	ldrh	r3, [r7, #16]
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6978      	ldr	r0, [r7, #20]
 8000bf2:	f000 f917 	bl	8000e24 <SystCLK_CalculatePLL_P_R>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	74bb      	strb	r3, [r7, #18]
 8000bfa:	e00e      	b.n	8000c1a <SystCLK_CalculatePLLCFGR+0x126>
				}
				else{//PLLR values: 2-7
					PLL_P_R_=SystCLK_CalculatePLL_P_R(auxClk, PLLCLK, SYSCLK, PLLM_, PLLN_, PLL_P_R_, 1);
 8000bfc:	7cf8      	ldrb	r0, [r7, #19]
 8000bfe:	89fa      	ldrh	r2, [r7, #14]
 8000c00:	78b9      	ldrb	r1, [r7, #2]
 8000c02:	2301      	movs	r3, #1
 8000c04:	9302      	str	r3, [sp, #8]
 8000c06:	7cbb      	ldrb	r3, [r7, #18]
 8000c08:	9301      	str	r3, [sp, #4]
 8000c0a:	8a3b      	ldrh	r3, [r7, #16]
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6978      	ldr	r0, [r7, #20]
 8000c12:	f000 f907 	bl	8000e24 <SystCLK_CalculatePLL_P_R>
 8000c16:	4603      	mov	r3, r0
 8000c18:	74bb      	strb	r3, [r7, #18]
				}
				if(PLL_P_R_>8){
 8000c1a:	7cbb      	ldrb	r3, [r7, #18]
 8000c1c:	2b08      	cmp	r3, #8
 8000c1e:	d90e      	bls.n	8000c3e <SystCLK_CalculatePLLCFGR+0x14a>
					PLLN_++;
 8000c20:	8a3b      	ldrh	r3, [r7, #16]
 8000c22:	3301      	adds	r3, #1
 8000c24:	823b      	strh	r3, [r7, #16]
					auxClk = ( 100*PLLCLK / PLLM_) * PLLN_;
 8000c26:	78bb      	ldrb	r3, [r7, #2]
 8000c28:	2264      	movs	r2, #100	; 0x64
 8000c2a:	fb03 f202 	mul.w	r2, r3, r2
 8000c2e:	7cfb      	ldrb	r3, [r7, #19]
 8000c30:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c34:	8a3a      	ldrh	r2, [r7, #16]
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e011      	b.n	8000c62 <SystCLK_CalculatePLLCFGR+0x16e>
				}
				else{
					auxClk = (( 100*PLLCLK / PLLM_) * PLLN_) / PLL_P_R_;//Se obtienen los valores esperados
 8000c3e:	78bb      	ldrb	r3, [r7, #2]
 8000c40:	2264      	movs	r2, #100	; 0x64
 8000c42:	fb03 f202 	mul.w	r2, r3, r2
 8000c46:	7cfb      	ldrb	r3, [r7, #19]
 8000c48:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c4c:	8a3a      	ldrh	r2, [r7, #16]
 8000c4e:	fb03 f202 	mul.w	r2, r3, r2
 8000c52:	7cbb      	ldrb	r3, [r7, #18]
 8000c54:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c58:	617b      	str	r3, [r7, #20]
				if(PLL_P_R_>8){
 8000c5a:	e002      	b.n	8000c62 <SystCLK_CalculatePLLCFGR+0x16e>
				}
			}
			else{
				PLLN_=433;
 8000c5c:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000c60:	823b      	strh	r3, [r7, #16]
		while((PLLN_<=432)&&(auxClk!=SYSCLK)&&(auxClk<=43200)){
 8000c62:	8a3b      	ldrh	r3, [r7, #16]
 8000c64:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8000c68:	d808      	bhi.n	8000c7c <SystCLK_CalculatePLLCFGR+0x188>
 8000c6a:	89fb      	ldrh	r3, [r7, #14]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d004      	beq.n	8000c7c <SystCLK_CalculatePLLCFGR+0x188>
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	f64a 02c0 	movw	r2, #43200	; 0xa8c0
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d995      	bls.n	8000ba8 <SystCLK_CalculatePLLCFGR+0xb4>
			}
		}
		if(auxClk!=SYSCLK){
 8000c7c:	89fb      	ldrh	r3, [r7, #14]
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d004      	beq.n	8000c8e <SystCLK_CalculatePLLCFGR+0x19a>
			PLLM_+=up;
 8000c84:	7cfa      	ldrb	r2, [r7, #19]
 8000c86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c8a:	4413      	add	r3, r2
 8000c8c:	74fb      	strb	r3, [r7, #19]
	while((PLLM_<=PLLCLK)&&(auxClk!=SYSCLK)){//Si las dos décimas son diferente de cero se itera
 8000c8e:	7cfa      	ldrb	r2, [r7, #19]
 8000c90:	78bb      	ldrb	r3, [r7, #2]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d804      	bhi.n	8000ca0 <SystCLK_CalculatePLLCFGR+0x1ac>
 8000c96:	89fb      	ldrh	r3, [r7, #14]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	f47f af6e 	bne.w	8000b7c <SystCLK_CalculatePLLCFGR+0x88>
		}
	}

	if((auxClk!=SYSCLK)&&(PLL_P_R_>8)&&(PLLM_>PLLCLK)&&(PLLN_>432)){//No se ecnontró un valor adecuado
 8000ca0:	89fb      	ldrh	r3, [r7, #14]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d010      	beq.n	8000cca <SystCLK_CalculatePLLCFGR+0x1d6>
 8000ca8:	7cbb      	ldrb	r3, [r7, #18]
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d90d      	bls.n	8000cca <SystCLK_CalculatePLLCFGR+0x1d6>
 8000cae:	7cfa      	ldrb	r2, [r7, #19]
 8000cb0:	78bb      	ldrb	r3, [r7, #2]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d909      	bls.n	8000cca <SystCLK_CalculatePLLCFGR+0x1d6>
 8000cb6:	8a3b      	ldrh	r3, [r7, #16]
 8000cb8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8000cbc:	d905      	bls.n	8000cca <SystCLK_CalculatePLLCFGR+0x1d6>
		SystCLK_SetPLLPredet(); //SYS = 80MHz, APB1, APB2 = 40MHz
 8000cbe:	f000 f919 	bl	8000ef4 <SystCLK_SetPLLPredet>
		SYSCLKCFG->SYSCLK = 80;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2250      	movs	r2, #80	; 0x50
 8000cc6:	701a      	strb	r2, [r3, #0]
		else{//HSI PLL SOURCE
			RCC_PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;
			SystCLK_SetPLLON(0);
		}
	}
}
 8000cc8:	e050      	b.n	8000d6c <SystCLK_CalculatePLLCFGR+0x278>
		SYSCLKCFG->SYSCLK = auxClk/100;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	4a2a      	ldr	r2, [pc, #168]	; (8000d78 <SystCLK_CalculatePLLCFGR+0x284>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	701a      	strb	r2, [r3, #0]
		if(sourceSYS==2){//PLLP como fuente del sistema
 8000cda:	78fb      	ldrb	r3, [r7, #3]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d11b      	bne.n	8000d18 <SystCLK_CalculatePLLCFGR+0x224>
			PLL_P_R_= ( (PLL_P_R_/2) - 1 );//
 8000ce0:	7cbb      	ldrb	r3, [r7, #18]
 8000ce2:	085b      	lsrs	r3, r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	74bb      	strb	r3, [r7, #18]
			RCC_CFGR = RCC_CFGR_SW_PLL;
 8000cea:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <SystCLK_CalculatePLLCFGR+0x288>)
 8000cec:	2202      	movs	r2, #2
 8000cee:	601a      	str	r2, [r3, #0]
			SystCLK_SetPres(SYSCLKCFG, preAHB1, preAPB1, preAPB2);
 8000cf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cf4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cf8:	7879      	ldrb	r1, [r7, #1]
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fd30 	bl	8000760 <SystCLK_SetPres>
			RCC_PLLCFGR = ((PLLM_<<RCC_PLLCFGR_PLLM_Pos)|(PLLN_<<RCC_PLLCFGR_PLLN_Pos)|(PLL_P_R_<<RCC_PLLCFGR_PLLP_Pos)|RCC_PLLCFGR_PLLQ_1|RCC_PLLCFGR_PLLR_1);//Configurar antes de activar
 8000d00:	7cfa      	ldrb	r2, [r7, #19]
 8000d02:	8a3b      	ldrh	r3, [r7, #16]
 8000d04:	019b      	lsls	r3, r3, #6
 8000d06:	431a      	orrs	r2, r3
 8000d08:	7cbb      	ldrb	r3, [r7, #18]
 8000d0a:	041b      	lsls	r3, r3, #16
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <SystCLK_CalculatePLLCFGR+0x28c>)
 8000d10:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	e015      	b.n	8000d44 <SystCLK_CalculatePLLCFGR+0x250>
			RCC_CFGR = RCC_CFGR_SW_PLLR;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <SystCLK_CalculatePLLCFGR+0x288>)
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	601a      	str	r2, [r3, #0]
			SystCLK_SetPres(SYSCLKCFG, preAHB1, preAPB1, preAPB2);
 8000d1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d22:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d26:	7879      	ldrb	r1, [r7, #1]
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fd19 	bl	8000760 <SystCLK_SetPres>
			RCC_PLLCFGR = ((PLLM_<<RCC_PLLCFGR_PLLM_Pos)|(PLLN_<<RCC_PLLCFGR_PLLN_Pos)|(PLL_P_R_<<RCC_PLLCFGR_PLLR_Pos)|RCC_PLLCFGR_PLLQ_1|RCC_PLLCFGR_PLLR_1);//Configurar antes de activar
 8000d2e:	7cfa      	ldrb	r2, [r7, #19]
 8000d30:	8a3b      	ldrh	r3, [r7, #16]
 8000d32:	019b      	lsls	r3, r3, #6
 8000d34:	431a      	orrs	r2, r3
 8000d36:	7cbb      	ldrb	r3, [r7, #18]
 8000d38:	071b      	lsls	r3, r3, #28
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <SystCLK_CalculatePLLCFGR+0x28c>)
 8000d3e:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000d42:	6013      	str	r3, [r2, #0]
		if(PLLCLK==HSECLK){//HSE PLL SOURCE
 8000d44:	78bb      	ldrb	r3, [r7, #2]
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d109      	bne.n	8000d5e <SystCLK_CalculatePLLCFGR+0x26a>
			RCC_PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <SystCLK_CalculatePLLCFGR+0x28c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <SystCLK_CalculatePLLCFGR+0x28c>)
 8000d50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d54:	6013      	str	r3, [r2, #0]
			SystCLK_SetPLLON(1);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fea4 	bl	8000aa4 <SystCLK_SetPLLON>
}
 8000d5c:	e006      	b.n	8000d6c <SystCLK_CalculatePLLCFGR+0x278>
			RCC_PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <SystCLK_CalculatePLLCFGR+0x28c>)
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <SystCLK_CalculatePLLCFGR+0x28c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6013      	str	r3, [r2, #0]
			SystCLK_SetPLLON(0);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fe9c 	bl	8000aa4 <SystCLK_SetPLLON>
}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	24924925 	.word	0x24924925
 8000d78:	51eb851f 	.word	0x51eb851f
 8000d7c:	40023808 	.word	0x40023808
 8000d80:	40023804 	.word	0x40023804

08000d84 <SystCLK_GetPLLMStart>:

uint8_t SystCLK_GetPLLMStart(uint32_t freq_100, uint8_t valueCLK, uint8_t PLLM, uint8_t up){
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	461a      	mov	r2, r3
 8000d92:	4603      	mov	r3, r0
 8000d94:	70fb      	strb	r3, [r7, #3]
 8000d96:	460b      	mov	r3, r1
 8000d98:	70bb      	strb	r3, [r7, #2]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	707b      	strb	r3, [r7, #1]
	uint8_t PLLM_=PLLM;
 8000d9e:	78bb      	ldrb	r3, [r7, #2]
 8000da0:	73fb      	strb	r3, [r7, #15]
	while(freq_100>200){//Busca el valor de M desde el cuál se puede iterar
 8000da2:	e00b      	b.n	8000dbc <SystCLK_GetPLLMStart+0x38>
		PLLM_+=up;
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	787b      	ldrb	r3, [r7, #1]
 8000da8:	4413      	add	r3, r2
 8000daa:	73fb      	strb	r3, [r7, #15]
		freq_100 = ( (100*valueCLK) / PLLM_);
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	2264      	movs	r2, #100	; 0x64
 8000db0:	fb03 f202 	mul.w	r2, r3, r2
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dba:	607b      	str	r3, [r7, #4]
	while(freq_100>200){//Busca el valor de M desde el cuál se puede iterar
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2bc8      	cmp	r3, #200	; 0xc8
 8000dc0:	d8f0      	bhi.n	8000da4 <SystCLK_GetPLLMStart+0x20>
	}
	return PLLM_;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SystCLK_GetPLLNStart>:

uint16_t SystCLK_GetPLLNStart(uint32_t freq_100, uint8_t valueCLK, uint8_t PLLM, uint16_t PLLN){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	4608      	mov	r0, r1
 8000dda:	4611      	mov	r1, r2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4603      	mov	r3, r0
 8000de0:	70fb      	strb	r3, [r7, #3]
 8000de2:	460b      	mov	r3, r1
 8000de4:	70bb      	strb	r3, [r7, #2]
 8000de6:	4613      	mov	r3, r2
 8000de8:	803b      	strh	r3, [r7, #0]
	uint16_t PLLN_=PLLN;
 8000dea:	883b      	ldrh	r3, [r7, #0]
 8000dec:	81fb      	strh	r3, [r7, #14]
	while(freq_100<10000){//Busca el valor de N desde el cuál se puede iterar
 8000dee:	e00d      	b.n	8000e0c <SystCLK_GetPLLNStart+0x3c>
		PLLN_++;
 8000df0:	89fb      	ldrh	r3, [r7, #14]
 8000df2:	3301      	adds	r3, #1
 8000df4:	81fb      	strh	r3, [r7, #14]
		freq_100 = ( (100*valueCLK) / PLLM) * PLLN;
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	2264      	movs	r2, #100	; 0x64
 8000dfa:	fb03 f202 	mul.w	r2, r3, r2
 8000dfe:	78bb      	ldrb	r3, [r7, #2]
 8000e00:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e04:	883a      	ldrh	r2, [r7, #0]
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	607b      	str	r3, [r7, #4]
	while(freq_100<10000){//Busca el valor de N desde el cuál se puede iterar
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d9ec      	bls.n	8000df0 <SystCLK_GetPLLNStart+0x20>
	}
	return PLLN_;
 8000e16:	89fb      	ldrh	r3, [r7, #14]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <SystCLK_CalculatePLL_P_R>:

uint8_t SystCLK_CalculatePLL_P_R(uint32_t freq_100, uint8_t valueCLK, uint16_t SYSCLK, uint8_t PLLM, uint16_t PLLN, uint8_t PLL_P_R, uint8_t up){
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	4611      	mov	r1, r2
 8000e30:	461a      	mov	r2, r3
 8000e32:	4603      	mov	r3, r0
 8000e34:	70fb      	strb	r3, [r7, #3]
 8000e36:	460b      	mov	r3, r1
 8000e38:	803b      	strh	r3, [r7, #0]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	70bb      	strb	r3, [r7, #2]
	uint8_t PLL_P_R_=PLL_P_R;
 8000e3e:	7f3b      	ldrb	r3, [r7, #28]
 8000e40:	73fb      	strb	r3, [r7, #15]
	while(freq_100>18000){//Busca el valor desde el cuál se puede iterar
 8000e42:	e012      	b.n	8000e6a <SystCLK_CalculatePLL_P_R+0x46>
		PLL_P_R_ += up;
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	73fb      	strb	r3, [r7, #15]
		freq_100 = ( ( (100*valueCLK) / PLLM) * PLLN ) / PLL_P_R_;
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	2264      	movs	r2, #100	; 0x64
 8000e52:	fb03 f202 	mul.w	r2, r3, r2
 8000e56:	78bb      	ldrb	r3, [r7, #2]
 8000e58:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e5c:	8b3a      	ldrh	r2, [r7, #24]
 8000e5e:	fb03 f202 	mul.w	r2, r3, r2
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e68:	607b      	str	r3, [r7, #4]
	while(freq_100>18000){//Busca el valor desde el cuál se puede iterar
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f244 6250 	movw	r2, #18000	; 0x4650
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d8e7      	bhi.n	8000e44 <SystCLK_CalculatePLL_P_R+0x20>
	}
	if (freq_100>=2400){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000e7a:	d332      	bcc.n	8000ee2 <SystCLK_CalculatePLL_P_R+0xbe>
		//freq_100=1;//aseguramos que etre al
		while((PLL_P_R_<=8)&&(freq_100!=SYSCLK)){
 8000e7c:	e029      	b.n	8000ed2 <SystCLK_CalculatePLL_P_R+0xae>
			PLL_P_R_ += up;
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e84:	4413      	add	r3, r2
 8000e86:	73fb      	strb	r3, [r7, #15]
			freq_100 = ( ( (100*valueCLK) / PLLM) * PLLN ) / PLL_P_R_;
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	2264      	movs	r2, #100	; 0x64
 8000e8c:	fb03 f202 	mul.w	r2, r3, r2
 8000e90:	78bb      	ldrb	r3, [r7, #2]
 8000e92:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e96:	8b3a      	ldrh	r2, [r7, #24]
 8000e98:	fb03 f202 	mul.w	r2, r3, r2
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ea2:	607b      	str	r3, [r7, #4]
			if((freq_100!=SYSCLK)&&((PLL_P_R_==8)|(PLL_P_R_==7))){//Value >= 10
 8000ea4:	883b      	ldrh	r3, [r7, #0]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d012      	beq.n	8000ed2 <SystCLK_CalculatePLL_P_R+0xae>
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	2b08      	cmp	r3, #8
 8000eb0:	bf0c      	ite	eq
 8000eb2:	2301      	moveq	r3, #1
 8000eb4:	2300      	movne	r3, #0
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2b07      	cmp	r3, #7
 8000ebc:	bf0c      	ite	eq
 8000ebe:	2301      	moveq	r3, #1
 8000ec0:	2300      	movne	r3, #0
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d002      	beq.n	8000ed2 <SystCLK_CalculatePLL_P_R+0xae>
				PLL_P_R_ += 2;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	3302      	adds	r3, #2
 8000ed0:	73fb      	strb	r3, [r7, #15]
		while((PLL_P_R_<=8)&&(freq_100!=SYSCLK)){
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b08      	cmp	r3, #8
 8000ed6:	d806      	bhi.n	8000ee6 <SystCLK_CalculatePLL_P_R+0xc2>
 8000ed8:	883b      	ldrh	r3, [r7, #0]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d1ce      	bne.n	8000e7e <SystCLK_CalculatePLL_P_R+0x5a>
 8000ee0:	e001      	b.n	8000ee6 <SystCLK_CalculatePLL_P_R+0xc2>
			}
		}
	}
	else{
		PLL_P_R_=9;
 8000ee2:	2309      	movs	r3, #9
 8000ee4:	73fb      	strb	r3, [r7, #15]
	}
	return PLL_P_R_;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SystCLK_SetPLLPredet>:
//
void SystCLK_SetPLLPredet(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	RCC_CFGR = (RCC_CFGR_SW_PLL|RCC_CFGR_HPRE_DIV1|RCC_CFGR_PPRE1_DIV2|RCC_CFGR_PPRE2_DIV2) ;//SW = PLLP Source, AHB=1, APB1=2, APB2=2, APB1 Source 40MHz para I2C
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <SystCLK_SetPLLPredet+0x30>)
 8000efa:	f249 0202 	movw	r2, #36866	; 0x9002
 8000efe:	601a      	str	r2, [r3, #0]
	RCC_PLLCFGR = (RCC_PLLCFGR_PLLM_1|(80<<RCC_PLLCFGR_PLLN_Pos)|(1<<RCC_PLLCFGR_PLLP_Pos)|RCC_PLLCFGR_PLLQ_1|RCC_PLLCFGR_PLLR_1);//PLL source = HSE, PLLM =80 , PLLN = 40, PLLP = 4. SYS = 80 MHz; configurar antes de activar
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <SystCLK_SetPLLPredet+0x34>)
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <SystCLK_SetPLLPredet+0x38>)
 8000f04:	601a      	str	r2, [r3, #0]
	RCC_PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <SystCLK_SetPLLPredet+0x34>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <SystCLK_SetPLLPredet+0x34>)
 8000f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f10:	6013      	str	r3, [r2, #0]
	embbFLash_Conf(80);//Se configuran los ciclos de la memoria Flash
 8000f12:	2050      	movs	r0, #80	; 0x50
 8000f14:	f002 f886 	bl	8003024 <embbFLash_Conf>
	SystCLK_SetPLLON(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f7ff fdc3 	bl	8000aa4 <SystCLK_SetPLLON>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023808 	.word	0x40023808
 8000f28:	40023804 	.word	0x40023804
 8000f2c:	22011402 	.word	0x22011402

08000f30 <SYSCFG_SetCMP_PD>:
 *  Created on: 1 dic 2022
 *      Author: jurl9
 */
#include "SYSCFG.h"
//I/O Compensation Cell enabled
void SYSCFG_SetCMP_PD(){
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	SYSCFG_CMPCR |= SYSCFG_CMP_PD_EN;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <SYSCFG_SetCMP_PD+0x1c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <SYSCFG_SetCMP_PD+0x1c>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40013820 	.word	0x40013820

08000f50 <SYSCFG_WaitREADY>:

void SYSCFG_WaitREADY(){
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	while((SYSCFG_CMPCR&SYSCFG_READY_0)==0);
 8000f54:	bf00      	nop
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SYSCFG_WaitREADY+0x20>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f9      	beq.n	8000f56 <SYSCFG_WaitREADY+0x6>
}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40013820 	.word	0x40013820

08000f74 <TIMx_Init>:
void TIMx_GPIO_Init(GPIO_TypeDef *Port_, uint8_t Pin_, uint8_t AFR_){
	//RCC_EnPort(Port_);
	GPIOx_InitAF(Port_, Pin_, GPIO_OTYPER_PP , GPIO_OSPEEDR_0,  AFR_);
}

void TIMx_Init(TIM_HandlerDef * tim, TIM_ChannelCFG * chcfg, uint8_t mms, uint8_t sms, uint8_t ts, uint8_t cms, uint8_t up_down){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	460b      	mov	r3, r1
 8000f84:	71fb      	strb	r3, [r7, #7]
 8000f86:	4613      	mov	r3, r2
 8000f88:	71bb      	strb	r3, [r7, #6]
	uint8_t timertype = TIMx_VerifyFunctionalities(tim);
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f001 fc06 	bl	800279c <TIMx_VerifyFunctionalities>
 8000f90:	4603      	mov	r3, r0
 8000f92:	757b      	strb	r3, [r7, #21]
	uint8_t i=0, numchannel=0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	75fb      	strb	r3, [r7, #23]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	75bb      	strb	r3, [r7, #22]
	RCC_EnTimx(tim);
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f001 fb2d 	bl	80025fc <RCC_EnTimx>
	TIMx_DisableCEN(tim);
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f001 faf4 	bl	8002590 <TIMx_DisableCEN>
	if((timertype==TIM_TYPE_ADVANCED)||(timertype==TIM_TYPE_GP_4CH)){
 8000fa8:	7d7b      	ldrb	r3, [r7, #21]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d002      	beq.n	8000fb4 <TIMx_Init+0x40>
 8000fae:	7d7b      	ldrb	r3, [r7, #21]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d102      	bne.n	8000fba <TIMx_Init+0x46>
		numchannel=4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	75bb      	strb	r3, [r7, #22]
 8000fb8:	e00a      	b.n	8000fd0 <TIMx_Init+0x5c>
	}
	else if(timertype==TIM_TYPE_GP_2CH){
 8000fba:	7d7b      	ldrb	r3, [r7, #21]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d102      	bne.n	8000fc6 <TIMx_Init+0x52>
		numchannel=2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	75bb      	strb	r3, [r7, #22]
 8000fc4:	e004      	b.n	8000fd0 <TIMx_Init+0x5c>
	}
	else if(timertype==TIM_TYPE_GP_1CH){
 8000fc6:	7d7b      	ldrb	r3, [r7, #21]
 8000fc8:	2b04      	cmp	r3, #4
 8000fca:	d101      	bne.n	8000fd0 <TIMx_Init+0x5c>
		numchannel=1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	75bb      	strb	r3, [r7, #22]
	}

	if(numchannel > 1){
 8000fd0:	7dbb      	ldrb	r3, [r7, #22]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d917      	bls.n	8001006 <TIMx_Init+0x92>
		TIMx_SetMMS(tim, mms);//Master Mode
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f001 fa1d 	bl	800241a <TIMx_SetMMS>
		TIMx_SetSMS(tim, sms);//Slave Mode
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f001 fa2e 	bl	8002446 <TIMx_SetSMS>
		TIMx_SetTS(tim, ts); //trigger selection
 8000fea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f001 fa3c 	bl	800246e <TIMx_SetTS>
		tim->Registers->CCR2 &= ~TIM_CR2_TI1S;//Canal 1 como entrada
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001004:	639a      	str	r2, [r3, #56]	; 0x38
		//tim->Registers->SMCR |= TIM_SMCR_MSM;//Delay para mejorar la sincronización
	}

	if((tim->Registers == TIM1)||(tim->Registers == TIM8)||(tim->Registers == TIM9)||(tim->Registers == TIM10)||(tim->Registers == TIM11)){
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a8d      	ldr	r2, [pc, #564]	; (8001240 <TIMx_Init+0x2cc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d013      	beq.n	8001038 <TIMx_Init+0xc4>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a8b      	ldr	r2, [pc, #556]	; (8001244 <TIMx_Init+0x2d0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00e      	beq.n	8001038 <TIMx_Init+0xc4>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a8a      	ldr	r2, [pc, #552]	; (8001248 <TIMx_Init+0x2d4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d009      	beq.n	8001038 <TIMx_Init+0xc4>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a88      	ldr	r2, [pc, #544]	; (800124c <TIMx_Init+0x2d8>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d004      	beq.n	8001038 <TIMx_Init+0xc4>
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a87      	ldr	r2, [pc, #540]	; (8001250 <TIMx_Init+0x2dc>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d11f      	bne.n	8001078 <TIMx_Init+0x104>
		//APB2
		if(SYS_CLK.APB2CLK == SYS_CLK.AHB1CLK){//APB PRESCALER > 1
 8001038:	4b86      	ldr	r3, [pc, #536]	; (8001254 <TIMx_Init+0x2e0>)
 800103a:	78da      	ldrb	r2, [r3, #3]
 800103c:	4b85      	ldr	r3, [pc, #532]	; (8001254 <TIMx_Init+0x2e0>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	429a      	cmp	r2, r3
 8001042:	d10c      	bne.n	800105e <TIMx_Init+0xea>
			TIMx_InternalCLK(tim, chcfg, (SYS_CLK.APB2CLK)*1000000, numchannel);
 8001044:	4b83      	ldr	r3, [pc, #524]	; (8001254 <TIMx_Init+0x2e0>)
 8001046:	78db      	ldrb	r3, [r3, #3]
 8001048:	461a      	mov	r2, r3
 800104a:	4b83      	ldr	r3, [pc, #524]	; (8001258 <TIMx_Init+0x2e4>)
 800104c:	fb02 f303 	mul.w	r3, r2, r3
 8001050:	461a      	mov	r2, r3
 8001052:	7dbb      	ldrb	r3, [r7, #22]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f000 f9c2 	bl	80013e0 <TIMx_InternalCLK>
		if(SYS_CLK.APB2CLK == SYS_CLK.AHB1CLK){//APB PRESCALER > 1
 800105c:	e02b      	b.n	80010b6 <TIMx_Init+0x142>
		}
		else{
			TIMx_InternalCLK(tim, chcfg, (SYS_CLK.APB2CLK)*2000000, numchannel);//El temporizador es un múltiplo de 2
 800105e:	4b7d      	ldr	r3, [pc, #500]	; (8001254 <TIMx_Init+0x2e0>)
 8001060:	78db      	ldrb	r3, [r3, #3]
 8001062:	461a      	mov	r2, r3
 8001064:	4b7d      	ldr	r3, [pc, #500]	; (800125c <TIMx_Init+0x2e8>)
 8001066:	fb02 f303 	mul.w	r3, r2, r3
 800106a:	461a      	mov	r2, r3
 800106c:	7dbb      	ldrb	r3, [r7, #22]
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 f9b5 	bl	80013e0 <TIMx_InternalCLK>
		if(SYS_CLK.APB2CLK == SYS_CLK.AHB1CLK){//APB PRESCALER > 1
 8001076:	e01e      	b.n	80010b6 <TIMx_Init+0x142>
		}
	}
	else{//APB1
		if(SYS_CLK.APB1CLK == SYS_CLK.AHB1CLK){//APB PRESCALER = 1
 8001078:	4b76      	ldr	r3, [pc, #472]	; (8001254 <TIMx_Init+0x2e0>)
 800107a:	789a      	ldrb	r2, [r3, #2]
 800107c:	4b75      	ldr	r3, [pc, #468]	; (8001254 <TIMx_Init+0x2e0>)
 800107e:	785b      	ldrb	r3, [r3, #1]
 8001080:	429a      	cmp	r2, r3
 8001082:	d10c      	bne.n	800109e <TIMx_Init+0x12a>
			TIMx_InternalCLK(tim, chcfg, (SYS_CLK.APB1CLK)*1000000, numchannel);
 8001084:	4b73      	ldr	r3, [pc, #460]	; (8001254 <TIMx_Init+0x2e0>)
 8001086:	789b      	ldrb	r3, [r3, #2]
 8001088:	461a      	mov	r2, r3
 800108a:	4b73      	ldr	r3, [pc, #460]	; (8001258 <TIMx_Init+0x2e4>)
 800108c:	fb02 f303 	mul.w	r3, r2, r3
 8001090:	461a      	mov	r2, r3
 8001092:	7dbb      	ldrb	r3, [r7, #22]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 f9a2 	bl	80013e0 <TIMx_InternalCLK>
 800109c:	e00b      	b.n	80010b6 <TIMx_Init+0x142>
		}
		else{//APB PRESCALER > 1
			TIMx_InternalCLK(tim, chcfg, (SYS_CLK.APB1CLK)*2000000, numchannel);//El temporizador es un múltiplo de 2
 800109e:	4b6d      	ldr	r3, [pc, #436]	; (8001254 <TIMx_Init+0x2e0>)
 80010a0:	789b      	ldrb	r3, [r3, #2]
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b6d      	ldr	r3, [pc, #436]	; (800125c <TIMx_Init+0x2e8>)
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	7dbb      	ldrb	r3, [r7, #22]
 80010ae:	68b9      	ldr	r1, [r7, #8]
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f000 f995 	bl	80013e0 <TIMx_InternalCLK>
		}
	}
	//CR1 Minimum conf
	if((timertype!=TIM_TYPE_GP_1CH)||(timertype!=TIM_TYPE_BASIC)){
 80010b6:	7d7b      	ldrb	r3, [r7, #21]
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d102      	bne.n	80010c2 <TIMx_Init+0x14e>
 80010bc:	7d7b      	ldrb	r3, [r7, #21]
 80010be:	2b05      	cmp	r3, #5
 80010c0:	d005      	beq.n	80010ce <TIMx_Init+0x15a>
		TIMx_SetDir(tim, up_down);
 80010c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010c6:	4619      	mov	r1, r3
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f001 f9e6 	bl	800249a <TIMx_SetDir>
	}
	TIMx_SetCMS(tim, cms);
 80010ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010d2:	4619      	mov	r1, r3
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f001 f9fe 	bl	80024d6 <TIMx_SetCMS>
	TIMx_EnableARPE(tim);//ARPE
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f001 fa6a 	bl	80025b4 <TIMx_EnableARPE>

	while(i<numchannel){
 80010e0:	e09e      	b.n	8001220 <TIMx_Init+0x2ac>
		if((tim->Parameter.channel_mode[i])==TIM_MODE_OUTPWM){
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	791b      	ldrb	r3, [r3, #4]
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d12f      	bne.n	800114e <TIMx_Init+0x1da>
			//CCMR1 Minimum Conf
			//Channel 1 bits 0-7
			//Channel 2 bits 8-15 (Same as above)
			//CCMR2 for CN3 y CN4
			TIMx_SetCMMR(tim,i);
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	4619      	mov	r1, r3
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 feba 	bl	8001e6c <TIMx_SetCMMR>
			//CCER Minimum conf
			TIMx_SetPolarity(tim, chcfg, i );
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 ff9c 	bl	800203c <TIMx_SetPolarity>
			//BDTR Minimum Conf
			//Se debe configurar respecto a la tabla 109 del CCER
			//for (i = 0; i < 4; ++i) {
			if(timertype==TIM_TYPE_ADVANCED){
 8001104:	7d7b      	ldrb	r3, [r7, #21]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d110      	bne.n	800112c <TIMx_Init+0x1b8>
				TIMx_OutputCB(tim, chcfg[i].CCxE , i+1);
 800110a:	7dfa      	ldrb	r2, [r7, #23]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	461a      	mov	r2, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	4413      	add	r3, r2
 800111a:	7819      	ldrb	r1, [r3, #0]
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	3301      	adds	r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 fbfb 	bl	8001920 <TIMx_OutputCB>
 800112a:	e076      	b.n	800121a <TIMx_Init+0x2a6>
			}
			else{
				TIMx_OutputCBStandard(tim, chcfg[i].CCxE, i+1);
 800112c:	7dfa      	ldrb	r2, [r7, #23]
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4413      	add	r3, r2
 800113c:	7819      	ldrb	r1, [r3, #0]
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	3301      	adds	r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f000 fe1d 	bl	8001d86 <TIMx_OutputCBStandard>
 800114c:	e065      	b.n	800121a <TIMx_Init+0x2a6>
			}
			//}

		}
		else if(((tim->Parameter.channel_mode[i])==TIM_MODE_INCPT)&&(i==0)){//únicamente canal 1
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	791b      	ldrb	r3, [r3, #4]
 8001156:	2b06      	cmp	r3, #6
 8001158:	d129      	bne.n	80011ae <TIMx_Init+0x23a>
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d126      	bne.n	80011ae <TIMx_Init+0x23a>
			tim->Registers->CCMR1 |= (1<<TIM_CCMR1_CC1S_Pos);//as Input IC1 is mapped on TI1 ----------------------------------------------------------
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	699a      	ldr	r2, [r3, #24]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0201 	orr.w	r2, r2, #1
 800116e:	619a      	str	r2, [r3, #24]
			tim->Registers->CCMR1 &= (~TIM_CCMR1_IC1PSC);//No prescaler
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	699a      	ldr	r2, [r3, #24]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 020c 	bic.w	r2, r2, #12
 800117e:	619a      	str	r2, [r3, #24]
			tim->Registers->CCMR1 &= (~TIM_CCMR1_IC1F);//No filter
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699a      	ldr	r2, [r3, #24]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800118e:	619a      	str	r2, [r3, #24]
			TIMx_SetPolarityDetection(tim, chcfg, i );//Rising edge and falling edge
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	461a      	mov	r2, r3
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f001 f902 	bl	80023a0 <TIMx_SetPolarityDetection>
			tim->Registers->CCER |= TIM_CCER_CC1E; //Capture enable
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6a1a      	ldr	r2, [r3, #32]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	621a      	str	r2, [r3, #32]
 80011ac:	e035      	b.n	800121a <TIMx_Init+0x2a6>

		}
		//No se pueden combinar en canales temporizadores de conteo hacia arriba y abajo al mismo tiempo
		else if(((tim->Parameter.channel_mode[i])==TIM_MODE_UPCOUNT)||((tim->Parameter.channel_mode[i])==TIM_MODE_DWCOUNT)){
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d005      	beq.n	80011c6 <TIMx_Init+0x252>
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4413      	add	r3, r2
 80011c0:	791b      	ldrb	r3, [r3, #4]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d129      	bne.n	800121a <TIMx_Init+0x2a6>
			TIMx_SetPolarity(tim, chcfg, i );
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
 80011c8:	461a      	mov	r2, r3
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f000 ff35 	bl	800203c <TIMx_SetPolarity>
			if(timertype==TIM_TYPE_ADVANCED){
 80011d2:	7d7b      	ldrb	r3, [r7, #21]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d110      	bne.n	80011fa <TIMx_Init+0x286>
				TIMx_OutputCB(tim, chcfg[i].CCxE , i+1);
 80011d8:	7dfa      	ldrb	r2, [r7, #23]
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	461a      	mov	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4413      	add	r3, r2
 80011e8:	7819      	ldrb	r1, [r3, #0]
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 fb94 	bl	8001920 <TIMx_OutputCB>
 80011f8:	e00f      	b.n	800121a <TIMx_Init+0x2a6>
			}
			else{
				TIMx_OutputCBStandard(tim, chcfg[i].CCxE, i+1);
 80011fa:	7dfa      	ldrb	r2, [r7, #23]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	461a      	mov	r2, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	4413      	add	r3, r2
 800120a:	7819      	ldrb	r1, [r3, #0]
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	3301      	adds	r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461a      	mov	r2, r3
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 fdb6 	bl	8001d86 <TIMx_OutputCBStandard>
			}

		}
		//else{}//No se eligió algún modo de operación
		i++;
 800121a:	7dfb      	ldrb	r3, [r7, #23]
 800121c:	3301      	adds	r3, #1
 800121e:	75fb      	strb	r3, [r7, #23]
	while(i<numchannel){
 8001220:	7dfa      	ldrb	r2, [r7, #23]
 8001222:	7dbb      	ldrb	r3, [r7, #22]
 8001224:	429a      	cmp	r2, r3
 8001226:	f4ff af5c 	bcc.w	80010e2 <TIMx_Init+0x16e>
	}

	TIMx_SetUG(tim);
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f001 f98c 	bl	8002548 <TIMx_SetUG>
	TIMx_EnableCEN(tim);
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f001 f99b 	bl	800256c <TIMx_EnableCEN>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40010000 	.word	0x40010000
 8001244:	40010400 	.word	0x40010400
 8001248:	40014000 	.word	0x40014000
 800124c:	40014400 	.word	0x40014400
 8001250:	40014800 	.word	0x40014800
 8001254:	20000034 	.word	0x20000034
 8001258:	000f4240 	.word	0x000f4240
 800125c:	001e8480 	.word	0x001e8480

08001260 <TIM1_UP_TIM10_IRQHandler>:

	}

}

void TIM1_UP_TIM10_IRQHandler(){
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	//Limpiar bandera
	TIM10->SR &= (~TIM_SR_UIF);
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	6113      	str	r3, [r2, #16]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40014400 	.word	0x40014400

08001280 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(){
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	TIM11->SR &= (~TIM_SR_UIF);
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	4a04      	ldr	r2, [pc, #16]	; (800129c <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	6113      	str	r3, [r2, #16]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40014800 	.word	0x40014800

080012a0 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(){
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	TIM13->SR &= (~(TIM_SR_UIF|TIM_SR_TIF));
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <TIM8_UP_TIM13_IRQHandler+0x1c>)
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <TIM8_UP_TIM13_IRQHandler+0x1c>)
 80012aa:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80012ae:	6113      	str	r3, [r2, #16]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40001c00 	.word	0x40001c00

080012c0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
	//Limpiar bandera
	*valor1 = TIM2->CNT;
 80012c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <TIM2_IRQHandler+0x2c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012ce:	601a      	str	r2, [r3, #0]
	TIM2->SR &= (~(TIM_SR_UIF|TIM_SR_TIF));
 80012d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012da:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80012de:	6113      	str	r3, [r2, #16]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	2000003c 	.word	0x2000003c

080012f0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(){
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
	//Limpiar bandera
	*valor2 = TIM3->CNT;
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <TIM3_IRQHandler+0x24>)
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <TIM3_IRQHandler+0x28>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012fc:	601a      	str	r2, [r3, #0]
	TIM3->SR &= (~(TIM_SR_UIF|TIM_SR_TIF));
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <TIM3_IRQHandler+0x24>)
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <TIM3_IRQHandler+0x24>)
 8001304:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8001308:	6113      	str	r3, [r2, #16]
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40000400 	.word	0x40000400
 8001318:	20000040 	.word	0x20000040

0800131c <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	//Limpiar bandera
	*valor3 = TIM4->CNT;
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <TIM4_IRQHandler+0x24>)
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <TIM4_IRQHandler+0x28>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001328:	601a      	str	r2, [r3, #0]
	TIM4->SR &= (~(TIM_SR_UIF|TIM_SR_TIF));
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <TIM4_IRQHandler+0x24>)
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <TIM4_IRQHandler+0x24>)
 8001330:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8001334:	6113      	str	r3, [r2, #16]
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	40000800 	.word	0x40000800
 8001344:	20000044 	.word	0x20000044

08001348 <TIM5_IRQHandler>:

void TIM5_IRQHandler(){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	//Limpiar bandera
	*valor4 = TIM5->CNT;
 800134c:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <TIM5_IRQHandler+0x84>)
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <TIM5_IRQHandler+0x88>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001354:	601a      	str	r2, [r3, #0]
	TIM5->SR &= (~(TIM_SR_UIF|TIM_SR_TIF));
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <TIM5_IRQHandler+0x84>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <TIM5_IRQHandler+0x84>)
 800135c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8001360:	6113      	str	r3, [r2, #16]
	/*                   Agregar código
	 *                                */
	LEDS_Toggle();
 8001362:	f7ff f8dd 	bl	8000520 <LEDS_Toggle>

	UARTx_sendData(&UART3_Struct,(CRC[valor]>>24)&0xFF);
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <TIM5_IRQHandler+0x8c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <TIM5_IRQHandler+0x90>)
 800136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001370:	0e1b      	lsrs	r3, r3, #24
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4619      	mov	r1, r3
 8001376:	4819      	ldr	r0, [pc, #100]	; (80013dc <TIM5_IRQHandler+0x94>)
 8001378:	f001 fc8f 	bl	8002c9a <UARTx_sendData>
	UARTx_sendData(&UART3_Struct,(CRC[valor]>>16)&0xFF);
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <TIM5_IRQHandler+0x8c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <TIM5_IRQHandler+0x90>)
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	0c1b      	lsrs	r3, r3, #16
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4619      	mov	r1, r3
 800138c:	4813      	ldr	r0, [pc, #76]	; (80013dc <TIM5_IRQHandler+0x94>)
 800138e:	f001 fc84 	bl	8002c9a <UARTx_sendData>
	UARTx_sendData(&UART3_Struct,(CRC[valor]>>8)&0xFF);
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <TIM5_IRQHandler+0x8c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <TIM5_IRQHandler+0x90>)
 8001398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	480e      	ldr	r0, [pc, #56]	; (80013dc <TIM5_IRQHandler+0x94>)
 80013a4:	f001 fc79 	bl	8002c9a <UARTx_sendData>
	UARTx_sendData(&UART3_Struct,(CRC[valor])&0xFF);
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <TIM5_IRQHandler+0x8c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <TIM5_IRQHandler+0x90>)
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	4809      	ldr	r0, [pc, #36]	; (80013dc <TIM5_IRQHandler+0x94>)
 80013b8:	f001 fc6f 	bl	8002c9a <UARTx_sendData>
	UARTx_sendData(&UART3_Struct,0xFE);
	UARTx_sendData(&UART3_Struct,0xFF);
	UARTx_sendData(&UART3_Struct,0xFF);
	UARTx_sendData(&UART3_Struct,0xFF);
	*/
	valor++;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <TIM5_IRQHandler+0x8c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <TIM5_IRQHandler+0x8c>)
 80013c4:	6013      	str	r3, [r2, #0]
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40000c00 	.word	0x40000c00
 80013d0:	20000048 	.word	0x20000048
 80013d4:	2000004c 	.word	0x2000004c
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000080 	.word	0x20000080

080013e0 <TIMx_InternalCLK>:

//Función para varios valores de ciclo
//Use of internal CLK for TIMES
//Frequency in Hz
bool TIMx_InternalCLK(TIM_HandlerDef * tim, TIM_ChannelCFG * chcfg, uint32_t in_Freq, uint8_t numchannels){//could be float duty
 80013e0:	b480      	push	{r7}
 80013e2:	b08d      	sub	sp, #52	; 0x34
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	70fb      	strb	r3, [r7, #3]
	bool flag = false;//Bandera para indicar operación realizada
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	uint32_t load=0; //= (in_Freq / out_Freq);
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t compareValue=0; //= (duty * load);
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
	uint16_t res=0;//Residuo para máximo dos decimales
 80013fc:	2300      	movs	r3, #0
 80013fe:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t i=0, escaler=100;//Auxiliares; escalador para obtener dos decimales
 8001400:	2300      	movs	r3, #0
 8001402:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001406:	2364      	movs	r3, #100	; 0x64
 8001408:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint32_t prescaler=1; //Prescalador
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
	float out_Freq = tim->Frequency;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	617b      	str	r3, [r7, #20]
	float aux;//Se usa un auxiliar flotante para las primeras operaciones, después se opera con uint32 para mejorar la precisión

	//Uint32 rango de operación

	for (i = 0; i < numchannels; ++i) {
 8001416:	2300      	movs	r3, #0
 8001418:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800141c:	e032      	b.n	8001484 <TIMx_InternalCLK+0xa4>
		if((tim->Parameter.channel_mode[i])!=TIM_MODE_OUTPWM){//Si no es PWM
 800141e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4413      	add	r3, r2
 8001426:	791b      	ldrb	r3, [r3, #4]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d00b      	beq.n	8001444 <TIMx_InternalCLK+0x64>
			chcfg[i].DutyCycle = 100;
 800142c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	461a      	mov	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	4413      	add	r3, r2
 800143e:	4a88      	ldr	r2, [pc, #544]	; (8001660 <TIMx_InternalCLK+0x280>)
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	e01a      	b.n	800147a <TIMx_InternalCLK+0x9a>
			//Se puede considerar el 50% 0 100% del ciclo del trabajo
		}
		else if(chcfg[i].DutyCycle==0){
 8001444:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	461a      	mov	r2, r3
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	4413      	add	r3, r2
 8001456:	edd3 7a01 	vldr	s15, [r3, #4]
 800145a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	d10a      	bne.n	800147a <TIMx_InternalCLK+0x9a>
			chcfg[i].DutyCycle = 10;
 8001464:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	461a      	mov	r2, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	4413      	add	r3, r2
 8001476:	4a7b      	ldr	r2, [pc, #492]	; (8001664 <TIMx_InternalCLK+0x284>)
 8001478:	605a      	str	r2, [r3, #4]
	for (i = 0; i < numchannels; ++i) {
 800147a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800147e:	3301      	adds	r3, #1
 8001480:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001484:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3c7      	bcc.n	800141e <TIMx_InternalCLK+0x3e>
		}
	}

	while((!flag)){//Se opera mientras no se encuentre coincidencia
 800148e:	e14e      	b.n	800172e <TIMx_InternalCLK+0x34e>
		prescaler=1;//Inicializa prescalador
 8001490:	2301      	movs	r3, #1
 8001492:	623b      	str	r3, [r7, #32]

		aux = ( (float)in_Freq / (float)out_Freq);//Cálculo de carga
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800149e:	ed97 7a05 	vldr	s14, [r7, #20]
 80014a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a6:	edc7 7a07 	vstr	s15, [r7, #28]
		if(escaler==1){//Si no se encontró coincidencia, hacemos que coincida la aproximación
 80014aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d103      	bne.n	80014ba <TIMx_InternalCLK+0xda>
			flag=true;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80014b8:	e039      	b.n	800152e <TIMx_InternalCLK+0x14e>
		}
		else{
			aux = (unsigned int)(aux*escaler);//Obtenemos el entero para mayor precisión y escalamos
 80014ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d6:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		//Ingresamos dentro del rango del contador y se busca el máximo valor permitido para la carga
		while(aux > (65535*escaler)){//valor del contador de 16 bits escalado
 80014da:	e028      	b.n	800152e <TIMx_InternalCLK+0x14e>
			prescaler++;
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	3301      	adds	r3, #1
 80014e0:	623b      	str	r3, [r7, #32]
			aux = ( (float)in_Freq / (float)(out_Freq*prescaler));//Carga
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	ee07 3a90 	vmov	s15, r3
 80014e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80014fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001502:	edc7 7a07 	vstr	s15, [r7, #28]
			if(escaler>1){//Si el escalador llega a 1, no es necesario escalar
 8001506:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800150a:	2b01      	cmp	r3, #1
 800150c:	d90f      	bls.n	800152e <TIMx_InternalCLK+0x14e>
				aux = (unsigned int)(aux*escaler);//Valor entero de carga escalado
 800150e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800151a:	edd7 7a07 	vldr	s15, [r7, #28]
 800151e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800152a:	edc7 7a07 	vstr	s15, [r7, #28]
		while(aux > (65535*escaler)){//valor del contador de 16 bits escalado
 800152e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001532:	4613      	mov	r3, r2
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	1a9b      	subs	r3, r3, r2
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	ed97 7a07 	vldr	s14, [r7, #28]
 8001544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154c:	dcc6      	bgt.n	80014dc <TIMx_InternalCLK+0xfc>
			}
		}
		if(escaler==1){
 800154e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001552:	2b01      	cmp	r3, #1
 8001554:	f040 80cf 	bne.w	80016f6 <TIMx_InternalCLK+0x316>
			load = (uint32_t)aux;//Casteo de la carga y almacenamiento para operar el valor correcto
 8001558:	edd7 7a07 	vldr	s15, [r7, #28]
 800155c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001560:	ee17 3a90 	vmov	r3, s15
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		while((!flag)&&(prescaler<65535)){//Se busca un valor que coincida mejor, y que no exceda el preescalador
 8001566:	e0c6      	b.n	80016f6 <TIMx_InternalCLK+0x316>
			i=0;//Se reinicia cuenta
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			flag=true;//Se inicializa la bandera
 800156e:	2301      	movs	r3, #1
 8001570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			load = (uint32_t)aux;//Casteo de la carga y almacenamiento para operar el valor correcto
 8001574:	edd7 7a07 	vldr	s15, [r7, #28]
 8001578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800157c:	ee17 3a90 	vmov	r3, s15
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
			while((i<numchannels)||(numchannels==0)){
 8001582:	e082      	b.n	800168a <TIMx_InternalCLK+0x2aa>
				if(numchannels==0){
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d122      	bne.n	80015d0 <TIMx_InternalCLK+0x1f0>
					res = escaler*(load/escaler);//Ponemos en cero las decimales escaladas
 800158a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800158e:	b29a      	uxth	r2, r3
 8001590:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001596:	fbb1 f3f3 	udiv	r3, r1, r3
 800159a:	b29b      	uxth	r3, r3
 800159c:	fb12 f303 	smulbb	r3, r2, r3
 80015a0:	84fb      	strh	r3, [r7, #38]	; 0x26
					res= load - res;//Obtenemos los últimos dos decimales
 80015a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	84fb      	strh	r3, [r7, #38]	; 0x26
					if(res){//Si no son cero, se busca una mejor aproximación
 80015ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <TIMx_InternalCLK+0x1da>
						flag&=false;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80015b8:	e062      	b.n	8001680 <TIMx_InternalCLK+0x2a0>
					}
					else{
						flag&=true;
 80015ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf14      	ite	ne
 80015c6:	2301      	movne	r3, #1
 80015c8:	2300      	moveq	r3, #0
 80015ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80015ce:	e057      	b.n	8001680 <TIMx_InternalCLK+0x2a0>
					}
				}
				else if(tim->Parameter.channel_mode[i]){//Verifica que haya un modo ==TIM_MODE_OUTPWM
 80015d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d050      	beq.n	8001680 <TIMx_InternalCLK+0x2a0>
					aux = (chcfg[i].DutyCycle * load);//Obtiene el valor a comparar escalado
 80015de:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	461a      	mov	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4413      	add	r3, r2
 80015f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001602:	edc7 7a07 	vstr	s15, [r7, #28]
					compareValue = (uint32_t)aux;//Obtenemos el valor a comparar escalado y almacenamos
 8001606:	edd7 7a07 	vldr	s15, [r7, #28]
 800160a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800160e:	ee17 3a90 	vmov	r3, s15
 8001612:	61bb      	str	r3, [r7, #24]
					res = compareValue - (100*escaler*(compareValue/escaler/100));//Ponemos en cero las decimales escaladas
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	b29a      	uxth	r2, r3
 8001618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800161c:	b299      	uxth	r1, r3
 800161e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001622:	69b8      	ldr	r0, [r7, #24]
 8001624:	fbb0 f3f3 	udiv	r3, r0, r3
 8001628:	480f      	ldr	r0, [pc, #60]	; (8001668 <TIMx_InternalCLK+0x288>)
 800162a:	fba0 0303 	umull	r0, r3, r0, r3
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	b29b      	uxth	r3, r3
 8001632:	fb11 f303 	smulbb	r3, r1, r3
 8001636:	b29b      	uxth	r3, r3
 8001638:	4619      	mov	r1, r3
 800163a:	0089      	lsls	r1, r1, #2
 800163c:	440b      	add	r3, r1
 800163e:	4619      	mov	r1, r3
 8001640:	0088      	lsls	r0, r1, #2
 8001642:	4619      	mov	r1, r3
 8001644:	4603      	mov	r3, r0
 8001646:	440b      	add	r3, r1
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	b29b      	uxth	r3, r3
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	84fb      	strh	r3, [r7, #38]	; 0x26
					//res= compareValue - res;//Obtenemos los últimos dos decimales
					if(res){//Si no son cero, se busca una mejor aproximación
 8001650:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00a      	beq.n	800166c <TIMx_InternalCLK+0x28c>
						flag&=false;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800165c:	e010      	b.n	8001680 <TIMx_InternalCLK+0x2a0>
 800165e:	bf00      	nop
 8001660:	42c80000 	.word	0x42c80000
 8001664:	41200000 	.word	0x41200000
 8001668:	51eb851f 	.word	0x51eb851f
					}
					else{
						flag&=true;
 800166c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf14      	ite	ne
 8001678:	2301      	movne	r3, #1
 800167a:	2300      	moveq	r3, #0
 800167c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					}
				}
				i++;
 8001680:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001684:	3301      	adds	r3, #1
 8001686:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			while((i<numchannels)||(numchannels==0)){
 800168a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	429a      	cmp	r2, r3
 8001692:	f4ff af77 	bcc.w	8001584 <TIMx_InternalCLK+0x1a4>
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	2b00      	cmp	r3, #0
 800169a:	f43f af73 	beq.w	8001584 <TIMx_InternalCLK+0x1a4>

			}
			if(!flag){
 800169e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016a2:	f083 0301 	eor.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d024      	beq.n	80016f6 <TIMx_InternalCLK+0x316>
				prescaler++;//Incrementa el preescalador
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	3301      	adds	r3, #1
 80016b0:	623b      	str	r3, [r7, #32]
				aux = ( (float)in_Freq / (float)(out_Freq*prescaler));//Se calcula la carga de nuevo
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d2:	edc7 7a07 	vstr	s15, [r7, #28]
				aux = (unsigned int)(aux*escaler);//Se escala el valor entero de la carga
 80016d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f2:	edc7 7a07 	vstr	s15, [r7, #28]
		while((!flag)&&(prescaler<65535)){//Se busca un valor que coincida mejor, y que no exceda el preescalador
 80016f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016fa:	f083 0301 	eor.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <TIMx_InternalCLK+0x330>
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800170a:	4293      	cmp	r3, r2
 800170c:	f67f af2c 	bls.w	8001568 <TIMx_InternalCLK+0x188>
			}
		}
		if(!flag){
 8001710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001714:	f083 0301 	eor.w	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <TIMx_InternalCLK+0x34e>
			escaler/=10;//Si no se encuentra con dos decimales, se disminuye a una, hasta ninguna
 800171e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001722:	4a7d      	ldr	r2, [pc, #500]	; (8001918 <TIMx_InternalCLK+0x538>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	while((!flag)){//Se opera mientras no se encuentre coincidencia
 800172e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001732:	f083 0301 	eor.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	f47f aea9 	bne.w	8001490 <TIMx_InternalCLK+0xb0>
		}
	}

	if((!res)&&(flag)){//Se encontró coincidencia
 800173e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001740:	2b00      	cmp	r3, #0
 8001742:	f040 80dd 	bne.w	8001900 <TIMx_InternalCLK+0x520>
 8001746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 80d8 	beq.w	8001900 <TIMx_InternalCLK+0x520>
		tim->Registers->PSC = prescaler-1;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a3a      	ldr	r2, [r7, #32]
 8001756:	3a01      	subs	r2, #1
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
		tim->Prescaler=prescaler;
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	811a      	strh	r2, [r3, #8]
		tim->Registers->ARR = ((load/escaler))-1;
 8001762:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001768:	fbb2 f2f3 	udiv	r2, r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3a01      	subs	r2, #1
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
		tim->Load=(load/escaler);
 8001774:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800177a:	fbb2 f3f3 	udiv	r3, r2, r3
 800177e:	b29a      	uxth	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	815a      	strh	r2, [r3, #10]
		if(numchannels!=0){
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80b6 	beq.w	80018f8 <TIMx_InternalCLK+0x518>
			if(tim->Parameter.channel_mode[0]){//Canal 1
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	791b      	ldrb	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d027      	beq.n	80017e4 <TIMx_InternalCLK+0x404>
				//Cambiar
				if(chcfg[0].DutyCycle!=0){
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	edd3 7a01 	vldr	s15, [r3, #4]
 800179a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	d01f      	beq.n	80017e4 <TIMx_InternalCLK+0x404>
					aux = (chcfg[0].DutyCycle * load);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80017aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b8:	edc7 7a07 	vstr	s15, [r7, #28]
					compareValue = (uint32_t)aux;
 80017bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80017c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c4:	ee17 3a90 	vmov	r3, s15
 80017c8:	61bb      	str	r3, [r7, #24]
					tim->Registers->CCR1 = ( ( ( compareValue / 100 ) / escaler) ) - 1;
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4a53      	ldr	r2, [pc, #332]	; (800191c <TIMx_InternalCLK+0x53c>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	095a      	lsrs	r2, r3, #5
 80017d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3a01      	subs	r2, #1
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
				}
			}
			if(tim->Parameter.channel_mode[1]){//Canal 2
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	795b      	ldrb	r3, [r3, #5]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d029      	beq.n	8001840 <TIMx_InternalCLK+0x460>
				if(chcfg[1].DutyCycle!=0){
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	330c      	adds	r3, #12
 80017f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	d020      	beq.n	8001840 <TIMx_InternalCLK+0x460>
					aux = (chcfg[1].DutyCycle * load);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	330c      	adds	r3, #12
 8001802:	ed93 7a01 	vldr	s14, [r3, #4]
 8001806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001814:	edc7 7a07 	vstr	s15, [r7, #28]
					compareValue = (uint32_t)aux;
 8001818:	edd7 7a07 	vldr	s15, [r7, #28]
 800181c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001820:	ee17 3a90 	vmov	r3, s15
 8001824:	61bb      	str	r3, [r7, #24]
					tim->Registers->CCR2 = ( ( ( compareValue / 100 ) / escaler) ) - 1;
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4a3c      	ldr	r2, [pc, #240]	; (800191c <TIMx_InternalCLK+0x53c>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	095a      	lsrs	r2, r3, #5
 8001830:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001834:	fbb2 f2f3 	udiv	r2, r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3a01      	subs	r2, #1
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
				}
			}
			if(tim->Parameter.channel_mode[2]){//Canal 3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	799b      	ldrb	r3, [r3, #6]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d029      	beq.n	800189c <TIMx_InternalCLK+0x4bc>
				if(chcfg[2].DutyCycle!=0){
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	3318      	adds	r3, #24
 800184c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001850:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	d020      	beq.n	800189c <TIMx_InternalCLK+0x4bc>
					aux = (chcfg[2].DutyCycle * load);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	3318      	adds	r3, #24
 800185e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800186c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001870:	edc7 7a07 	vstr	s15, [r7, #28]
					compareValue = (uint32_t)aux;
 8001874:	edd7 7a07 	vldr	s15, [r7, #28]
 8001878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187c:	ee17 3a90 	vmov	r3, s15
 8001880:	61bb      	str	r3, [r7, #24]
					tim->Registers->CCR3 = ( ( ( compareValue / 100 ) / escaler) ) - 1;
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4a25      	ldr	r2, [pc, #148]	; (800191c <TIMx_InternalCLK+0x53c>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	095a      	lsrs	r2, r3, #5
 800188c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001890:	fbb2 f2f3 	udiv	r2, r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3a01      	subs	r2, #1
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c
				}
			}
			if(tim->Parameter.channel_mode[3]){//Canal 4
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	79db      	ldrb	r3, [r3, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d029      	beq.n	80018f8 <TIMx_InternalCLK+0x518>
				if(chcfg[3].DutyCycle!=0){
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3324      	adds	r3, #36	; 0x24
 80018a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	d020      	beq.n	80018f8 <TIMx_InternalCLK+0x518>
					aux = (chcfg[3].DutyCycle * load);
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	3324      	adds	r3, #36	; 0x24
 80018ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a07 	vstr	s15, [r7, #28]
					compareValue = (uint32_t)aux;
 80018d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80018d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d8:	ee17 3a90 	vmov	r3, s15
 80018dc:	61bb      	str	r3, [r7, #24]
					tim->Registers->CCR4 = ( ( ( compareValue / 100 ) / escaler) ) - 1;
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <TIMx_InternalCLK+0x53c>)
 80018e2:	fba2 2303 	umull	r2, r3, r2, r3
 80018e6:	095a      	lsrs	r2, r3, #5
 80018e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3a01      	subs	r2, #1
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
				}
			}
		}
		flag=true;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80018fe:	e002      	b.n	8001906 <TIMx_InternalCLK+0x526>
	}
	else{//No se encontró coincidencia
		flag = false; //Indica que no se completó
 8001900:	2300      	movs	r3, #0
 8001902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	return flag;//Siempre debe regresar true
 8001906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800190a:	4618      	mov	r0, r3
 800190c:	3734      	adds	r7, #52	; 0x34
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	cccccccd 	.word	0xcccccccd
 800191c:	51eb851f 	.word	0x51eb851f

08001920 <TIMx_OutputCB>:
/*Output control Bits
Parameter OCX_OCXN values:
0 OCX, 1 OCXN, 2 both OCX and OCXN, 3 OCX off state and OCXN ON, 4 OCX ON and OCXN off state,
5 both OCX and OCXN off state
*/
void TIMx_OutputCB(TIM_HandlerDef *tim, uint8_t OCX_OCXN, uint8_t CN){
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	70fb      	strb	r3, [r7, #3]
 800192c:	4613      	mov	r3, r2
 800192e:	70bb      	strb	r3, [r7, #2]
	if(OCX_OCXN==0){//ONLY OCX EN
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d158      	bne.n	80019e8 <TIMx_OutputCB+0xc8>
		//Possible combinations
		tim->Registers->BDTR |= TIM_BDTR_MOE;//MOE=1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
		//OSSI=x
		tim->Registers->BDTR &= (~TIM_BDTR_OSSR);//OSSR=0 or 1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001954:	645a      	str	r2, [r3, #68]	; 0x44
		if(CN==1){
 8001956:	78bb      	ldrb	r3, [r7, #2]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d110      	bne.n	800197e <TIMx_OutputCB+0x5e>
			tim->Registers->CCER |= (TIM_CCER_CC1E);//OUTPUT ENABLED CCXE=1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6a1a      	ldr	r2, [r3, #32]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER &= (~TIM_CCER_CC1NE);//CCXNE=0 or 1 if only 1 cn CCXNE=0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a1a      	ldr	r2, [r3, #32]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0204 	bic.w	r2, r2, #4
 800197a:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC4E);//CCXE=0 or 1
			//tim->Registers->CCER |= (TIM_CCER_CC4NE);//CCXNE=if CCXE 0 CCXNE=1, other 0 or 1
		}
	}
	//else{}//Disabled OCx and OCxN
}
 800197c:	e1fd      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==2){
 800197e:	78bb      	ldrb	r3, [r7, #2]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d110      	bne.n	80019a6 <TIMx_OutputCB+0x86>
			tim->Registers->CCER |= (TIM_CCER_CC2E);//OUTPUT ENABLED CCXE=1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6a1a      	ldr	r2, [r3, #32]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0210 	orr.w	r2, r2, #16
 8001992:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER &= (~TIM_CCER_CC2NE);//CCXNE=0 or 1 if only 1 cn CCXNE=0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a1a      	ldr	r2, [r3, #32]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019a2:	621a      	str	r2, [r3, #32]
}
 80019a4:	e1e9      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==3){
 80019a6:	78bb      	ldrb	r3, [r7, #2]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d110      	bne.n	80019ce <TIMx_OutputCB+0xae>
			tim->Registers->CCER |= (TIM_CCER_CC3E);//OUTPUT ENABLED CCXE=1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6a1a      	ldr	r2, [r3, #32]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ba:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER &= (~TIM_CCER_CC3NE);//CCXNE=0 or 1 if only 1 cn CCXNE=0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6a1a      	ldr	r2, [r3, #32]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ca:	621a      	str	r2, [r3, #32]
}
 80019cc:	e1d5      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==4){
 80019ce:	78bb      	ldrb	r3, [r7, #2]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	f040 81d2 	bne.w	8001d7a <TIMx_OutputCB+0x45a>
			tim->Registers->CCER |= (TIM_CCER_CC4E);//OUTPUT ENABLED CCXE=1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6a1a      	ldr	r2, [r3, #32]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80019e4:	621a      	str	r2, [r3, #32]
}
 80019e6:	e1c8      	b.n	8001d7a <TIMx_OutputCB+0x45a>
	else if(OCX_OCXN==1){
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d158      	bne.n	8001aa0 <TIMx_OutputCB+0x180>
		tim->Registers->BDTR |= TIM_BDTR_MOE;//MOE=1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44
		tim->Registers->BDTR &= (~TIM_BDTR_OSSR);//OSSR=0 or 1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a0c:	645a      	str	r2, [r3, #68]	; 0x44
		if(CN==1){
 8001a0e:	78bb      	ldrb	r3, [r7, #2]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d110      	bne.n	8001a36 <TIMx_OutputCB+0x116>
			tim->Registers->CCER &= (~TIM_CCER_CC1E);//CCXE=0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a1a      	ldr	r2, [r3, #32]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC1NE);//CCXNE=1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6a1a      	ldr	r2, [r3, #32]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0204 	orr.w	r2, r2, #4
 8001a32:	621a      	str	r2, [r3, #32]
}
 8001a34:	e1a1      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==2){
 8001a36:	78bb      	ldrb	r3, [r7, #2]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d110      	bne.n	8001a5e <TIMx_OutputCB+0x13e>
			tim->Registers->CCER &= (~TIM_CCER_CC2E);//CCXE=0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a1a      	ldr	r2, [r3, #32]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0210 	bic.w	r2, r2, #16
 8001a4a:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC2NE);//CCXNE=1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6a1a      	ldr	r2, [r3, #32]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a5a:	621a      	str	r2, [r3, #32]
}
 8001a5c:	e18d      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==3){
 8001a5e:	78bb      	ldrb	r3, [r7, #2]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d110      	bne.n	8001a86 <TIMx_OutputCB+0x166>
			tim->Registers->CCER &= (~TIM_CCER_CC3E);//CCXE=0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a1a      	ldr	r2, [r3, #32]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a72:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC3NE);//CCXNE=1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a1a      	ldr	r2, [r3, #32]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a82:	621a      	str	r2, [r3, #32]
}
 8001a84:	e179      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==4){
 8001a86:	78bb      	ldrb	r3, [r7, #2]
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	f040 8176 	bne.w	8001d7a <TIMx_OutputCB+0x45a>
			tim->Registers->CCER &= (~TIM_CCER_CC4E);//CCXE=0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a9c:	621a      	str	r2, [r3, #32]
}
 8001a9e:	e16c      	b.n	8001d7a <TIMx_OutputCB+0x45a>
	else if(OCX_OCXN==2){
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d158      	bne.n	8001b58 <TIMx_OutputCB+0x238>
		tim->Registers->BDTR |= TIM_BDTR_MOE;//MOE=1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab4:	645a      	str	r2, [r3, #68]	; 0x44
		tim->Registers->BDTR &= (~TIM_BDTR_OSSR);//OSSR=0 or 1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
		if(CN==1){
 8001ac6:	78bb      	ldrb	r3, [r7, #2]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d110      	bne.n	8001aee <TIMx_OutputCB+0x1ce>
			tim->Registers->CCER |= (TIM_CCER_CC1E);//CCXE=1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6a1a      	ldr	r2, [r3, #32]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC1NE);//CCXNE=1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6a1a      	ldr	r2, [r3, #32]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0204 	orr.w	r2, r2, #4
 8001aea:	621a      	str	r2, [r3, #32]
}
 8001aec:	e145      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==2){
 8001aee:	78bb      	ldrb	r3, [r7, #2]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d110      	bne.n	8001b16 <TIMx_OutputCB+0x1f6>
			tim->Registers->CCER |= (TIM_CCER_CC2E);//CCXE=1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6a1a      	ldr	r2, [r3, #32]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0210 	orr.w	r2, r2, #16
 8001b02:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC2NE);//CCXNE=1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6a1a      	ldr	r2, [r3, #32]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b12:	621a      	str	r2, [r3, #32]
}
 8001b14:	e131      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==3){
 8001b16:	78bb      	ldrb	r3, [r7, #2]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d110      	bne.n	8001b3e <TIMx_OutputCB+0x21e>
			tim->Registers->CCER |= (TIM_CCER_CC3E);//CCXE=1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6a1a      	ldr	r2, [r3, #32]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b2a:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC3NE);//CCXNE=1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a1a      	ldr	r2, [r3, #32]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b3a:	621a      	str	r2, [r3, #32]
}
 8001b3c:	e11d      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==4){
 8001b3e:	78bb      	ldrb	r3, [r7, #2]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	f040 811a 	bne.w	8001d7a <TIMx_OutputCB+0x45a>
			tim->Registers->CCER |= (TIM_CCER_CC4E);//CCXE=1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b54:	621a      	str	r2, [r3, #32]
}
 8001b56:	e110      	b.n	8001d7a <TIMx_OutputCB+0x45a>
	else if(OCX_OCXN==3){
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d158      	bne.n	8001c10 <TIMx_OutputCB+0x2f0>
		tim->Registers->BDTR |= TIM_BDTR_MOE;//MOE=1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
		tim->Registers->BDTR &= (~TIM_BDTR_OSSR);//OSSR=1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
		if(CN==1){
 8001b7e:	78bb      	ldrb	r3, [r7, #2]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d110      	bne.n	8001ba6 <TIMx_OutputCB+0x286>
			tim->Registers->CCER &= (~TIM_CCER_CC1E);//CCXE=0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6a1a      	ldr	r2, [r3, #32]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC1NE);//CCXNE=1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6a1a      	ldr	r2, [r3, #32]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0204 	orr.w	r2, r2, #4
 8001ba2:	621a      	str	r2, [r3, #32]
}
 8001ba4:	e0e9      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==2){
 8001ba6:	78bb      	ldrb	r3, [r7, #2]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d110      	bne.n	8001bce <TIMx_OutputCB+0x2ae>
			tim->Registers->CCER &= (~TIM_CCER_CC2E);//CCXE=0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a1a      	ldr	r2, [r3, #32]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0210 	bic.w	r2, r2, #16
 8001bba:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC2NE);//CCXNE=1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6a1a      	ldr	r2, [r3, #32]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bca:	621a      	str	r2, [r3, #32]
}
 8001bcc:	e0d5      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==3){
 8001bce:	78bb      	ldrb	r3, [r7, #2]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d110      	bne.n	8001bf6 <TIMx_OutputCB+0x2d6>
			tim->Registers->CCER &= (~TIM_CCER_CC3E);//CCXE=0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be2:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC3NE);//CCXNE=1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a1a      	ldr	r2, [r3, #32]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bf2:	621a      	str	r2, [r3, #32]
}
 8001bf4:	e0c1      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==4){
 8001bf6:	78bb      	ldrb	r3, [r7, #2]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	f040 80be 	bne.w	8001d7a <TIMx_OutputCB+0x45a>
			tim->Registers->CCER &= (~TIM_CCER_CC4E);//CCXE=0
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6a1a      	ldr	r2, [r3, #32]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c0c:	621a      	str	r2, [r3, #32]
}
 8001c0e:	e0b4      	b.n	8001d7a <TIMx_OutputCB+0x45a>
	else if(OCX_OCXN==4){
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d157      	bne.n	8001cc6 <TIMx_OutputCB+0x3a6>
		tim->Registers->BDTR |= TIM_BDTR_MOE;//MOE=1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44
		tim->Registers->BDTR |= (TIM_BDTR_OSSR);//OSSR=1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
		if(CN==1){
 8001c36:	78bb      	ldrb	r3, [r7, #2]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d110      	bne.n	8001c5e <TIMx_OutputCB+0x33e>
			tim->Registers->CCER |= (TIM_CCER_CC1E);//CCXE=1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6a1a      	ldr	r2, [r3, #32]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER &= (~TIM_CCER_CC1NE);//CCXNE=0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0204 	bic.w	r2, r2, #4
 8001c5a:	621a      	str	r2, [r3, #32]
}
 8001c5c:	e08d      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==2){
 8001c5e:	78bb      	ldrb	r3, [r7, #2]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d110      	bne.n	8001c86 <TIMx_OutputCB+0x366>
			tim->Registers->CCER |= (TIM_CCER_CC2E);//CCXE=1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0210 	orr.w	r2, r2, #16
 8001c72:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER &= (~TIM_CCER_CC2NE);//CCXNE=0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6a1a      	ldr	r2, [r3, #32]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c82:	621a      	str	r2, [r3, #32]
}
 8001c84:	e079      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==3){
 8001c86:	78bb      	ldrb	r3, [r7, #2]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d110      	bne.n	8001cae <TIMx_OutputCB+0x38e>
			tim->Registers->CCER |= (TIM_CCER_CC3E);//CCXE=1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6a1a      	ldr	r2, [r3, #32]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c9a:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER &= (~TIM_CCER_CC3NE);//CCXNE=0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6a1a      	ldr	r2, [r3, #32]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001caa:	621a      	str	r2, [r3, #32]
}
 8001cac:	e065      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==4){
 8001cae:	78bb      	ldrb	r3, [r7, #2]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d162      	bne.n	8001d7a <TIMx_OutputCB+0x45a>
			tim->Registers->CCER |= (TIM_CCER_CC4E);//CCXE=1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6a1a      	ldr	r2, [r3, #32]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001cc2:	621a      	str	r2, [r3, #32]
}
 8001cc4:	e059      	b.n	8001d7a <TIMx_OutputCB+0x45a>
	else if(OCX_OCXN==5){
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	d156      	bne.n	8001d7a <TIMx_OutputCB+0x45a>
		tim->Registers->BDTR &= (~TIM_BDTR_MOE);//MOE=0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
		tim->Registers->BDTR |= (TIM_BDTR_OSSI);//OSSI=1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cea:	645a      	str	r2, [r3, #68]	; 0x44
		if(CN==1){
 8001cec:	78bb      	ldrb	r3, [r7, #2]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d110      	bne.n	8001d14 <TIMx_OutputCB+0x3f4>
			tim->Registers->CCER |= (TIM_CCER_CC1E);//CCXE=0 or 1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6a1a      	ldr	r2, [r3, #32]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0201 	orr.w	r2, r2, #1
 8001d00:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC1NE);//CCXNE=if CCXE 0 CCXNE=1, other 0 or 1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0204 	orr.w	r2, r2, #4
 8001d10:	621a      	str	r2, [r3, #32]
}
 8001d12:	e032      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==2){
 8001d14:	78bb      	ldrb	r3, [r7, #2]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d110      	bne.n	8001d3c <TIMx_OutputCB+0x41c>
			tim->Registers->CCER |= (TIM_CCER_CC2E);//CCXE=0 or 1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a1a      	ldr	r2, [r3, #32]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0210 	orr.w	r2, r2, #16
 8001d28:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC2NE);//CCXNE=if CCXE 0 CCXNE=1, other 0 or 1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d38:	621a      	str	r2, [r3, #32]
}
 8001d3a:	e01e      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==3){
 8001d3c:	78bb      	ldrb	r3, [r7, #2]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d110      	bne.n	8001d64 <TIMx_OutputCB+0x444>
			tim->Registers->CCER |= (TIM_CCER_CC3E);//CCXE=0 or 1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6a1a      	ldr	r2, [r3, #32]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d50:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC3NE);//CCXNE=if CCXE 0 CCXNE=1, other 0 or 1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6a1a      	ldr	r2, [r3, #32]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d60:	621a      	str	r2, [r3, #32]
}
 8001d62:	e00a      	b.n	8001d7a <TIMx_OutputCB+0x45a>
		else if(CN==4){
 8001d64:	78bb      	ldrb	r3, [r7, #2]
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d107      	bne.n	8001d7a <TIMx_OutputCB+0x45a>
			tim->Registers->CCER |= (TIM_CCER_CC4E);//CCXE=0 or 1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6a1a      	ldr	r2, [r3, #32]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d78:	621a      	str	r2, [r3, #32]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <TIMx_OutputCBStandard>:

void TIMx_OutputCBStandard(TIM_HandlerDef *tim, uint8_t OCX, uint8_t CN){
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
 8001d92:	4613      	mov	r3, r2
 8001d94:	70bb      	strb	r3, [r7, #2]
	if(OCX==1){//ONLY OCX EN
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d12f      	bne.n	8001dfc <TIMx_OutputCBStandard+0x76>
		if(CN==1){
 8001d9c:	78bb      	ldrb	r3, [r7, #2]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d108      	bne.n	8001db4 <TIMx_OutputCBStandard+0x2e>
			tim->Registers->CCER |= (TIM_CCER_CC1E);//OUTPUT ENABLED CCXE=1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0201 	orr.w	r2, r2, #1
 8001db0:	621a      	str	r2, [r3, #32]
		else if(CN==4){
			tim->Registers->CCER &= (~TIM_CCER_CC4E);//OUTPUT DISABLED CCXE=0
		}
	}
	//else{}//Disabled OCx and OCxN
}
 8001db2:	e055      	b.n	8001e60 <TIMx_OutputCBStandard+0xda>
		else if(CN==2){
 8001db4:	78bb      	ldrb	r3, [r7, #2]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d108      	bne.n	8001dcc <TIMx_OutputCBStandard+0x46>
			tim->Registers->CCER |= (TIM_CCER_CC2E);//OUTPUT ENABLED CCXE=1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6a1a      	ldr	r2, [r3, #32]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0210 	orr.w	r2, r2, #16
 8001dc8:	621a      	str	r2, [r3, #32]
}
 8001dca:	e049      	b.n	8001e60 <TIMx_OutputCBStandard+0xda>
		else if(CN==3){
 8001dcc:	78bb      	ldrb	r3, [r7, #2]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d108      	bne.n	8001de4 <TIMx_OutputCBStandard+0x5e>
			tim->Registers->CCER |= (TIM_CCER_CC3E);//OUTPUT ENABLED CCXE=1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6a1a      	ldr	r2, [r3, #32]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001de0:	621a      	str	r2, [r3, #32]
}
 8001de2:	e03d      	b.n	8001e60 <TIMx_OutputCBStandard+0xda>
		else if(CN==4){
 8001de4:	78bb      	ldrb	r3, [r7, #2]
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d13a      	bne.n	8001e60 <TIMx_OutputCBStandard+0xda>
			tim->Registers->CCER |= (TIM_CCER_CC4E);//OUTPUT ENABLED CCXE=1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6a1a      	ldr	r2, [r3, #32]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001df8:	621a      	str	r2, [r3, #32]
}
 8001dfa:	e031      	b.n	8001e60 <TIMx_OutputCBStandard+0xda>
	else if(OCX==0){//ONLY OCX DISABLE
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d12e      	bne.n	8001e60 <TIMx_OutputCBStandard+0xda>
		if(CN==1){
 8001e02:	78bb      	ldrb	r3, [r7, #2]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d108      	bne.n	8001e1a <TIMx_OutputCBStandard+0x94>
			tim->Registers->CCER &= (~TIM_CCER_CC1E);//OUTPUT DISABLED CCXE=0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	621a      	str	r2, [r3, #32]
}
 8001e18:	e022      	b.n	8001e60 <TIMx_OutputCBStandard+0xda>
		else if(CN==2){
 8001e1a:	78bb      	ldrb	r3, [r7, #2]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d108      	bne.n	8001e32 <TIMx_OutputCBStandard+0xac>
			tim->Registers->CCER &= (~TIM_CCER_CC2E);//OUTPUT DISABLED CCXE=0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a1a      	ldr	r2, [r3, #32]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0210 	bic.w	r2, r2, #16
 8001e2e:	621a      	str	r2, [r3, #32]
}
 8001e30:	e016      	b.n	8001e60 <TIMx_OutputCBStandard+0xda>
		else if(CN==3){
 8001e32:	78bb      	ldrb	r3, [r7, #2]
 8001e34:	2b03      	cmp	r3, #3
 8001e36:	d108      	bne.n	8001e4a <TIMx_OutputCBStandard+0xc4>
			tim->Registers->CCER &= (~TIM_CCER_CC3E);//OUTPUT DISABLED CCXE=0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6a1a      	ldr	r2, [r3, #32]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e46:	621a      	str	r2, [r3, #32]
}
 8001e48:	e00a      	b.n	8001e60 <TIMx_OutputCBStandard+0xda>
		else if(CN==4){
 8001e4a:	78bb      	ldrb	r3, [r7, #2]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d107      	bne.n	8001e60 <TIMx_OutputCBStandard+0xda>
			tim->Registers->CCER &= (~TIM_CCER_CC4E);//OUTPUT DISABLED CCXE=0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6a1a      	ldr	r2, [r3, #32]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e5e:	621a      	str	r2, [r3, #32]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <TIMx_SetCMMR>:


void TIMx_SetCMMR(TIM_HandlerDef *tim, uint8_t i){
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70fb      	strb	r3, [r7, #3]
	//uint8_t i=0;
	//while(i<4){
	if((tim->Parameter.channel_mode[i])==TIM_MODE_OUTPWM){
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	791b      	ldrb	r3, [r3, #4]
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d168      	bne.n	8001f56 <TIMx_SetCMMR+0xea>
		if(i==0){
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d116      	bne.n	8001eb8 <TIMx_SetCMMR+0x4c>
			tim->Registers->CCMR1 &= (~(0<<TIM_CCMR1_CC1S_Pos));//as Output
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6992      	ldr	r2, [r2, #24]
 8001e94:	619a      	str	r2, [r3, #24]
			tim->Registers->CCMR1 |= (TIM_CCMR1_OC1PE);//Preload Enabled
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0208 	orr.w	r2, r2, #8
 8001ea4:	619a      	str	r2, [r3, #24]
			tim->Registers->CCMR1 |= (6<<TIM_CCMR1_OC1M_Pos);//Mode OpPWM1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	699a      	ldr	r2, [r3, #24]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001eb4:	619a      	str	r2, [r3, #24]

	}
	//i++;
	//}

}
 8001eb6:	e0bb      	b.n	8002030 <TIMx_SetCMMR+0x1c4>
		else if(i==1){
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d116      	bne.n	8001eec <TIMx_SetCMMR+0x80>
			tim->Registers->CCMR1 &= (~(0<<TIM_CCMR1_CC2S_Pos));//as Output
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6992      	ldr	r2, [r2, #24]
 8001ec8:	619a      	str	r2, [r3, #24]
			tim->Registers->CCMR1 |= (TIM_CCMR1_OC2PE);//Preload Enabled
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed8:	619a      	str	r2, [r3, #24]
			tim->Registers->CCMR1 |= (6<<TIM_CCMR1_OC2M_Pos);//Mode OpPWM1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699a      	ldr	r2, [r3, #24]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001ee8:	619a      	str	r2, [r3, #24]
}
 8001eea:	e0a1      	b.n	8002030 <TIMx_SetCMMR+0x1c4>
		else if(i==2){
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d116      	bne.n	8001f20 <TIMx_SetCMMR+0xb4>
			tim->Registers->CCMR2 &= (~(0<<TIM_CCMR2_CC3S_Pos));//as Output
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69d2      	ldr	r2, [r2, #28]
 8001efc:	61da      	str	r2, [r3, #28]
			tim->Registers->CCMR2 |= (TIM_CCMR2_OC3PE);//Preload Enabled
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0208 	orr.w	r2, r2, #8
 8001f0c:	61da      	str	r2, [r3, #28]
			tim->Registers->CCMR2 |= (6<<TIM_CCMR2_OC3M_Pos);//Mode OpPWM1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69da      	ldr	r2, [r3, #28]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001f1c:	61da      	str	r2, [r3, #28]
}
 8001f1e:	e087      	b.n	8002030 <TIMx_SetCMMR+0x1c4>
		else if(i==3){
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	f040 8084 	bne.w	8002030 <TIMx_SetCMMR+0x1c4>
			tim->Registers->CCMR2 &= (~(0<<TIM_CCMR2_CC4S_Pos));//as Output
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69d2      	ldr	r2, [r2, #28]
 8001f32:	61da      	str	r2, [r3, #28]
			tim->Registers->CCMR2 |= (TIM_CCMR2_OC4PE);//Preload Enabled
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f42:	61da      	str	r2, [r3, #28]
			tim->Registers->CCMR2 |= (6<<TIM_CCMR2_OC4M_Pos);//Mode OpPWM1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001f52:	61da      	str	r2, [r3, #28]
}
 8001f54:	e06c      	b.n	8002030 <TIMx_SetCMMR+0x1c4>
	else if((tim->Parameter.channel_mode[i])==TIM_MODE_OUTOP){
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	791b      	ldrb	r3, [r3, #4]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d166      	bne.n	8002030 <TIMx_SetCMMR+0x1c4>
		if(i==0){
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d116      	bne.n	8001f96 <TIMx_SetCMMR+0x12a>
			tim->Registers->CCMR1 &= (~(0<<TIM_CCMR1_CC1S_Pos));//as Output
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6992      	ldr	r2, [r2, #24]
 8001f72:	619a      	str	r2, [r3, #24]
			tim->Registers->CCMR1 |= (TIM_CCMR1_OC1PE);//Preload Enabled
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0208 	orr.w	r2, r2, #8
 8001f82:	619a      	str	r2, [r3, #24]
			tim->Registers->CCMR1 |= (7<<TIM_CCMR1_OC1M_Pos);//Mode PWM 2 for a pulse 0 to 1 and 1 to 0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8001f92:	619a      	str	r2, [r3, #24]
}
 8001f94:	e04c      	b.n	8002030 <TIMx_SetCMMR+0x1c4>
		else if(i==1){
 8001f96:	78fb      	ldrb	r3, [r7, #3]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d116      	bne.n	8001fca <TIMx_SetCMMR+0x15e>
			tim->Registers->CCMR1 &= (~(0<<TIM_CCMR1_CC2S_Pos));//as Output
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6992      	ldr	r2, [r2, #24]
 8001fa6:	619a      	str	r2, [r3, #24]
			tim->Registers->CCMR1 |= (TIM_CCMR1_OC2PE);//Preload Enabled
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699a      	ldr	r2, [r3, #24]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb6:	619a      	str	r2, [r3, #24]
			tim->Registers->CCMR1 |= (7<<TIM_CCMR1_OC2M_Pos);//Mode PWM 2 for a pulse 0 to 1 and 1 to 0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8001fc6:	619a      	str	r2, [r3, #24]
}
 8001fc8:	e032      	b.n	8002030 <TIMx_SetCMMR+0x1c4>
		else if(i==2){
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d116      	bne.n	8001ffe <TIMx_SetCMMR+0x192>
			tim->Registers->CCMR2 &= (~(0<<TIM_CCMR2_CC3S_Pos));//as Output
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69d2      	ldr	r2, [r2, #28]
 8001fda:	61da      	str	r2, [r3, #28]
			tim->Registers->CCMR2 |= (TIM_CCMR2_OC3PE);//Preload Enabled
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0208 	orr.w	r2, r2, #8
 8001fea:	61da      	str	r2, [r3, #28]
			tim->Registers->CCMR2 |= (7<<TIM_CCMR2_OC3M_Pos);//Mode PWM 2 for a pulse 0 to 1 and 1 to 0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8001ffa:	61da      	str	r2, [r3, #28]
}
 8001ffc:	e018      	b.n	8002030 <TIMx_SetCMMR+0x1c4>
		else if(i==3){
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d115      	bne.n	8002030 <TIMx_SetCMMR+0x1c4>
			tim->Registers->CCMR2 &= (~(0<<TIM_CCMR2_CC4S_Pos));//as Output
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69d2      	ldr	r2, [r2, #28]
 800200e:	61da      	str	r2, [r3, #28]
			tim->Registers->CCMR2 |= (TIM_CCMR2_OC4PE);//Preload Enabled
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69da      	ldr	r2, [r3, #28]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800201e:	61da      	str	r2, [r3, #28]
			tim->Registers->CCMR2 |= (7<<TIM_CCMR2_OC4M_Pos);//Mode PWM 2 for a pulse 0 to 1 and 1 to 0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800202e:	61da      	str	r2, [r3, #28]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <TIMx_SetPolarity>:
//0 OCx Lox; 1 OCxN Low; 2 both Low
//3 OCx High; 4OCxN High; 5 both high
void TIMx_SetPolarity(TIM_HandlerDef *tim, TIM_ChannelCFG *chcfg, uint8_t i){
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	4613      	mov	r3, r2
 8002048:	71fb      	strb	r3, [r7, #7]
	//uint8_t i=0;
	//while(i<4){
	if(chcfg[i].CCxP==0){
 800204a:	79fa      	ldrb	r2, [r7, #7]
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	4413      	add	r3, r2
 800205a:	785b      	ldrb	r3, [r3, #1]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d130      	bne.n	80020c2 <TIMx_SetPolarity+0x86>
		if(i==0){
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d108      	bne.n	8002078 <TIMx_SetPolarity+0x3c>
			tim->Registers->CCER |= (TIM_CCER_CC1P);//PLOARITY LOW
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6a1a      	ldr	r2, [r3, #32]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0202 	orr.w	r2, r2, #2
 8002074:	621a      	str	r2, [r3, #32]
		}
	}
	//else{}
	//i++;
	//}
}
 8002076:	e18d      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==1){
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d108      	bne.n	8002090 <TIMx_SetPolarity+0x54>
			tim->Registers->CCER |= (TIM_CCER_CC2P);//PLOARITY LOW
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0220 	orr.w	r2, r2, #32
 800208c:	621a      	str	r2, [r3, #32]
}
 800208e:	e181      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==2){
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d108      	bne.n	80020a8 <TIMx_SetPolarity+0x6c>
			tim->Registers->CCER |= (TIM_CCER_CC3P);//PLOARITY LOW
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6a1a      	ldr	r2, [r3, #32]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a4:	621a      	str	r2, [r3, #32]
}
 80020a6:	e175      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==3){
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	f040 8172 	bne.w	8002394 <TIMx_SetPolarity+0x358>
			tim->Registers->CCER |= (TIM_CCER_CC4P);//PLOARITY LOW
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6a1a      	ldr	r2, [r3, #32]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020be:	621a      	str	r2, [r3, #32]
}
 80020c0:	e168      	b.n	8002394 <TIMx_SetPolarity+0x358>
	else if(chcfg[i].CCxP==1){
 80020c2:	79fa      	ldrb	r2, [r7, #7]
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	461a      	mov	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4413      	add	r3, r2
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d130      	bne.n	800213a <TIMx_SetPolarity+0xfe>
		if(i==0){
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d108      	bne.n	80020f0 <TIMx_SetPolarity+0xb4>
			tim->Registers->CCER |= (TIM_CCER_CC1NP);//PLOARITY LOW OF COMPLEMENTARY OUT
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6a1a      	ldr	r2, [r3, #32]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0208 	orr.w	r2, r2, #8
 80020ec:	621a      	str	r2, [r3, #32]
}
 80020ee:	e151      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==1){
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d108      	bne.n	8002108 <TIMx_SetPolarity+0xcc>
			tim->Registers->CCER |= (TIM_CCER_CC2NP);//PLOARITY LOW OF COMPLEMENTARY OUT
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a1a      	ldr	r2, [r3, #32]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002104:	621a      	str	r2, [r3, #32]
}
 8002106:	e145      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==2){
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d108      	bne.n	8002120 <TIMx_SetPolarity+0xe4>
			tim->Registers->CCER |= (TIM_CCER_CC3NP);//PLOARITY LOW OF COMPLEMENTARY OUT
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800211c:	621a      	str	r2, [r3, #32]
}
 800211e:	e139      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==3){
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	2b03      	cmp	r3, #3
 8002124:	f040 8136 	bne.w	8002394 <TIMx_SetPolarity+0x358>
			tim->Registers->CCER |= (TIM_CCER_CC4NP);//PLOARITY LOW OF COMPLEMENTARY OUT
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6a1a      	ldr	r2, [r3, #32]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002136:	621a      	str	r2, [r3, #32]
}
 8002138:	e12c      	b.n	8002394 <TIMx_SetPolarity+0x358>
	else if(chcfg[i].CCxP==2){
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4413      	add	r3, r2
 800214a:	785b      	ldrb	r3, [r3, #1]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d150      	bne.n	80021f2 <TIMx_SetPolarity+0x1b6>
		if(i==0){
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d110      	bne.n	8002178 <TIMx_SetPolarity+0x13c>
			tim->Registers->CCER |= (TIM_CCER_CC1P);//PLOARITY LOW
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0202 	orr.w	r2, r2, #2
 8002164:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC1NP);//PLOARITY LOW OF COMPLEMENTARY OUT
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6a1a      	ldr	r2, [r3, #32]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0208 	orr.w	r2, r2, #8
 8002174:	621a      	str	r2, [r3, #32]
}
 8002176:	e10d      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==1){
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d110      	bne.n	80021a0 <TIMx_SetPolarity+0x164>
			tim->Registers->CCER |= (TIM_CCER_CC2P);//PLOARITY LOW
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6a1a      	ldr	r2, [r3, #32]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0220 	orr.w	r2, r2, #32
 800218c:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC2NP);//PLOARITY LOW OF COMPLEMENTARY OUT
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6a1a      	ldr	r2, [r3, #32]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800219c:	621a      	str	r2, [r3, #32]
}
 800219e:	e0f9      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==2){
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d110      	bne.n	80021c8 <TIMx_SetPolarity+0x18c>
			tim->Registers->CCER |= (TIM_CCER_CC3P);//PLOARITY LOW
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6a1a      	ldr	r2, [r3, #32]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b4:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC3NP);//PLOARITY LOW OF COMPLEMENTARY OUT
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6a1a      	ldr	r2, [r3, #32]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c4:	621a      	str	r2, [r3, #32]
}
 80021c6:	e0e5      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==3){
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	f040 80e2 	bne.w	8002394 <TIMx_SetPolarity+0x358>
			tim->Registers->CCER |= (TIM_CCER_CC4P);//PLOARITY LOW
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6a1a      	ldr	r2, [r3, #32]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021de:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER |= (TIM_CCER_CC4NP);//PLOARITY LOW OF COMPLEMENTARY OUT
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a1a      	ldr	r2, [r3, #32]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ee:	621a      	str	r2, [r3, #32]
}
 80021f0:	e0d0      	b.n	8002394 <TIMx_SetPolarity+0x358>
	else if(chcfg[i].CCxP==3){
 80021f2:	79fa      	ldrb	r2, [r7, #7]
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4413      	add	r3, r2
 8002202:	785b      	ldrb	r3, [r3, #1]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d130      	bne.n	800226a <TIMx_SetPolarity+0x22e>
		if(i==0){
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d108      	bne.n	8002220 <TIMx_SetPolarity+0x1e4>
			tim->Registers->CCER &= (~TIM_CCER_CC1P);//PLOARITY HIGH
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0202 	bic.w	r2, r2, #2
 800221c:	621a      	str	r2, [r3, #32]
}
 800221e:	e0b9      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==1){
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d108      	bne.n	8002238 <TIMx_SetPolarity+0x1fc>
			tim->Registers->CCER &= (~TIM_CCER_CC2P);//PLOARITY HIGH
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a1a      	ldr	r2, [r3, #32]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0220 	bic.w	r2, r2, #32
 8002234:	621a      	str	r2, [r3, #32]
}
 8002236:	e0ad      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==2){
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d108      	bne.n	8002250 <TIMx_SetPolarity+0x214>
			tim->Registers->CCER &= (~TIM_CCER_CC3P);//PLOARITY HIGH
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a1a      	ldr	r2, [r3, #32]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800224c:	621a      	str	r2, [r3, #32]
}
 800224e:	e0a1      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==3){
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b03      	cmp	r3, #3
 8002254:	f040 809e 	bne.w	8002394 <TIMx_SetPolarity+0x358>
			tim->Registers->CCER &= (~TIM_CCER_CC4P);//PLOARITY HIGH
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002266:	621a      	str	r2, [r3, #32]
}
 8002268:	e094      	b.n	8002394 <TIMx_SetPolarity+0x358>
	else if(chcfg[i].CCxP==4){
 800226a:	79fa      	ldrb	r2, [r7, #7]
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	461a      	mov	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4413      	add	r3, r2
 800227a:	785b      	ldrb	r3, [r3, #1]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d12f      	bne.n	80022e0 <TIMx_SetPolarity+0x2a4>
		if(i==0){
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d108      	bne.n	8002298 <TIMx_SetPolarity+0x25c>
			tim->Registers->CCER &= (~TIM_CCER_CC1NP);//PLOARITY HIGH OF COMPLEMENTARY OUT
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6a1a      	ldr	r2, [r3, #32]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0208 	bic.w	r2, r2, #8
 8002294:	621a      	str	r2, [r3, #32]
}
 8002296:	e07d      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==1){
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d108      	bne.n	80022b0 <TIMx_SetPolarity+0x274>
			tim->Registers->CCER &= (~TIM_CCER_CC2NP);//PLOARITY HIGH OF COMPLEMENTARY OUT
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ac:	621a      	str	r2, [r3, #32]
}
 80022ae:	e071      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==2){
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d108      	bne.n	80022c8 <TIMx_SetPolarity+0x28c>
			tim->Registers->CCER &= (~TIM_CCER_CC3NP);//PLOARITY HIGH OF COMPLEMENTARY OUT
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c4:	621a      	str	r2, [r3, #32]
}
 80022c6:	e065      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==3){
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d162      	bne.n	8002394 <TIMx_SetPolarity+0x358>
			tim->Registers->CCER &= (~TIM_CCER_CC4NP);//PLOARITY HIGH OF COMPLEMENTARY OUT
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022dc:	621a      	str	r2, [r3, #32]
}
 80022de:	e059      	b.n	8002394 <TIMx_SetPolarity+0x358>
	else if(chcfg[i].CCxP==5){
 80022e0:	79fa      	ldrb	r2, [r7, #7]
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	461a      	mov	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4413      	add	r3, r2
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	2b05      	cmp	r3, #5
 80022f4:	d14e      	bne.n	8002394 <TIMx_SetPolarity+0x358>
		if(i==0){
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d110      	bne.n	800231e <TIMx_SetPolarity+0x2e2>
			tim->Registers->CCER &= (~TIM_CCER_CC1P);//PLOARITY HIGH
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 0202 	bic.w	r2, r2, #2
 800230a:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER &= (~TIM_CCER_CC1NP);//PLOARITY HIGH OF COMPLEMENTARY OUT
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6a1a      	ldr	r2, [r3, #32]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0208 	bic.w	r2, r2, #8
 800231a:	621a      	str	r2, [r3, #32]
}
 800231c:	e03a      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==1){
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d110      	bne.n	8002346 <TIMx_SetPolarity+0x30a>
			tim->Registers->CCER &= (~TIM_CCER_CC2P);//PLOARITY HIGH
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6a1a      	ldr	r2, [r3, #32]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0220 	bic.w	r2, r2, #32
 8002332:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER &= (~TIM_CCER_CC2NP);//PLOARITY HIGH OF COMPLEMENTARY OUT
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a1a      	ldr	r2, [r3, #32]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002342:	621a      	str	r2, [r3, #32]
}
 8002344:	e026      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==2){
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d110      	bne.n	800236e <TIMx_SetPolarity+0x332>
			tim->Registers->CCER &= (~TIM_CCER_CC3P);//PLOARITY HIGH
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6a1a      	ldr	r2, [r3, #32]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800235a:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER &= (~TIM_CCER_CC3NP);//PLOARITY HIGH OF COMPLEMENTARY OUT
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6a1a      	ldr	r2, [r3, #32]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236a:	621a      	str	r2, [r3, #32]
}
 800236c:	e012      	b.n	8002394 <TIMx_SetPolarity+0x358>
		else if(i==3){
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d10f      	bne.n	8002394 <TIMx_SetPolarity+0x358>
			tim->Registers->CCER &= (~TIM_CCER_CC4P);//PLOARITY HIGH
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6a1a      	ldr	r2, [r3, #32]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002382:	621a      	str	r2, [r3, #32]
			tim->Registers->CCER &= (~TIM_CCER_CC4NP);//PLOARITY HIGH OF COMPLEMENTARY OUT
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a1a      	ldr	r2, [r3, #32]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002392:	621a      	str	r2, [r3, #32]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <TIMx_SetPolarityDetection>:

void TIMx_SetPolarityDetection(TIM_HandlerDef *tim, TIM_ChannelCFG *chcfg, uint8_t i){
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	4613      	mov	r3, r2
 80023ac:	71fb      	strb	r3, [r7, #7]
	if(chcfg[i].CCxP==TIM_CCxP_ICx_FALLING){
 80023ae:	79fa      	ldrb	r2, [r7, #7]
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	461a      	mov	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	4413      	add	r3, r2
 80023be:	785b      	ldrb	r3, [r3, #1]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d108      	bne.n	80023d6 <TIMx_SetPolarityDetection+0x36>
		tim->Registers->CCER |= TIM_CCER_CC1P;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6a1a      	ldr	r2, [r3, #32]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 0202 	orr.w	r2, r2, #2
 80023d2:	621a      	str	r2, [r3, #32]
		tim->Registers->CCER |= (3<<TIM_CCER_CC1P_Pos);
	}
	else{
		tim->Registers->CCER &= ~(3<<TIM_CCER_CC1P_Pos);
	}
}
 80023d4:	e01b      	b.n	800240e <TIMx_SetPolarityDetection+0x6e>
	else if(chcfg[i].CCxP==TIM_CCxP_ICx_BOTHEDGES){
 80023d6:	79fa      	ldrb	r2, [r7, #7]
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4413      	add	r3, r2
 80023e6:	785b      	ldrb	r3, [r3, #1]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d108      	bne.n	80023fe <TIMx_SetPolarityDetection+0x5e>
		tim->Registers->CCER |= (3<<TIM_CCER_CC1P_Pos);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a1a      	ldr	r2, [r3, #32]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0206 	orr.w	r2, r2, #6
 80023fa:	621a      	str	r2, [r3, #32]
}
 80023fc:	e007      	b.n	800240e <TIMx_SetPolarityDetection+0x6e>
		tim->Registers->CCER &= ~(3<<TIM_CCER_CC1P_Pos);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0206 	bic.w	r2, r2, #6
 800240c:	621a      	str	r2, [r3, #32]
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <TIMx_SetMMS>:

//Master Mode Selection
void TIMx_SetMMS(TIM_HandlerDef *tim, uint8_t mms){
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	70fb      	strb	r3, [r7, #3]
	tim->Registers->CR2 |= (mms<<(TIM_CR2_MMS_Pos));//
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4619      	mov	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	605a      	str	r2, [r3, #4]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <TIMx_SetSMS>:
//Slave Mode Selection
void TIMx_SetSMS(TIM_HandlerDef *tim, uint8_t sms){
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	70fb      	strb	r3, [r7, #3]
	tim->Registers->SMCR |= (sms<<(TIM_SMCR_SMS_Pos));//
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	609a      	str	r2, [r3, #8]
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <TIMx_SetTS>:

//Trigger Selection
void TIMx_SetTS(TIM_HandlerDef *tim, uint8_t ts){
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
	tim->Registers->SMCR |= (ts<<(TIM_SMCR_TS_Pos));//
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4619      	mov	r1, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	609a      	str	r2, [r3, #8]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <TIMx_SetDir>:

void TIMx_SetDir(TIM_HandlerDef *tim, uint8_t up_dw){
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	70fb      	strb	r3, [r7, #3]
	if(up_dw){//downcounter
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <TIMx_SetDir+0x24>
		tim->Registers->CR1 |= (TIM_CR1_DIR);//Down
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0210 	orr.w	r2, r2, #16
 80024ba:	601a      	str	r2, [r3, #0]
	}
	else{//upcounter
		tim->Registers->CR1 &= (~(0<<TIM_CR1_DIR_Pos));//Up
	}
}
 80024bc:	e005      	b.n	80024ca <TIMx_SetDir+0x30>
		tim->Registers->CR1 &= (~(0<<TIM_CR1_DIR_Pos));//Up
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	601a      	str	r2, [r3, #0]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <TIMx_SetCMS>:

void TIMx_SetCMS(TIM_HandlerDef *tim, uint8_t cms){
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	70fb      	strb	r3, [r7, #3]
	if(cms==0){//Edge aligned
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <TIMx_SetCMS+0x20>
		tim->Registers->CR1 &= (~(0<<TIM_CR1_CMS_Pos));//Edge aligned
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	601a      	str	r2, [r3, #0]
	}
	else if(cms==3){//Center aligned mode 3
		tim->Registers->CR1 |= (3<<TIM_CR1_CMS_Pos);//
	}

}
 80024f4:	e022      	b.n	800253c <TIMx_SetCMS+0x66>
	else if(cms==1){//Center aligned mode 1
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d108      	bne.n	800250e <TIMx_SetCMS+0x38>
		tim->Registers->CR1 |= (TIM_CR1_CMS_0);//
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0220 	orr.w	r2, r2, #32
 800250a:	601a      	str	r2, [r3, #0]
}
 800250c:	e016      	b.n	800253c <TIMx_SetCMS+0x66>
	else if(cms==2){//Center aligned mode 2
 800250e:	78fb      	ldrb	r3, [r7, #3]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d108      	bne.n	8002526 <TIMx_SetCMS+0x50>
		tim->Registers->CR1 |= (TIM_CR1_CMS_1);//
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	e00a      	b.n	800253c <TIMx_SetCMS+0x66>
	else if(cms==3){//Center aligned mode 3
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d107      	bne.n	800253c <TIMx_SetCMS+0x66>
		tim->Registers->CR1 |= (3<<TIM_CR1_CMS_Pos);//
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800253a:	601a      	str	r2, [r3, #0]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <TIMx_SetUG>:
//Update generation
void TIMx_SetUG(TIM_HandlerDef *tim){
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	tim->Registers->EGR |= (TIM_EGR_UG);//Update generation, restart counter and prescaler counter reinitialize
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	615a      	str	r2, [r3, #20]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <TIMx_EnableCEN>:
	return flag;
}

//SET IDLE STATE

void TIMx_EnableCEN(TIM_HandlerDef *tim){
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	tim -> Registers -> CR1 |= TIM_CR1_CEN;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <TIMx_DisableCEN>:

void TIMx_DisableCEN(TIM_HandlerDef *tim){
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	tim -> Registers -> CR1 &= ~TIM_CR1_CEN;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <TIMx_EnableARPE>:

void TIMx_EnableARPE(TIM_HandlerDef *tim){
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	tim->Registers->CR1 |= TIM_CR1_ARPE;//Auto-reload preload enabled
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ca:	601a      	str	r2, [r3, #0]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <Timx_EnableInt>:
void TIMx_DisableOPM(TIM_HandlerDef *tim){
	tim->Registers->CR1 &= ~TIM_CR1_OPM;
}

//Interruptions
void Timx_EnableInt(TIM_HandlerDef *tim, uint16_t interrupt){
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
	tim->Registers->DIER = interrupt & 0xFF;
 80025e4:	887a      	ldrh	r2, [r7, #2]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	60da      	str	r2, [r3, #12]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <RCC_EnTimx>:
void Timx_DisableInt(TIM_HandlerDef *tim, uint16_t interrupt){
	tim->Registers->DIER &= (~(interrupt&0xFF)) ;
}


void RCC_EnTimx(TIM_HandlerDef *tim){
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	if(tim->Registers==TIM1){
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a55      	ldr	r2, [pc, #340]	; (8002760 <RCC_EnTimx+0x164>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d106      	bne.n	800261c <RCC_EnTimx+0x20>
		RCC_APB2ENR |= (RCC_APB2ENR_TIM1EN) ;//Habilitar Fuente de reloj antes de configurar
 800260e:	4b55      	ldr	r3, [pc, #340]	; (8002764 <RCC_EnTimx+0x168>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a54      	ldr	r2, [pc, #336]	; (8002764 <RCC_EnTimx+0x168>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6013      	str	r3, [r2, #0]
	}
	else if(tim->Registers==TIM14){
		RCC_APB1ENR |= (RCC_APB1ENR_TIM14EN);//Habilitar Fuente de reloj antes de configurar
	}

}
 800261a:	e09a      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM2){
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002624:	d106      	bne.n	8002634 <RCC_EnTimx+0x38>
		RCC_APB1ENR |= (RCC_APB1ENR_TIM2EN);//Habilitar Fuente de reloj antes de configurar
 8002626:	4b50      	ldr	r3, [pc, #320]	; (8002768 <RCC_EnTimx+0x16c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a4f      	ldr	r2, [pc, #316]	; (8002768 <RCC_EnTimx+0x16c>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6013      	str	r3, [r2, #0]
}
 8002632:	e08e      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM3){
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a4c      	ldr	r2, [pc, #304]	; (800276c <RCC_EnTimx+0x170>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d106      	bne.n	800264c <RCC_EnTimx+0x50>
		RCC_APB1ENR |= (RCC_APB1ENR_TIM3EN);//Habilitar Fuente de reloj antes de configurar
 800263e:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <RCC_EnTimx+0x16c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a49      	ldr	r2, [pc, #292]	; (8002768 <RCC_EnTimx+0x16c>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	6013      	str	r3, [r2, #0]
}
 800264a:	e082      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM4){
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a47      	ldr	r2, [pc, #284]	; (8002770 <RCC_EnTimx+0x174>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d106      	bne.n	8002664 <RCC_EnTimx+0x68>
		RCC_APB1ENR |= (RCC_APB1ENR_TIM4EN);//Habilitar Fuente de reloj antes de configurar
 8002656:	4b44      	ldr	r3, [pc, #272]	; (8002768 <RCC_EnTimx+0x16c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a43      	ldr	r2, [pc, #268]	; (8002768 <RCC_EnTimx+0x16c>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6013      	str	r3, [r2, #0]
}
 8002662:	e076      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM5){
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a42      	ldr	r2, [pc, #264]	; (8002774 <RCC_EnTimx+0x178>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d106      	bne.n	800267c <RCC_EnTimx+0x80>
		RCC_APB1ENR |= (RCC_APB1ENR_TIM5EN);//Habilitar Fuente de reloj antes de configurar
 800266e:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <RCC_EnTimx+0x16c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a3d      	ldr	r2, [pc, #244]	; (8002768 <RCC_EnTimx+0x16c>)
 8002674:	f043 0308 	orr.w	r3, r3, #8
 8002678:	6013      	str	r3, [r2, #0]
}
 800267a:	e06a      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM6){
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a3d      	ldr	r2, [pc, #244]	; (8002778 <RCC_EnTimx+0x17c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d106      	bne.n	8002694 <RCC_EnTimx+0x98>
		RCC_APB1ENR |= (RCC_APB1ENR_TIM6EN);//Habilitar Fuente de reloj antes de configurar
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <RCC_EnTimx+0x16c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a37      	ldr	r2, [pc, #220]	; (8002768 <RCC_EnTimx+0x16c>)
 800268c:	f043 0310 	orr.w	r3, r3, #16
 8002690:	6013      	str	r3, [r2, #0]
}
 8002692:	e05e      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM7){
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a38      	ldr	r2, [pc, #224]	; (800277c <RCC_EnTimx+0x180>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d106      	bne.n	80026ac <RCC_EnTimx+0xb0>
		RCC_APB1ENR |= (RCC_APB1ENR_TIM7EN);//Habilitar Fuente de reloj antes de configurar
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <RCC_EnTimx+0x16c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a31      	ldr	r2, [pc, #196]	; (8002768 <RCC_EnTimx+0x16c>)
 80026a4:	f043 0320 	orr.w	r3, r3, #32
 80026a8:	6013      	str	r3, [r2, #0]
}
 80026aa:	e052      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM8){
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a33      	ldr	r2, [pc, #204]	; (8002780 <RCC_EnTimx+0x184>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d106      	bne.n	80026c4 <RCC_EnTimx+0xc8>
		RCC_APB2ENR |= (RCC_APB2ENR_TIM8EN);//Habilitar Fuente de reloj antes de configurar
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <RCC_EnTimx+0x168>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2a      	ldr	r2, [pc, #168]	; (8002764 <RCC_EnTimx+0x168>)
 80026bc:	f043 0302 	orr.w	r3, r3, #2
 80026c0:	6013      	str	r3, [r2, #0]
}
 80026c2:	e046      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM9){
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2e      	ldr	r2, [pc, #184]	; (8002784 <RCC_EnTimx+0x188>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d106      	bne.n	80026dc <RCC_EnTimx+0xe0>
		RCC_APB2ENR |= (RCC_APB2ENR_TIM9EN);//Habilitar Fuente de reloj antes de configurar
 80026ce:	4b25      	ldr	r3, [pc, #148]	; (8002764 <RCC_EnTimx+0x168>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a24      	ldr	r2, [pc, #144]	; (8002764 <RCC_EnTimx+0x168>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
}
 80026da:	e03a      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM10){
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a29      	ldr	r2, [pc, #164]	; (8002788 <RCC_EnTimx+0x18c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d106      	bne.n	80026f4 <RCC_EnTimx+0xf8>
		RCC_APB2ENR |= (RCC_APB2ENR_TIM10EN);//Habilitar Fuente de reloj antes de configurar
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <RCC_EnTimx+0x168>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1e      	ldr	r2, [pc, #120]	; (8002764 <RCC_EnTimx+0x168>)
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	e02e      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM11){
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a24      	ldr	r2, [pc, #144]	; (800278c <RCC_EnTimx+0x190>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d106      	bne.n	800270c <RCC_EnTimx+0x110>
		RCC_APB2ENR |= (RCC_APB2ENR_TIM11EN);//Habilitar Fuente de reloj antes de configurar
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <RCC_EnTimx+0x168>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a18      	ldr	r2, [pc, #96]	; (8002764 <RCC_EnTimx+0x168>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
}
 800270a:	e022      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM12){
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <RCC_EnTimx+0x194>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d106      	bne.n	8002724 <RCC_EnTimx+0x128>
		RCC_APB1ENR |= (RCC_APB1ENR_TIM12EN);//Habilitar Fuente de reloj antes de configurar
 8002716:	4b14      	ldr	r3, [pc, #80]	; (8002768 <RCC_EnTimx+0x16c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <RCC_EnTimx+0x16c>)
 800271c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002720:	6013      	str	r3, [r2, #0]
}
 8002722:	e016      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM13){
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <RCC_EnTimx+0x198>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d106      	bne.n	800273c <RCC_EnTimx+0x140>
		RCC_APB1ENR |= (RCC_APB1ENR_TIM13EN);//Habilitar Fuente de reloj antes de configurar
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <RCC_EnTimx+0x16c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <RCC_EnTimx+0x16c>)
 8002734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	e00a      	b.n	8002752 <RCC_EnTimx+0x156>
	else if(tim->Registers==TIM14){
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a15      	ldr	r2, [pc, #84]	; (8002798 <RCC_EnTimx+0x19c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d105      	bne.n	8002752 <RCC_EnTimx+0x156>
		RCC_APB1ENR |= (RCC_APB1ENR_TIM14EN);//Habilitar Fuente de reloj antes de configurar
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <RCC_EnTimx+0x16c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a07      	ldr	r2, [pc, #28]	; (8002768 <RCC_EnTimx+0x16c>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40010000 	.word	0x40010000
 8002764:	40023844 	.word	0x40023844
 8002768:	40023840 	.word	0x40023840
 800276c:	40000400 	.word	0x40000400
 8002770:	40000800 	.word	0x40000800
 8002774:	40000c00 	.word	0x40000c00
 8002778:	40001000 	.word	0x40001000
 800277c:	40001400 	.word	0x40001400
 8002780:	40010400 	.word	0x40010400
 8002784:	40014000 	.word	0x40014000
 8002788:	40014400 	.word	0x40014400
 800278c:	40014800 	.word	0x40014800
 8002790:	40001800 	.word	0x40001800
 8002794:	40001c00 	.word	0x40001c00
 8002798:	40002000 	.word	0x40002000

0800279c <TIMx_VerifyFunctionalities>:

uint8_t TIMx_VerifyFunctionalities(TIM_HandlerDef *tim){
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	uint8_t timertype=0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]
	if((tim->Registers==TIM1)||(tim->Registers==TIM8)){
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a2c      	ldr	r2, [pc, #176]	; (8002860 <TIMx_VerifyFunctionalities+0xc4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <TIMx_VerifyFunctionalities+0x20>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2b      	ldr	r2, [pc, #172]	; (8002864 <TIMx_VerifyFunctionalities+0xc8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d102      	bne.n	80027c2 <TIMx_VerifyFunctionalities+0x26>
		timertype=TIM_TYPE_ADVANCED;//Advanced
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e046      	b.n	8002850 <TIMx_VerifyFunctionalities+0xb4>
	}
	else if((tim->Registers==TIM2)||(tim->Registers==TIM3)||(tim->Registers==TIM4)||(tim->Registers==TIM5)){
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d00e      	beq.n	80027ea <TIMx_VerifyFunctionalities+0x4e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <TIMx_VerifyFunctionalities+0xcc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d009      	beq.n	80027ea <TIMx_VerifyFunctionalities+0x4e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a24      	ldr	r2, [pc, #144]	; (800286c <TIMx_VerifyFunctionalities+0xd0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d004      	beq.n	80027ea <TIMx_VerifyFunctionalities+0x4e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a22      	ldr	r2, [pc, #136]	; (8002870 <TIMx_VerifyFunctionalities+0xd4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d102      	bne.n	80027f0 <TIMx_VerifyFunctionalities+0x54>
		timertype=TIM_TYPE_GP_4CH;//General Purpose: 4 channels, not complementary
 80027ea:	2302      	movs	r3, #2
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	e02f      	b.n	8002850 <TIMx_VerifyFunctionalities+0xb4>
	}
	else if((tim->Registers==TIM9)||(tim->Registers==TIM12)){
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <TIMx_VerifyFunctionalities+0xd8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d004      	beq.n	8002804 <TIMx_VerifyFunctionalities+0x68>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1e      	ldr	r2, [pc, #120]	; (8002878 <TIMx_VerifyFunctionalities+0xdc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d102      	bne.n	800280a <TIMx_VerifyFunctionalities+0x6e>
		timertype=TIM_TYPE_GP_2CH;//General Purpose: 2 channels, not complementary
 8002804:	2303      	movs	r3, #3
 8002806:	73fb      	strb	r3, [r7, #15]
 8002808:	e022      	b.n	8002850 <TIMx_VerifyFunctionalities+0xb4>
	}
	else if((tim->Registers==TIM10)||(tim->Registers==TIM11)||(tim->Registers==TIM13)||(tim->Registers==TIM14)){
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1b      	ldr	r2, [pc, #108]	; (800287c <TIMx_VerifyFunctionalities+0xe0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d00e      	beq.n	8002832 <TIMx_VerifyFunctionalities+0x96>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a19      	ldr	r2, [pc, #100]	; (8002880 <TIMx_VerifyFunctionalities+0xe4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d009      	beq.n	8002832 <TIMx_VerifyFunctionalities+0x96>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <TIMx_VerifyFunctionalities+0xe8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d004      	beq.n	8002832 <TIMx_VerifyFunctionalities+0x96>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a16      	ldr	r2, [pc, #88]	; (8002888 <TIMx_VerifyFunctionalities+0xec>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d102      	bne.n	8002838 <TIMx_VerifyFunctionalities+0x9c>
		timertype=TIM_TYPE_GP_1CH;//General Purpose: 1 channel, not complementary
 8002832:	2304      	movs	r3, #4
 8002834:	73fb      	strb	r3, [r7, #15]
 8002836:	e00b      	b.n	8002850 <TIMx_VerifyFunctionalities+0xb4>
	}
	else if((tim->Registers==TIM6)||(tim->Registers==TIM7)){
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a13      	ldr	r2, [pc, #76]	; (800288c <TIMx_VerifyFunctionalities+0xf0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <TIMx_VerifyFunctionalities+0xb0>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a12      	ldr	r2, [pc, #72]	; (8002890 <TIMx_VerifyFunctionalities+0xf4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <TIMx_VerifyFunctionalities+0xb4>
		timertype=TIM_TYPE_BASIC;//Basic Timer, not channels
 800284c:	2305      	movs	r3, #5
 800284e:	73fb      	strb	r3, [r7, #15]
	}
	return timertype;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40010000 	.word	0x40010000
 8002864:	40010400 	.word	0x40010400
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800
 8002870:	40000c00 	.word	0x40000c00
 8002874:	40014000 	.word	0x40014000
 8002878:	40001800 	.word	0x40001800
 800287c:	40014400 	.word	0x40014400
 8002880:	40014800 	.word	0x40014800
 8002884:	40001c00 	.word	0x40001c00
 8002888:	40002000 	.word	0x40002000
 800288c:	40001000 	.word	0x40001000
 8002890:	40001400 	.word	0x40001400

08002894 <UARTx_GPIO_Init>:
 For UART6		----> IO G14 (Tx) and IO C7 (Rx)	UART6 (Rx/Tx) 	----> AF8
 */

UART_HandlerDef UART1_Struct,UART2_Struct, UART4_Struct, UART3_Struct, UART6_Struct;

void UARTx_GPIO_Init(UART_HandlerDef * uart){
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af02      	add	r7, sp, #8
 800289a:	6078      	str	r0, [r7, #4]
	if(uart == &(UART2_Struct)){//UART2
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a44      	ldr	r2, [pc, #272]	; (80029b0 <UARTx_GPIO_Init+0x11c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d116      	bne.n	80028d2 <UARTx_GPIO_Init+0x3e>
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80028a4:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <UARTx_GPIO_Init+0x120>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a42      	ldr	r2, [pc, #264]	; (80029b4 <UARTx_GPIO_Init+0x120>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6013      	str	r3, [r2, #0]
		GPIOx_InitAF(GPIOA, 2, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART2);
 80028b0:	2307      	movs	r3, #7
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2303      	movs	r3, #3
 80028b6:	2200      	movs	r2, #0
 80028b8:	2102      	movs	r1, #2
 80028ba:	483f      	ldr	r0, [pc, #252]	; (80029b8 <UARTx_GPIO_Init+0x124>)
 80028bc:	f7fd fd48 	bl	8000350 <GPIOx_InitAF>
		GPIOx_InitAF(GPIOA, 3, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART2);
 80028c0:	2307      	movs	r3, #7
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2303      	movs	r3, #3
 80028c6:	2200      	movs	r2, #0
 80028c8:	2103      	movs	r1, #3
 80028ca:	483b      	ldr	r0, [pc, #236]	; (80029b8 <UARTx_GPIO_Init+0x124>)
 80028cc:	f7fd fd40 	bl	8000350 <GPIOx_InitAF>
		RCC_AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
		GPIOx_InitAF(GPIOA, 9, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART1);
		GPIOx_InitAF(GPIOA, 10, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART1);
	}

}
 80028d0:	e06a      	b.n	80029a8 <UARTx_GPIO_Init+0x114>
	}else if(uart == &(UART4_Struct)){
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a39      	ldr	r2, [pc, #228]	; (80029bc <UARTx_GPIO_Init+0x128>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d116      	bne.n	8002908 <UARTx_GPIO_Init+0x74>
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80028da:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <UARTx_GPIO_Init+0x120>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a35      	ldr	r2, [pc, #212]	; (80029b4 <UARTx_GPIO_Init+0x120>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6013      	str	r3, [r2, #0]
		GPIOx_InitAF(GPIOA, 0, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART4);
 80028e6:	2308      	movs	r3, #8
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2303      	movs	r3, #3
 80028ec:	2200      	movs	r2, #0
 80028ee:	2100      	movs	r1, #0
 80028f0:	4831      	ldr	r0, [pc, #196]	; (80029b8 <UARTx_GPIO_Init+0x124>)
 80028f2:	f7fd fd2d 	bl	8000350 <GPIOx_InitAF>
		GPIOx_InitAF(GPIOA, 1, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART4);
 80028f6:	2308      	movs	r3, #8
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2303      	movs	r3, #3
 80028fc:	2200      	movs	r2, #0
 80028fe:	2101      	movs	r1, #1
 8002900:	482d      	ldr	r0, [pc, #180]	; (80029b8 <UARTx_GPIO_Init+0x124>)
 8002902:	f7fd fd25 	bl	8000350 <GPIOx_InitAF>
}
 8002906:	e04f      	b.n	80029a8 <UARTx_GPIO_Init+0x114>
	}else if(uart == &(UART3_Struct)){
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a2d      	ldr	r2, [pc, #180]	; (80029c0 <UARTx_GPIO_Init+0x12c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d116      	bne.n	800293e <UARTx_GPIO_Init+0xaa>
		RCC_AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002910:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <UARTx_GPIO_Init+0x120>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a27      	ldr	r2, [pc, #156]	; (80029b4 <UARTx_GPIO_Init+0x120>)
 8002916:	f043 0302 	orr.w	r3, r3, #2
 800291a:	6013      	str	r3, [r2, #0]
		GPIOx_InitAF(GPIOB, 10, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART3);
 800291c:	2307      	movs	r3, #7
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2303      	movs	r3, #3
 8002922:	2200      	movs	r2, #0
 8002924:	210a      	movs	r1, #10
 8002926:	4827      	ldr	r0, [pc, #156]	; (80029c4 <UARTx_GPIO_Init+0x130>)
 8002928:	f7fd fd12 	bl	8000350 <GPIOx_InitAF>
		GPIOx_InitAF(GPIOB, 11, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART3);
 800292c:	2307      	movs	r3, #7
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2303      	movs	r3, #3
 8002932:	2200      	movs	r2, #0
 8002934:	210b      	movs	r1, #11
 8002936:	4823      	ldr	r0, [pc, #140]	; (80029c4 <UARTx_GPIO_Init+0x130>)
 8002938:	f7fd fd0a 	bl	8000350 <GPIOx_InitAF>
}
 800293c:	e034      	b.n	80029a8 <UARTx_GPIO_Init+0x114>
	}else if(uart == &(UART6_Struct)){
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <UARTx_GPIO_Init+0x134>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d116      	bne.n	8002974 <UARTx_GPIO_Init+0xe0>
		RCC_AHB1ENR |= (RCC_AHB1ENR_GPIOCEN|RCC_AHB1ENR_GPIOGEN);
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <UARTx_GPIO_Init+0x120>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <UARTx_GPIO_Init+0x120>)
 800294c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002950:	6013      	str	r3, [r2, #0]
		GPIOx_InitAF(GPIOG, 14, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART6);
 8002952:	2308      	movs	r3, #8
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2303      	movs	r3, #3
 8002958:	2200      	movs	r2, #0
 800295a:	210e      	movs	r1, #14
 800295c:	481b      	ldr	r0, [pc, #108]	; (80029cc <UARTx_GPIO_Init+0x138>)
 800295e:	f7fd fcf7 	bl	8000350 <GPIOx_InitAF>
		GPIOx_InitAF(GPIOC, 7, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART6);
 8002962:	2308      	movs	r3, #8
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2303      	movs	r3, #3
 8002968:	2200      	movs	r2, #0
 800296a:	2107      	movs	r1, #7
 800296c:	4818      	ldr	r0, [pc, #96]	; (80029d0 <UARTx_GPIO_Init+0x13c>)
 800296e:	f7fd fcef 	bl	8000350 <GPIOx_InitAF>
}
 8002972:	e019      	b.n	80029a8 <UARTx_GPIO_Init+0x114>
	}else if(uart == &(UART6_Struct)){
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <UARTx_GPIO_Init+0x134>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d115      	bne.n	80029a8 <UARTx_GPIO_Init+0x114>
		RCC_AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <UARTx_GPIO_Init+0x120>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <UARTx_GPIO_Init+0x120>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6013      	str	r3, [r2, #0]
		GPIOx_InitAF(GPIOA, 9, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART1);
 8002988:	2307      	movs	r3, #7
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2303      	movs	r3, #3
 800298e:	2200      	movs	r2, #0
 8002990:	2109      	movs	r1, #9
 8002992:	4809      	ldr	r0, [pc, #36]	; (80029b8 <UARTx_GPIO_Init+0x124>)
 8002994:	f7fd fcdc 	bl	8000350 <GPIOx_InitAF>
		GPIOx_InitAF(GPIOA, 10, GPIO_OTYPER_PP, GPIO_OSPEEDR_HS, GPIO_AFR_AFSEL_UART1);
 8002998:	2307      	movs	r3, #7
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2303      	movs	r3, #3
 800299e:	2200      	movs	r2, #0
 80029a0:	210a      	movs	r1, #10
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <UARTx_GPIO_Init+0x124>)
 80029a4:	f7fd fcd4 	bl	8000350 <GPIOx_InitAF>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000060 	.word	0x20000060
 80029b4:	40023830 	.word	0x40023830
 80029b8:	40020000 	.word	0x40020000
 80029bc:	20000070 	.word	0x20000070
 80029c0:	20000080 	.word	0x20000080
 80029c4:	40020400 	.word	0x40020400
 80029c8:	20000090 	.word	0x20000090
 80029cc:	40021800 	.word	0x40021800
 80029d0:	40020800 	.word	0x40020800

080029d4 <baudRate_calculate>:

uint16_t* baudRate_calculate(UART_HandlerDef * uart, uint32_t baudRate){
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
	static uint16_t RegbaudRate[2];
	uint16_t num;
	uint16_t DIV_Mantissa;
	uint8_t DIV_Fraction=0;
 80029de:	2300      	movs	r3, #0
 80029e0:	73fb      	strb	r3, [r7, #15]
	if(uart->Parameter.OVER8==1){
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	88db      	ldrh	r3, [r3, #6]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d125      	bne.n	8002a36 <baudRate_calculate+0x62>
		num = 16000000/(baudRate*8);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4a26      	ldr	r2, [pc, #152]	; (8002a88 <baudRate_calculate+0xb4>)
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	81bb      	strh	r3, [r7, #12]
		DIV_Mantissa = (uint16_t) num;
 80029f6:	89bb      	ldrh	r3, [r7, #12]
 80029f8:	817b      	strh	r3, [r7, #10]
		num = (16000000*10)/(baudRate*8);								//Para obtener el primer decimal incrementamos
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4a23      	ldr	r2, [pc, #140]	; (8002a8c <baudRate_calculate+0xb8>)
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	81bb      	strh	r3, [r7, #12]
		DIV_Fraction = (num - (DIV_Mantissa*10));							//Obtenemos el decimal
 8002a06:	89bb      	ldrh	r3, [r7, #12]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	897b      	ldrh	r3, [r7, #10]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	4619      	mov	r1, r3
 8002a10:	0149      	lsls	r1, r1, #5
 8002a12:	1ac9      	subs	r1, r1, r3
 8002a14:	0089      	lsls	r1, r1, #2
 8002a16:	1acb      	subs	r3, r1, r3
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	73fb      	strb	r3, [r7, #15]
		RegbaudRate[0] = DIV_Fraction&(0x0007);
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <baudRate_calculate+0xbc>)
 8002a2c:	801a      	strh	r2, [r3, #0]
		RegbaudRate[1] = DIV_Mantissa;
 8002a2e:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <baudRate_calculate+0xbc>)
 8002a30:	897b      	ldrh	r3, [r7, #10]
 8002a32:	8053      	strh	r3, [r2, #2]
 8002a34:	e021      	b.n	8002a7a <baudRate_calculate+0xa6>

	}else{
		num = 16000000/(baudRate*16);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <baudRate_calculate+0xb4>)
 8002a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a40:	81bb      	strh	r3, [r7, #12]
		DIV_Mantissa = (uint16_t) num;
 8002a42:	89bb      	ldrh	r3, [r7, #12]
 8002a44:	817b      	strh	r3, [r7, #10]
		num = (16000000*10)/(baudRate*16);								//Para obtener el primer decimal incrementamos
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <baudRate_calculate+0xb8>)
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	81bb      	strh	r3, [r7, #12]
		DIV_Fraction = (num - (DIV_Mantissa*10));							//Obtenemos el decimal
 8002a52:	89bb      	ldrh	r3, [r7, #12]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	897b      	ldrh	r3, [r7, #10]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	0149      	lsls	r1, r1, #5
 8002a5e:	1ac9      	subs	r1, r1, r3
 8002a60:	0089      	lsls	r1, r1, #2
 8002a62:	1acb      	subs	r3, r1, r3
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	73fb      	strb	r3, [r7, #15]
		RegbaudRate[0] = DIV_Fraction;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <baudRate_calculate+0xbc>)
 8002a72:	801a      	strh	r2, [r3, #0]
		RegbaudRate[1] = DIV_Mantissa;
 8002a74:	4a06      	ldr	r2, [pc, #24]	; (8002a90 <baudRate_calculate+0xbc>)
 8002a76:	897b      	ldrh	r3, [r7, #10]
 8002a78:	8053      	strh	r3, [r2, #2]
	}
	return RegbaudRate;
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <baudRate_calculate+0xbc>)
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	00f42400 	.word	0x00f42400
 8002a8c:	09896800 	.word	0x09896800
 8002a90:	200000a0 	.word	0x200000a0

08002a94 <RCC_EnUART>:

void RCC_EnUART(UART_HandlerDef * uart){
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	if(uart == &(UART2_Struct)){
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <RCC_EnUART+0x90>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d106      	bne.n	8002ab2 <RCC_EnUART+0x1e>
		RCC_APB1ENR |= RCC_APB1ENR_USART2EN;
 8002aa4:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <RCC_EnUART+0x94>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	; (8002b28 <RCC_EnUART+0x94>)
 8002aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	e02a      	b.n	8002b08 <RCC_EnUART+0x74>
	}else if(uart == &(UART4_Struct)){
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <RCC_EnUART+0x98>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d106      	bne.n	8002ac8 <RCC_EnUART+0x34>
		RCC_APB1ENR |= RCC_APB1ENR_UART4EN;
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <RCC_EnUART+0x94>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <RCC_EnUART+0x94>)
 8002ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e01f      	b.n	8002b08 <RCC_EnUART+0x74>
	}else if(uart == &(UART3_Struct)){
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <RCC_EnUART+0x9c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d106      	bne.n	8002ade <RCC_EnUART+0x4a>
		RCC_APB1ENR |= RCC_APB1ENR_USART3EN;
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <RCC_EnUART+0x94>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	; (8002b28 <RCC_EnUART+0x94>)
 8002ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	e014      	b.n	8002b08 <RCC_EnUART+0x74>
	}else if(uart == &(UART6_Struct)){
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <RCC_EnUART+0xa0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d106      	bne.n	8002af4 <RCC_EnUART+0x60>
		RCC_APB2ENR |= RCC_APB2ENR_USART6EN;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <RCC_EnUART+0xa4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <RCC_EnUART+0xa4>)
 8002aec:	f043 0320 	orr.w	r3, r3, #32
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e009      	b.n	8002b08 <RCC_EnUART+0x74>
	}else if(uart == &(UART1_Struct)){
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <RCC_EnUART+0xa8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d105      	bne.n	8002b08 <RCC_EnUART+0x74>
		RCC_APB2ENR |= RCC_APB2ENR_USART1EN;
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <RCC_EnUART+0xa4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <RCC_EnUART+0xa4>)
 8002b02:	f043 0310 	orr.w	r3, r3, #16
 8002b06:	6013      	str	r3, [r2, #0]
	}
	uart->Registers->CR1 |= UART_CR1_UE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b16:	60da      	str	r2, [r3, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	20000060 	.word	0x20000060
 8002b28:	40023840 	.word	0x40023840
 8002b2c:	20000070 	.word	0x20000070
 8002b30:	20000080 	.word	0x20000080
 8002b34:	20000090 	.word	0x20000090
 8002b38:	40023844 	.word	0x40023844
 8002b3c:	20000050 	.word	0x20000050

08002b40 <UARTx_TxRxEnable>:

void UARTx_TxRxEnable(UART_HandlerDef * uart,bool Rx, bool Tx){
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	70fb      	strb	r3, [r7, #3]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	70bb      	strb	r3, [r7, #2]
	if(Rx){
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <UARTx_TxRxEnable+0x2e>
		uart->Registers->CR1 |= UART_CR1_RE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0204 	orr.w	r2, r2, #4
 8002b64:	60da      	str	r2, [r3, #12]
		uart->Parameter.Rx_Enable = true;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	735a      	strb	r2, [r3, #13]
 8002b6c:	e00a      	b.n	8002b84 <UARTx_TxRxEnable+0x44>
	}else{
		uart->Registers->CR1 &= ~UART_CR1_RE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0204 	bic.w	r2, r2, #4
 8002b7c:	60da      	str	r2, [r3, #12]
		uart->Parameter.Rx_Enable = false;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	735a      	strb	r2, [r3, #13]
	}
	if(Tx){
 8002b84:	78bb      	ldrb	r3, [r7, #2]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <UARTx_TxRxEnable+0x62>
		uart->Registers->CR1 |= UART_CR1_TE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0208 	orr.w	r2, r2, #8
 8002b98:	60da      	str	r2, [r3, #12]
		uart->Parameter.Tx_Enable = true;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	731a      	strb	r2, [r3, #12]
	}else{
		uart->Registers->CR1 &= ~UART_CR1_TE;
		uart->Parameter.Tx_Enable = false;
	}
}
 8002ba0:	e00a      	b.n	8002bb8 <UARTx_TxRxEnable+0x78>
		uart->Registers->CR1 &= ~UART_CR1_TE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0208 	bic.w	r2, r2, #8
 8002bb0:	60da      	str	r2, [r3, #12]
		uart->Parameter.Tx_Enable = false;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	731a      	strb	r2, [r3, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <UARTx_wordLenght>:

void UARTx_wordLenght(UART_HandlerDef * uart, uint8_t wordLenght){
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]
	if(wordLenght == 0){
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10f      	bne.n	8002bf6 <UARTx_wordLenght+0x32>
		uart->Registers->CR1 &= ~UART_CR1_M;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002be4:	60da      	str	r2, [r3, #12]
		uart->Parameter.wordLenght &= ~UART_CR1_M;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	891b      	ldrh	r3, [r3, #8]
 8002bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	811a      	strh	r2, [r3, #8]
	}else{
		uart->Registers->CR1 |= UART_CR1_M;
		uart->Parameter.wordLenght |= UART_CR1_M;
	}
}
 8002bf4:	e00e      	b.n	8002c14 <UARTx_wordLenght+0x50>
		uart->Registers->CR1 |= UART_CR1_M;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c04:	60da      	str	r2, [r3, #12]
		uart->Parameter.wordLenght |= UART_CR1_M;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	891b      	ldrh	r3, [r3, #8]
 8002c0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	811a      	strh	r2, [r3, #8]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <UARTx_OVER8>:

void UARTx_OVER8(UART_HandlerDef * uart, uint8_t OVER8){
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70fb      	strb	r3, [r7, #3]
	if(OVER8 == 1){
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d10b      	bne.n	8002c4a <UARTx_OVER8+0x2a>
		uart->Registers->CR1 |= UART_CR1_OVER8;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c40:	60da      	str	r2, [r3, #12]
		uart->Parameter.OVER8 = 1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	80da      	strh	r2, [r3, #6]
	}else{
		uart->Registers->CR1 &= ~UART_CR1_OVER8;
		uart->Parameter.OVER8 = 0;
	}
}
 8002c48:	e00a      	b.n	8002c60 <UARTx_OVER8+0x40>
		uart->Registers->CR1 &= ~UART_CR1_OVER8;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c58:	60da      	str	r2, [r3, #12]
		uart->Parameter.OVER8 = 0;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	80da      	strh	r2, [r3, #6]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <UARTx_receiveData>:

uint8_t UARTx_receiveData(UART_HandlerDef * uart){
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	uint8_t aux;
	while(!(uart->Registers->SR&UART_SR_RXNE));
 8002c74:	bf00      	nop
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f8      	beq.n	8002c76 <UARTx_receiveData+0xa>
	aux = uart->Registers->DR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	73fb      	strb	r3, [r7, #15]
	return aux;
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <UARTx_sendData>:

void UARTx_sendData(UART_HandlerDef * uart, uint8_t dato){
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
	while((uart->Registers->SR&UART_SR_TXE)==0);
 8002ca6:	bf00      	nop
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f8      	beq.n	8002ca8 <UARTx_sendData+0xe>
	//for(int i = 0; i<= 10;i++){}
	uart->Registers->DR=dato;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	605a      	str	r2, [r3, #4]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <UARTx_ParitySelection>:

void UARTx_ParitySelection(UART_HandlerDef * uart, uint8_t PS){
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	70fb      	strb	r3, [r7, #3]
	if(PS==1){
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d113      	bne.n	8002d04 <UARTx_ParitySelection+0x3a>
		uart->Registers->CR1 |= UART_CR1_PCE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cea:	60da      	str	r2, [r3, #12]
		uart->Registers->CR1 |= UART_CR1_PS;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	60da      	str	r2, [r3, #12]
		uart->Parameter.PS = 1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	815a      	strh	r2, [r3, #10]
	else{
		uart->Registers->CR1 &= ~UART_CR1_PCE;
		uart->Parameter.PS = 0;
	}

}
 8002d02:	e021      	b.n	8002d48 <UARTx_ParitySelection+0x7e>
	}else if(PS==2){
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d113      	bne.n	8002d32 <UARTx_ParitySelection+0x68>
		uart->Registers->CR1 |= UART_CR1_PCE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d18:	60da      	str	r2, [r3, #12]
		uart->Registers->CR1 &= ~UART_CR1_PS;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	60da      	str	r2, [r3, #12]
		uart->Parameter.PS = 2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	815a      	strh	r2, [r3, #10]
}
 8002d30:	e00a      	b.n	8002d48 <UARTx_ParitySelection+0x7e>
		uart->Registers->CR1 &= ~UART_CR1_PCE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d40:	60da      	str	r2, [r3, #12]
		uart->Parameter.PS = 0;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	815a      	strh	r2, [r3, #10]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <UARTx_Init>:

void UARTx_Init(uint32_t baudRate, uint8_t OVER8, uint8_t wordLenght, uint8_t PS,bool Rx, bool Tx, UART_HandlerDef * uart){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	70fb      	strb	r3, [r7, #3]
 8002d66:	460b      	mov	r3, r1
 8002d68:	70bb      	strb	r3, [r7, #2]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	707b      	strb	r3, [r7, #1]
	uint16_t*BRR;
	RCC_EnUART(uart);
 8002d6e:	6a38      	ldr	r0, [r7, #32]
 8002d70:	f7ff fe90 	bl	8002a94 <RCC_EnUART>
	UARTx_TxRxEnable(uart, Rx, Tx);
 8002d74:	7f3a      	ldrb	r2, [r7, #28]
 8002d76:	7e3b      	ldrb	r3, [r7, #24]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6a38      	ldr	r0, [r7, #32]
 8002d7c:	f7ff fee0 	bl	8002b40 <UARTx_TxRxEnable>
	UARTx_wordLenght(uart,wordLenght);
 8002d80:	78bb      	ldrb	r3, [r7, #2]
 8002d82:	4619      	mov	r1, r3
 8002d84:	6a38      	ldr	r0, [r7, #32]
 8002d86:	f7ff ff1d 	bl	8002bc4 <UARTx_wordLenght>
	UARTx_OVER8(uart,OVER8);
 8002d8a:	78fb      	ldrb	r3, [r7, #3]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6a38      	ldr	r0, [r7, #32]
 8002d90:	f7ff ff46 	bl	8002c20 <UARTx_OVER8>
	UARTx_ParitySelection(uart,PS);
 8002d94:	787b      	ldrb	r3, [r7, #1]
 8002d96:	4619      	mov	r1, r3
 8002d98:	6a38      	ldr	r0, [r7, #32]
 8002d9a:	f7ff ff96 	bl	8002cca <UARTx_ParitySelection>
	BRR = baudRate_calculate(uart, baudRate);
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	6a38      	ldr	r0, [r7, #32]
 8002da2:	f7ff fe17 	bl	80029d4 <baudRate_calculate>
 8002da6:	60f8      	str	r0, [r7, #12]
	uart->Registers->BRR |= BRR[0] << 0;										//Se recorre al bit 0 para abarcar bits 0-3
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	4619      	mov	r1, r3
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	609a      	str	r2, [r3, #8]
	uart->Registers->BRR |= BRR[1] << 4;
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <UARTx_ResetStruct>:

void UARTx_ResetStruct(UART_HandlerDef * uart ,UART_TypeDef  * uart_base){
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
    uart->Registers = uart_base;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	601a      	str	r2, [r3, #0]
    uart->Parameter.OVER8 = 0;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	80da      	strh	r2, [r3, #6]
    uart->Parameter.baudRate=0;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	809a      	strh	r2, [r3, #4]
    uart->Parameter.wordLenght=0;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	811a      	strh	r2, [r3, #8]
    uart->Parameter.Rx_Enable=false;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	735a      	strb	r2, [r3, #13]
    uart->Parameter.Tx_Enable=false;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	731a      	strb	r2, [r3, #12]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <UARTx_RXNE_Init>:
void UARTx_RXNE_Init(UART_HandlerDef * uart){
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
	uart->Registers->CR1 |= UART_CR1_RXNEIE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0220 	orr.w	r2, r2, #32
 8002e2c:	60da      	str	r2, [r3, #12]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <UARTx_TC_Init>:
void UARTx_TC_Init(UART_HandlerDef * uart){
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
	uart->Registers->CR1 |= UART_CR1_TCIE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e50:	60da      	str	r2, [r3, #12]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <UARTx_TXE_Init>:
void UARTx_TXE_Init(UART_HandlerDef * uart){
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
	uart->Registers->CR1 |= UART_CR1_TXEIE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e74:	60da      	str	r2, [r3, #12]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <UARTx_InterruptEN>:
void UARTx_InterruptEN(UART_HandlerDef * uart,bool RXNE, bool TC, bool TXE,uint8_t priority){
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	70fb      	strb	r3, [r7, #3]
 8002e96:	460b      	mov	r3, r1
 8002e98:	70bb      	strb	r3, [r7, #2]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	707b      	strb	r3, [r7, #1]
	if(RXNE)
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <UARTx_InterruptEN+0x26>
		UARTx_RXNE_Init(uart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ffb6 	bl	8002e16 <UARTx_RXNE_Init>
	if(TC)
 8002eaa:	78bb      	ldrb	r3, [r7, #2]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <UARTx_InterruptEN+0x32>
		UARTx_TC_Init(uart);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ffc2 	bl	8002e3a <UARTx_TC_Init>
	if(TXE)
 8002eb6:	787b      	ldrb	r3, [r7, #1]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <UARTx_InterruptEN+0x3e>
		UARTx_TXE_Init(uart);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ffce 	bl	8002e5e <UARTx_TXE_Init>
	if(uart == &(UART2_Struct)){
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <UARTx_InterruptEN+0xa8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d105      	bne.n	8002ed6 <UARTx_InterruptEN+0x52>
		NVIC_SetCFGR(38,priority);
 8002eca:	7c3b      	ldrb	r3, [r7, #16]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	2026      	movs	r0, #38	; 0x26
 8002ed0:	f7fd fb3c 	bl	800054c <NVIC_SetCFGR>
	}else if(uart == &(UART6_Struct)){
		NVIC_SetCFGR(71,priority);
	}else if(uart == &(UART1_Struct)){
		NVIC_SetCFGR(37,priority);
	}
}
 8002ed4:	e026      	b.n	8002f24 <UARTx_InterruptEN+0xa0>
	}else if(uart == &(UART4_Struct)){
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <UARTx_InterruptEN+0xac>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d105      	bne.n	8002eea <UARTx_InterruptEN+0x66>
		NVIC_SetCFGR(52,priority);
 8002ede:	7c3b      	ldrb	r3, [r7, #16]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	2034      	movs	r0, #52	; 0x34
 8002ee4:	f7fd fb32 	bl	800054c <NVIC_SetCFGR>
}
 8002ee8:	e01c      	b.n	8002f24 <UARTx_InterruptEN+0xa0>
	}else if(uart == &(UART3_Struct)){
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a11      	ldr	r2, [pc, #68]	; (8002f34 <UARTx_InterruptEN+0xb0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d105      	bne.n	8002efe <UARTx_InterruptEN+0x7a>
		NVIC_SetCFGR(39,priority);
 8002ef2:	7c3b      	ldrb	r3, [r7, #16]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	2027      	movs	r0, #39	; 0x27
 8002ef8:	f7fd fb28 	bl	800054c <NVIC_SetCFGR>
}
 8002efc:	e012      	b.n	8002f24 <UARTx_InterruptEN+0xa0>
	}else if(uart == &(UART6_Struct)){
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <UARTx_InterruptEN+0xb4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d105      	bne.n	8002f12 <UARTx_InterruptEN+0x8e>
		NVIC_SetCFGR(71,priority);
 8002f06:	7c3b      	ldrb	r3, [r7, #16]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	2047      	movs	r0, #71	; 0x47
 8002f0c:	f7fd fb1e 	bl	800054c <NVIC_SetCFGR>
}
 8002f10:	e008      	b.n	8002f24 <UARTx_InterruptEN+0xa0>
	}else if(uart == &(UART1_Struct)){
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <UARTx_InterruptEN+0xb8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d104      	bne.n	8002f24 <UARTx_InterruptEN+0xa0>
		NVIC_SetCFGR(37,priority);
 8002f1a:	7c3b      	ldrb	r3, [r7, #16]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	2025      	movs	r0, #37	; 0x25
 8002f20:	f7fd fb14 	bl	800054c <NVIC_SetCFGR>
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000060 	.word	0x20000060
 8002f30:	20000070 	.word	0x20000070
 8002f34:	20000080 	.word	0x20000080
 8002f38:	20000090 	.word	0x20000090
 8002f3c:	20000050 	.word	0x20000050

08002f40 <UARTx_GetCurrentErrors>:
uint8_t UARTx_GetCurrentErrors(UART_HandlerDef * uart){
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	uint8_t currentErrors = (uart->Registers->SR&0x0F);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	73fb      	strb	r3, [r7, #15]
	return currentErrors;
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <UARTx_GetInterruptFlags>:
uint8_t UARTx_GetInterruptFlags(UART_HandlerDef * uart){
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	uint8_t interruptFlags = (uart->Registers->SR&0xF0);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	f023 030f 	bic.w	r3, r3, #15
 8002f78:	73fb      	strb	r3, [r7, #15]
	return interruptFlags;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <UARTx_SolveCurrentErrors>:
bool UARTx_SolveCurrentErrors(UART_HandlerDef * uart, uint8_t cE){
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
	uint8_t currentErrors = cE;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	73bb      	strb	r3, [r7, #14]
	bool IsCurrentErrorsSolve;
	if(currentErrors==0){
 8002f98:	7bbb      	ldrb	r3, [r7, #14]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <UARTx_SolveCurrentErrors+0x1c>
		IsCurrentErrorsSolve=true;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e037      	b.n	8003014 <UARTx_SolveCurrentErrors+0x8c>
	}else{
		IsCurrentErrorsSolve=false;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
		if(currentErrors&UART_SR_PE){
 8002fa8:	7bbb      	ldrb	r3, [r7, #14]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00d      	beq.n	8002fce <UARTx_SolveCurrentErrors+0x46>
			while((uart->Registers->SR&UART_SR_RXNE)==0);		//Espera la bandera antes de limpiar
 8002fb2:	bf00      	nop
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f8      	beq.n	8002fb4 <UARTx_SolveCurrentErrors+0x2c>
			uart->Registers->SR;								//Lectura de registro de estado
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
			uart->Registers->DR;								//Lectura de registro de datos
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
															//Se limpia bandera
			if(!(currentErrors&UART_SR_PE)){					//Confirma bandera limpia

			}
		}
		if(currentErrors&UART_SR_FE){
 8002fce:	7bbb      	ldrb	r3, [r7, #14]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <UARTx_SolveCurrentErrors+0x5c>
			uart->Registers->SR;								//Lectura de registro de estado
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
			uart->Registers->DR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
			//Se limpia bandera
			if(!(currentErrors&UART_SR_FE)){//Confirma bandera limpia

			}
		}
		if(currentErrors&UART_SR_NF){
 8002fe4:	7bbb      	ldrb	r3, [r7, #14]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <UARTx_SolveCurrentErrors+0x72>
			uart->Registers->SR;								//Lectura de registro de estado
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
			uart->Registers->DR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
			//Se limpia bandera
			if(!(currentErrors&UART_SR_NF)){//Confirma bandera limpia

			}
	}
		if(currentErrors&UART_SR_ORE){
 8002ffa:	7bbb      	ldrb	r3, [r7, #14]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <UARTx_SolveCurrentErrors+0x88>
			uart->Registers->SR;								//Lectura de registro de estado
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
			uart->Registers->DR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
			if(!(currentErrors&UART_SR_ORE)){						//Confirma bandera limpia

			}
		}
		IsCurrentErrorsSolve=true;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
	}


	return IsCurrentErrorsSolve;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <embbFLash_Conf>:
 */


#include "embeddedFLASH.h"
//AHBCLK MHz
void embbFLash_Conf(uint8_t AHBCLK){
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
	uint8_t latency;
	FLASH_ACR |= (FLASH_ACR_DCEN_SET|FLASH_ACR_ICEN_SET|FLASH_ACR_PRFTEN_SET);
 800302e:	4b23      	ldr	r3, [pc, #140]	; (80030bc <embbFLash_Conf+0x98>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a22      	ldr	r2, [pc, #136]	; (80030bc <embbFLash_Conf+0x98>)
 8003034:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003038:	6013      	str	r3, [r2, #0]
	//Number of wait states according to CPU clock (HCLK) frequency, Voltage Range 2.7[V]-3.6[V]
	if((AHBCLK>0)&&(AHBCLK<=30)){
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <embbFLash_Conf+0x28>
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	2b1e      	cmp	r3, #30
 8003044:	d802      	bhi.n	800304c <embbFLash_Conf+0x28>
		latency=0;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
 800304a:	e02b      	b.n	80030a4 <embbFLash_Conf+0x80>
	}
	else if((AHBCLK>30)&&(AHBCLK<=60)){
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	2b1e      	cmp	r3, #30
 8003050:	d905      	bls.n	800305e <embbFLash_Conf+0x3a>
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	2b3c      	cmp	r3, #60	; 0x3c
 8003056:	d802      	bhi.n	800305e <embbFLash_Conf+0x3a>
		latency=1;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	e022      	b.n	80030a4 <embbFLash_Conf+0x80>
	}
	else if((AHBCLK>60)&&(AHBCLK<=90)){
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	2b3c      	cmp	r3, #60	; 0x3c
 8003062:	d905      	bls.n	8003070 <embbFLash_Conf+0x4c>
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	2b5a      	cmp	r3, #90	; 0x5a
 8003068:	d802      	bhi.n	8003070 <embbFLash_Conf+0x4c>
		latency=2;
 800306a:	2302      	movs	r3, #2
 800306c:	73fb      	strb	r3, [r7, #15]
 800306e:	e019      	b.n	80030a4 <embbFLash_Conf+0x80>
	}
	else if((AHBCLK>90)&&(AHBCLK<=120)){
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	2b5a      	cmp	r3, #90	; 0x5a
 8003074:	d905      	bls.n	8003082 <embbFLash_Conf+0x5e>
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	2b78      	cmp	r3, #120	; 0x78
 800307a:	d802      	bhi.n	8003082 <embbFLash_Conf+0x5e>
		latency=3;
 800307c:	2303      	movs	r3, #3
 800307e:	73fb      	strb	r3, [r7, #15]
 8003080:	e010      	b.n	80030a4 <embbFLash_Conf+0x80>
	}
	else if((AHBCLK>120)&&(AHBCLK<=150)){
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	2b78      	cmp	r3, #120	; 0x78
 8003086:	d905      	bls.n	8003094 <embbFLash_Conf+0x70>
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	2b96      	cmp	r3, #150	; 0x96
 800308c:	d802      	bhi.n	8003094 <embbFLash_Conf+0x70>
		latency=4;
 800308e:	2304      	movs	r3, #4
 8003090:	73fb      	strb	r3, [r7, #15]
 8003092:	e007      	b.n	80030a4 <embbFLash_Conf+0x80>
	}
	else if((AHBCLK>150)&&(AHBCLK<=180)){
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b96      	cmp	r3, #150	; 0x96
 8003098:	d904      	bls.n	80030a4 <embbFLash_Conf+0x80>
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	2bb4      	cmp	r3, #180	; 0xb4
 800309e:	d801      	bhi.n	80030a4 <embbFLash_Conf+0x80>
		latency=5;
 80030a0:	2305      	movs	r3, #5
 80030a2:	73fb      	strb	r3, [r7, #15]
	}
	FLASH_ACR |= latency;
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <embbFLash_Conf+0x98>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	4904      	ldr	r1, [pc, #16]	; (80030bc <embbFLash_Conf+0x98>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40023c00 	.word	0x40023c00

080030c0 <USART1_IRQHandler>:
uint8_t first_Byte = 1;
uint8_t last_Byte = 0;

uint8_t dato;
uint8_t intFlag;
void USART1_IRQHandler(void){
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
	intFlag = UARTx_GetInterruptFlags(&UART1_Struct);
 80030c4:	482a      	ldr	r0, [pc, #168]	; (8003170 <USART1_IRQHandler+0xb0>)
 80030c6:	f7ff ff4d 	bl	8002f64 <UARTx_GetInterruptFlags>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <USART1_IRQHandler+0xb4>)
 80030d0:	701a      	strb	r2, [r3, #0]
	while(!(UARTx_SolveCurrentErrors(&UART1_Struct,UARTx_GetCurrentErrors(&UART1_Struct)))){
 80030d2:	e007      	b.n	80030e4 <USART1_IRQHandler+0x24>
		UARTx_SolveCurrentErrors(&UART1_Struct,UARTx_GetCurrentErrors(&UART1_Struct));
 80030d4:	4826      	ldr	r0, [pc, #152]	; (8003170 <USART1_IRQHandler+0xb0>)
 80030d6:	f7ff ff33 	bl	8002f40 <UARTx_GetCurrentErrors>
 80030da:	4603      	mov	r3, r0
 80030dc:	4619      	mov	r1, r3
 80030de:	4824      	ldr	r0, [pc, #144]	; (8003170 <USART1_IRQHandler+0xb0>)
 80030e0:	f7ff ff52 	bl	8002f88 <UARTx_SolveCurrentErrors>
	while(!(UARTx_SolveCurrentErrors(&UART1_Struct,UARTx_GetCurrentErrors(&UART1_Struct)))){
 80030e4:	4822      	ldr	r0, [pc, #136]	; (8003170 <USART1_IRQHandler+0xb0>)
 80030e6:	f7ff ff2b 	bl	8002f40 <UARTx_GetCurrentErrors>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4619      	mov	r1, r3
 80030ee:	4820      	ldr	r0, [pc, #128]	; (8003170 <USART1_IRQHandler+0xb0>)
 80030f0:	f7ff ff4a 	bl	8002f88 <UARTx_SolveCurrentErrors>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f083 0301 	eor.w	r3, r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e9      	bne.n	80030d4 <USART1_IRQHandler+0x14>
	}
	if(!((intFlag&UART_SR_RXNE)==0)){
 8003100:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <USART1_IRQHandler+0xb4>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00f      	beq.n	800312c <USART1_IRQHandler+0x6c>
		dato=UARTx_receiveData(&UART1_Struct);
 800310c:	4818      	ldr	r0, [pc, #96]	; (8003170 <USART1_IRQHandler+0xb0>)
 800310e:	f7ff fdad 	bl	8002c6c <UARTx_receiveData>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	4b18      	ldr	r3, [pc, #96]	; (8003178 <USART1_IRQHandler+0xb8>)
 8003118:	701a      	strb	r2, [r3, #0]
		UART1_Struct.Registers->SR &=~UART_SR_RXNE;
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <USART1_IRQHandler+0xb0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <USART1_IRQHandler+0xb0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0220 	bic.w	r2, r2, #32
 8003128:	601a      	str	r2, [r3, #0]
		UART1_Struct.Registers->SR &=~UART_SR_TC;
	}else if(!((intFlag&UART_SR_TXE)==0)){
		UARTx_sendData(&UART1_Struct, 0x7E);
		UART1_Struct.Registers->SR &=~UART_SR_TXE;
	}
}
 800312a:	e01f      	b.n	800316c <USART1_IRQHandler+0xac>
	}else if(!((intFlag&UART_SR_TC)==0)){
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <USART1_IRQHandler+0xb4>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <USART1_IRQHandler+0x8a>
		UART1_Struct.Registers->SR &=~UART_SR_TC;
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <USART1_IRQHandler+0xb0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <USART1_IRQHandler+0xb0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003146:	601a      	str	r2, [r3, #0]
}
 8003148:	e010      	b.n	800316c <USART1_IRQHandler+0xac>
	}else if(!((intFlag&UART_SR_TXE)==0)){
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <USART1_IRQHandler+0xb4>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	b25b      	sxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	da0b      	bge.n	800316c <USART1_IRQHandler+0xac>
		UARTx_sendData(&UART1_Struct, 0x7E);
 8003154:	217e      	movs	r1, #126	; 0x7e
 8003156:	4806      	ldr	r0, [pc, #24]	; (8003170 <USART1_IRQHandler+0xb0>)
 8003158:	f7ff fd9f 	bl	8002c9a <UARTx_sendData>
		UART1_Struct.Registers->SR &=~UART_SR_TXE;
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <USART1_IRQHandler+0xb0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	4b03      	ldr	r3, [pc, #12]	; (8003170 <USART1_IRQHandler+0xb0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800316a:	601a      	str	r2, [r3, #0]
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000050 	.word	0x20000050
 8003174:	200000e9 	.word	0x200000e9
 8003178:	200000e8 	.word	0x200000e8

0800317c <UART4_IRQHandler>:
void UART4_IRQHandler(void){
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
	intFlag = UARTx_GetInterruptFlags(&UART4_Struct);
 8003180:	482a      	ldr	r0, [pc, #168]	; (800322c <UART4_IRQHandler+0xb0>)
 8003182:	f7ff feef 	bl	8002f64 <UARTx_GetInterruptFlags>
 8003186:	4603      	mov	r3, r0
 8003188:	461a      	mov	r2, r3
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <UART4_IRQHandler+0xb4>)
 800318c:	701a      	strb	r2, [r3, #0]
	while(!(UARTx_SolveCurrentErrors(&UART4_Struct,UARTx_GetCurrentErrors(&UART4_Struct)))){
 800318e:	e007      	b.n	80031a0 <UART4_IRQHandler+0x24>
		UARTx_SolveCurrentErrors(&UART4_Struct,UARTx_GetCurrentErrors(&UART4_Struct));
 8003190:	4826      	ldr	r0, [pc, #152]	; (800322c <UART4_IRQHandler+0xb0>)
 8003192:	f7ff fed5 	bl	8002f40 <UARTx_GetCurrentErrors>
 8003196:	4603      	mov	r3, r0
 8003198:	4619      	mov	r1, r3
 800319a:	4824      	ldr	r0, [pc, #144]	; (800322c <UART4_IRQHandler+0xb0>)
 800319c:	f7ff fef4 	bl	8002f88 <UARTx_SolveCurrentErrors>
	while(!(UARTx_SolveCurrentErrors(&UART4_Struct,UARTx_GetCurrentErrors(&UART4_Struct)))){
 80031a0:	4822      	ldr	r0, [pc, #136]	; (800322c <UART4_IRQHandler+0xb0>)
 80031a2:	f7ff fecd 	bl	8002f40 <UARTx_GetCurrentErrors>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4619      	mov	r1, r3
 80031aa:	4820      	ldr	r0, [pc, #128]	; (800322c <UART4_IRQHandler+0xb0>)
 80031ac:	f7ff feec 	bl	8002f88 <UARTx_SolveCurrentErrors>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f083 0301 	eor.w	r3, r3, #1
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e9      	bne.n	8003190 <UART4_IRQHandler+0x14>
	}
	if(!((intFlag&UART_SR_RXNE)==0)){
 80031bc:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <UART4_IRQHandler+0xb4>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00f      	beq.n	80031e8 <UART4_IRQHandler+0x6c>
		dato=UARTx_receiveData(&UART4_Struct);
 80031c8:	4818      	ldr	r0, [pc, #96]	; (800322c <UART4_IRQHandler+0xb0>)
 80031ca:	f7ff fd4f 	bl	8002c6c <UARTx_receiveData>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <UART4_IRQHandler+0xb8>)
 80031d4:	701a      	strb	r2, [r3, #0]
		UART4_Struct.Registers->SR &=~UART_SR_RXNE;
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <UART4_IRQHandler+0xb0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b13      	ldr	r3, [pc, #76]	; (800322c <UART4_IRQHandler+0xb0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0220 	bic.w	r2, r2, #32
 80031e4:	601a      	str	r2, [r3, #0]
		UART4_Struct.Registers->SR &=~UART_SR_TC;
	}else if(!((intFlag&UART_SR_TXE)==0)){
		UARTx_sendData(&UART4_Struct, 0x7E);
		UART4_Struct.Registers->SR &=~UART_SR_TXE;
	}
}
 80031e6:	e01f      	b.n	8003228 <UART4_IRQHandler+0xac>
	}else if(!((intFlag&UART_SR_TC)==0)){
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <UART4_IRQHandler+0xb4>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <UART4_IRQHandler+0x8a>
		UART4_Struct.Registers->SR &=~UART_SR_TC;
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <UART4_IRQHandler+0xb0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <UART4_IRQHandler+0xb0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	e010      	b.n	8003228 <UART4_IRQHandler+0xac>
	}else if(!((intFlag&UART_SR_TXE)==0)){
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <UART4_IRQHandler+0xb4>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b25b      	sxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	da0b      	bge.n	8003228 <UART4_IRQHandler+0xac>
		UARTx_sendData(&UART4_Struct, 0x7E);
 8003210:	217e      	movs	r1, #126	; 0x7e
 8003212:	4806      	ldr	r0, [pc, #24]	; (800322c <UART4_IRQHandler+0xb0>)
 8003214:	f7ff fd41 	bl	8002c9a <UARTx_sendData>
		UART4_Struct.Registers->SR &=~UART_SR_TXE;
 8003218:	4b04      	ldr	r3, [pc, #16]	; (800322c <UART4_IRQHandler+0xb0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b03      	ldr	r3, [pc, #12]	; (800322c <UART4_IRQHandler+0xb0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003226:	601a      	str	r2, [r3, #0]
}
 8003228:	bf00      	nop
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000070 	.word	0x20000070
 8003230:	200000e9 	.word	0x200000e9
 8003234:	200000e8 	.word	0x200000e8

08003238 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
	intFlag = UARTx_GetInterruptFlags(&UART2_Struct);
 800323c:	4828      	ldr	r0, [pc, #160]	; (80032e0 <USART2_IRQHandler+0xa8>)
 800323e:	f7ff fe91 	bl	8002f64 <UARTx_GetInterruptFlags>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <USART2_IRQHandler+0xac>)
 8003248:	701a      	strb	r2, [r3, #0]
		while(!(UARTx_SolveCurrentErrors(&UART2_Struct,UARTx_GetCurrentErrors(&UART2_Struct)))){
 800324a:	e007      	b.n	800325c <USART2_IRQHandler+0x24>
			UARTx_SolveCurrentErrors(&UART2_Struct,UARTx_GetCurrentErrors(&UART2_Struct));
 800324c:	4824      	ldr	r0, [pc, #144]	; (80032e0 <USART2_IRQHandler+0xa8>)
 800324e:	f7ff fe77 	bl	8002f40 <UARTx_GetCurrentErrors>
 8003252:	4603      	mov	r3, r0
 8003254:	4619      	mov	r1, r3
 8003256:	4822      	ldr	r0, [pc, #136]	; (80032e0 <USART2_IRQHandler+0xa8>)
 8003258:	f7ff fe96 	bl	8002f88 <UARTx_SolveCurrentErrors>
		while(!(UARTx_SolveCurrentErrors(&UART2_Struct,UARTx_GetCurrentErrors(&UART2_Struct)))){
 800325c:	4820      	ldr	r0, [pc, #128]	; (80032e0 <USART2_IRQHandler+0xa8>)
 800325e:	f7ff fe6f 	bl	8002f40 <UARTx_GetCurrentErrors>
 8003262:	4603      	mov	r3, r0
 8003264:	4619      	mov	r1, r3
 8003266:	481e      	ldr	r0, [pc, #120]	; (80032e0 <USART2_IRQHandler+0xa8>)
 8003268:	f7ff fe8e 	bl	8002f88 <UARTx_SolveCurrentErrors>
 800326c:	4603      	mov	r3, r0
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e9      	bne.n	800324c <USART2_IRQHandler+0x14>
		}
		if(!((intFlag&UART_SR_RXNE)==0)){
 8003278:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <USART2_IRQHandler+0xac>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00f      	beq.n	80032a4 <USART2_IRQHandler+0x6c>
			dato=UARTx_receiveData(&UART2_Struct);
 8003284:	4816      	ldr	r0, [pc, #88]	; (80032e0 <USART2_IRQHandler+0xa8>)
 8003286:	f7ff fcf1 	bl	8002c6c <UARTx_receiveData>
 800328a:	4603      	mov	r3, r0
 800328c:	461a      	mov	r2, r3
 800328e:	4b16      	ldr	r3, [pc, #88]	; (80032e8 <USART2_IRQHandler+0xb0>)
 8003290:	701a      	strb	r2, [r3, #0]
			UART3_Struct.Registers->SR &=~UART_SR_RXNE;
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <USART2_IRQHandler+0xb4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <USART2_IRQHandler+0xb4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0220 	bic.w	r2, r2, #32
 80032a0:	601a      	str	r2, [r3, #0]
			UART2_Struct.Registers->SR &=~UART_SR_TC;
		}else if(!((intFlag&UART_SR_TXE)==0)){

			UART2_Struct.Registers->SR &=~UART_SR_TXE;
		}
}
 80032a2:	e01b      	b.n	80032dc <USART2_IRQHandler+0xa4>
		}else if(!((intFlag&UART_SR_TC)==0)){
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <USART2_IRQHandler+0xac>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <USART2_IRQHandler+0x8a>
			UART2_Struct.Registers->SR &=~UART_SR_TC;
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <USART2_IRQHandler+0xa8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <USART2_IRQHandler+0xa8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032be:	601a      	str	r2, [r3, #0]
}
 80032c0:	e00c      	b.n	80032dc <USART2_IRQHandler+0xa4>
		}else if(!((intFlag&UART_SR_TXE)==0)){
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <USART2_IRQHandler+0xac>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b25b      	sxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	da07      	bge.n	80032dc <USART2_IRQHandler+0xa4>
			UART2_Struct.Registers->SR &=~UART_SR_TXE;
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <USART2_IRQHandler+0xa8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <USART2_IRQHandler+0xa8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032da:	601a      	str	r2, [r3, #0]
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20000060 	.word	0x20000060
 80032e4:	200000e9 	.word	0x200000e9
 80032e8:	200000e8 	.word	0x200000e8
 80032ec:	20000080 	.word	0x20000080

080032f0 <USART3_IRQHandler>:
			bytes_Received_Counter++;
		}
	}
}

void USART3_IRQHandler(void){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
	intFlag = UARTx_GetInterruptFlags(&UART3_Struct);
 80032f4:	4825      	ldr	r0, [pc, #148]	; (800338c <USART3_IRQHandler+0x9c>)
 80032f6:	f7ff fe35 	bl	8002f64 <UARTx_GetInterruptFlags>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	4b24      	ldr	r3, [pc, #144]	; (8003390 <USART3_IRQHandler+0xa0>)
 8003300:	701a      	strb	r2, [r3, #0]
		while(!(UARTx_SolveCurrentErrors(&UART3_Struct,UARTx_GetCurrentErrors(&UART3_Struct)))){
 8003302:	e007      	b.n	8003314 <USART3_IRQHandler+0x24>
			UARTx_SolveCurrentErrors(&UART3_Struct,UARTx_GetCurrentErrors(&UART3_Struct));
 8003304:	4821      	ldr	r0, [pc, #132]	; (800338c <USART3_IRQHandler+0x9c>)
 8003306:	f7ff fe1b 	bl	8002f40 <UARTx_GetCurrentErrors>
 800330a:	4603      	mov	r3, r0
 800330c:	4619      	mov	r1, r3
 800330e:	481f      	ldr	r0, [pc, #124]	; (800338c <USART3_IRQHandler+0x9c>)
 8003310:	f7ff fe3a 	bl	8002f88 <UARTx_SolveCurrentErrors>
		while(!(UARTx_SolveCurrentErrors(&UART3_Struct,UARTx_GetCurrentErrors(&UART3_Struct)))){
 8003314:	481d      	ldr	r0, [pc, #116]	; (800338c <USART3_IRQHandler+0x9c>)
 8003316:	f7ff fe13 	bl	8002f40 <UARTx_GetCurrentErrors>
 800331a:	4603      	mov	r3, r0
 800331c:	4619      	mov	r1, r3
 800331e:	481b      	ldr	r0, [pc, #108]	; (800338c <USART3_IRQHandler+0x9c>)
 8003320:	f7ff fe32 	bl	8002f88 <UARTx_SolveCurrentErrors>
 8003324:	4603      	mov	r3, r0
 8003326:	f083 0301 	eor.w	r3, r3, #1
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1e9      	bne.n	8003304 <USART3_IRQHandler+0x14>
		}
		if(!((intFlag&UART_SR_RXNE)==0)){
 8003330:	4b17      	ldr	r3, [pc, #92]	; (8003390 <USART3_IRQHandler+0xa0>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <USART3_IRQHandler+0x5e>
			//dato=UARTx_receiveData(&UART3_Struct);
			//monitoring_Function_Init();
			UART3_Struct.Registers->SR &=~UART_SR_RXNE;
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <USART3_IRQHandler+0x9c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <USART3_IRQHandler+0x9c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0220 	bic.w	r2, r2, #32
 800334a:	601a      	str	r2, [r3, #0]
		}else if(!((intFlag&UART_SR_TC)==0)){
			UART3_Struct.Registers->SR &=~UART_SR_TC;
		}else if(!((intFlag&UART_SR_TXE)==0)){
			UART3_Struct.Registers->SR &=~UART_SR_TXE;
		}
}
 800334c:	e01b      	b.n	8003386 <USART3_IRQHandler+0x96>
		}else if(!((intFlag&UART_SR_TC)==0)){
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <USART3_IRQHandler+0xa0>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <USART3_IRQHandler+0x7c>
			UART3_Struct.Registers->SR &=~UART_SR_TC;
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <USART3_IRQHandler+0x9c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <USART3_IRQHandler+0x9c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003368:	601a      	str	r2, [r3, #0]
}
 800336a:	e00c      	b.n	8003386 <USART3_IRQHandler+0x96>
		}else if(!((intFlag&UART_SR_TXE)==0)){
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <USART3_IRQHandler+0xa0>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	b25b      	sxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	da07      	bge.n	8003386 <USART3_IRQHandler+0x96>
			UART3_Struct.Registers->SR &=~UART_SR_TXE;
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <USART3_IRQHandler+0x9c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <USART3_IRQHandler+0x9c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003384:	601a      	str	r2, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000080 	.word	0x20000080
 8003390:	200000e9 	.word	0x200000e9

08003394 <USART6_IRQHandler>:
void USART6_IRQHandler(void){
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
	intFlag = UARTx_GetInterruptFlags(&UART6_Struct);
 8003398:	4828      	ldr	r0, [pc, #160]	; (800343c <USART6_IRQHandler+0xa8>)
 800339a:	f7ff fde3 	bl	8002f64 <UARTx_GetInterruptFlags>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <USART6_IRQHandler+0xac>)
 80033a4:	701a      	strb	r2, [r3, #0]
		while(!(UARTx_SolveCurrentErrors(&UART6_Struct,UARTx_GetCurrentErrors(&UART6_Struct)))){
 80033a6:	e007      	b.n	80033b8 <USART6_IRQHandler+0x24>
			UARTx_SolveCurrentErrors(&UART6_Struct,UARTx_GetCurrentErrors(&UART6_Struct));
 80033a8:	4824      	ldr	r0, [pc, #144]	; (800343c <USART6_IRQHandler+0xa8>)
 80033aa:	f7ff fdc9 	bl	8002f40 <UARTx_GetCurrentErrors>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4619      	mov	r1, r3
 80033b2:	4822      	ldr	r0, [pc, #136]	; (800343c <USART6_IRQHandler+0xa8>)
 80033b4:	f7ff fde8 	bl	8002f88 <UARTx_SolveCurrentErrors>
		while(!(UARTx_SolveCurrentErrors(&UART6_Struct,UARTx_GetCurrentErrors(&UART6_Struct)))){
 80033b8:	4820      	ldr	r0, [pc, #128]	; (800343c <USART6_IRQHandler+0xa8>)
 80033ba:	f7ff fdc1 	bl	8002f40 <UARTx_GetCurrentErrors>
 80033be:	4603      	mov	r3, r0
 80033c0:	4619      	mov	r1, r3
 80033c2:	481e      	ldr	r0, [pc, #120]	; (800343c <USART6_IRQHandler+0xa8>)
 80033c4:	f7ff fde0 	bl	8002f88 <UARTx_SolveCurrentErrors>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f083 0301 	eor.w	r3, r3, #1
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e9      	bne.n	80033a8 <USART6_IRQHandler+0x14>
		}
		if(!((intFlag&UART_SR_RXNE)==0)){
 80033d4:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <USART6_IRQHandler+0xac>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00f      	beq.n	8003400 <USART6_IRQHandler+0x6c>
			dato=UARTx_receiveData(&UART6_Struct);
 80033e0:	4816      	ldr	r0, [pc, #88]	; (800343c <USART6_IRQHandler+0xa8>)
 80033e2:	f7ff fc43 	bl	8002c6c <UARTx_receiveData>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	4b16      	ldr	r3, [pc, #88]	; (8003444 <USART6_IRQHandler+0xb0>)
 80033ec:	701a      	strb	r2, [r3, #0]
			UART6_Struct.Registers->SR &=~UART_SR_RXNE;
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <USART6_IRQHandler+0xa8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <USART6_IRQHandler+0xa8>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0220 	bic.w	r2, r2, #32
 80033fc:	601a      	str	r2, [r3, #0]
		}else if(!((intFlag&UART_SR_TC)==0)){
			UART6_Struct.Registers->SR &=~UART_SR_TC;
		}else if(!((intFlag&UART_SR_TXE)==0)){
			UART6_Struct.Registers->SR &=~UART_SR_TXE;
		}
}
 80033fe:	e01b      	b.n	8003438 <USART6_IRQHandler+0xa4>
		}else if(!((intFlag&UART_SR_TC)==0)){
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <USART6_IRQHandler+0xac>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d008      	beq.n	800341e <USART6_IRQHandler+0x8a>
			UART6_Struct.Registers->SR &=~UART_SR_TC;
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <USART6_IRQHandler+0xa8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <USART6_IRQHandler+0xa8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800341a:	601a      	str	r2, [r3, #0]
}
 800341c:	e00c      	b.n	8003438 <USART6_IRQHandler+0xa4>
		}else if(!((intFlag&UART_SR_TXE)==0)){
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <USART6_IRQHandler+0xac>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	b25b      	sxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	da07      	bge.n	8003438 <USART6_IRQHandler+0xa4>
			UART6_Struct.Registers->SR &=~UART_SR_TXE;
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <USART6_IRQHandler+0xa8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b03      	ldr	r3, [pc, #12]	; (800343c <USART6_IRQHandler+0xa8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000090 	.word	0x20000090
 8003440:	200000e9 	.word	0x200000e9
 8003444:	200000e8 	.word	0x200000e8

08003448 <UART_Config>:

void UART_Config(void){
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af04      	add	r7, sp, #16
	/*//Los prescaladores se seleccionan por n=1,2,...,8. Siendo 2^n el valor del preescalador
	SystClock_Init(2,0,80,0,0,0);//SYSCLK -> PLLP, SYSPLL -> HSI, SYSCLK -> 80MHz, preAHB1 -> divided by 2^0
	//preAPB1 -> Not divided, preAPB2 -> not divided, APB1 = 40MHZ, APB2=80MHz.
	NVIC_SetCFGR(30, 3);
    */
	UARTx_ResetStruct(&UART3_Struct,UART3_R);
 800344e:	490f      	ldr	r1, [pc, #60]	; (800348c <UART_Config+0x44>)
 8003450:	480f      	ldr	r0, [pc, #60]	; (8003490 <UART_Config+0x48>)
 8003452:	f7ff fcc3 	bl	8002ddc <UARTx_ResetStruct>
	UARTx_GPIO_Init(&UART3_Struct);
 8003456:	480e      	ldr	r0, [pc, #56]	; (8003490 <UART_Config+0x48>)
 8003458:	f7ff fa1c 	bl	8002894 <UARTx_GPIO_Init>
	UARTx_Init(9600,0x00,0x00,0x00,true,true,&UART3_Struct); //9600 baudrate, sobremuestreo por 8, 8-b de datos, even parity, transmisor y receptor habilitados
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <UART_Config+0x48>)
 800345e:	9302      	str	r3, [sp, #8]
 8003460:	2301      	movs	r3, #1
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	2301      	movs	r3, #1
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2300      	movs	r3, #0
 800346a:	2200      	movs	r2, #0
 800346c:	2100      	movs	r1, #0
 800346e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003472:	f7ff fc6f 	bl	8002d54 <UARTx_Init>
	UARTx_InterruptEN(&UART3_Struct,true,false,false,0);
 8003476:	2300      	movs	r3, #0
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	2200      	movs	r2, #0
 800347e:	2101      	movs	r1, #1
 8003480:	4803      	ldr	r0, [pc, #12]	; (8003490 <UART_Config+0x48>)
 8003482:	f7ff fcff 	bl	8002e84 <UARTx_InterruptEN>
	//UARTx_InterruptEN(&UART3_Struct,false,false,true,1);
	//UARTx_HalfDuplexSingleWire(&UART3_Struct);
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40004800 	.word	0x40004800
 8003490:	20000080 	.word	0x20000080

08003494 <Timer_Config>:

void Timer_Config(void){
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af04      	add	r7, sp, #16
    SYS_CLK.SYSCLK = 16;
 800349a:	4b1c      	ldr	r3, [pc, #112]	; (800350c <Timer_Config+0x78>)
 800349c:	2210      	movs	r2, #16
 800349e:	701a      	strb	r2, [r3, #0]
	//Los prescaladores se seleccionan por n=1,2,...,8. Siendo 2^n el valor del preescalador
	SystClock_Init(&SYS_CLK,2,1,0,0,0);//SYSCLK -> PLLP, SYSPLL -> HSI, preAHB1 -> divided by 2^1
 80034a0:	2300      	movs	r3, #0
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	2300      	movs	r3, #0
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	2300      	movs	r3, #0
 80034aa:	2201      	movs	r2, #1
 80034ac:	2102      	movs	r1, #2
 80034ae:	4817      	ldr	r0, [pc, #92]	; (800350c <Timer_Config+0x78>)
 80034b0:	f7fd f8c6 	bl	8000640 <SystClock_Init>
	//preAPB1 -> Not divided, preAPB2 -> not divided, APB1 = 40MHZ, APB2=40MHz.
	//STK_CONF(currentAHB1CLK);//Configurar después de SYSTCLOCK_INIT, no configurar al usar TIMERS
	TIMx_RestartStruct(&timer5, TIM5);
 80034b4:	4916      	ldr	r1, [pc, #88]	; (8003510 <Timer_Config+0x7c>)
 80034b6:	4817      	ldr	r0, [pc, #92]	; (8003514 <Timer_Config+0x80>)
 80034b8:	f000 f860 	bl	800357c <TIMx_RestartStruct>

	timer5.Frequency = 1;  //100Hz->10ms
 80034bc:	4b15      	ldr	r3, [pc, #84]	; (8003514 <Timer_Config+0x80>)
 80034be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034c2:	60da      	str	r2, [r3, #12]

    timer5.Parameter.channel_mode[0] = TIM_MODE_OUTPWM;
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <Timer_Config+0x80>)
 80034c6:	2204      	movs	r2, #4
 80034c8:	711a      	strb	r2, [r3, #4]
    //PA7 CH1N, PA8 CH1, PA9 CH2 y PB0 CH2N
    //TIMx_GPIO_Init(GPIOA, 8, 1);//PWM1
    //TIMx_GPIO_Init(GPIOA, 9, 1);//PWM2

    //Los canales en este caso no se usan (TIM4 y TIM5); Polaridad no necesaria; Ciclo del 100%
    TIMx_SetChannelCFG(&chcfg[0], TIM_CCxE_OCxOCxN_OFF, TIM_CCxP_OCxOCxN_LOW, 100);
 80034ca:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003518 <Timer_Config+0x84>
 80034ce:	2202      	movs	r2, #2
 80034d0:	2105      	movs	r1, #5
 80034d2:	4812      	ldr	r0, [pc, #72]	; (800351c <Timer_Config+0x88>)
 80034d4:	f000 f872 	bl	80035bc <TIMx_SetChannelCFG>

    //0->Reset; 0-> Disable Slave mode; 1->TIM3 as internal trigger; 0->Edge aligned; 0->Upcounter
    TIMx_Init(&timer5, chcfg, 0, 0, TIM_SMCR_TS_ITR1, 0, 0);//
 80034d8:	2300      	movs	r3, #0
 80034da:	9302      	str	r3, [sp, #8]
 80034dc:	2300      	movs	r3, #0
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	2301      	movs	r3, #1
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2300      	movs	r3, #0
 80034e6:	2200      	movs	r2, #0
 80034e8:	490c      	ldr	r1, [pc, #48]	; (800351c <Timer_Config+0x88>)
 80034ea:	480a      	ldr	r0, [pc, #40]	; (8003514 <Timer_Config+0x80>)
 80034ec:	f7fd fd42 	bl	8000f74 <TIMx_Init>
    //0->Reset; 4-> Reset mode in Slave; 2->TIM3 as internal trigger; 0->Edge aligned; 0->Upcounter
    TIM5->SR &= (~(TIM_SR_UIF|TIM_SR_TIF));
 80034f0:	4b07      	ldr	r3, [pc, #28]	; (8003510 <Timer_Config+0x7c>)
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	4a06      	ldr	r2, [pc, #24]	; (8003510 <Timer_Config+0x7c>)
 80034f6:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80034fa:	6113      	str	r3, [r2, #16]
    NVIC_SetCFGR(50, 3);//TIM5  //Checar
 80034fc:	2103      	movs	r1, #3
 80034fe:	2032      	movs	r0, #50	; 0x32
 8003500:	f7fd f824 	bl	800054c <NVIC_SetCFGR>

    //Timx_EnableInt(&timer5, TIM_DIER_UIE);
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000034 	.word	0x20000034
 8003510:	40000c00 	.word	0x40000c00
 8003514:	200000d4 	.word	0x200000d4
 8003518:	42c80000 	.word	0x42c80000
 800351c:	200000a4 	.word	0x200000a4

08003520 <main>:

int main(void){
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
	uint8_t vector[] =  {0,0,2};
 8003526:	4a12      	ldr	r2, [pc, #72]	; (8003570 <main+0x50>)
 8003528:	463b      	mov	r3, r7
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	4611      	mov	r1, r2
 800352e:	8019      	strh	r1, [r3, #0]
 8003530:	3302      	adds	r3, #2
 8003532:	0c12      	lsrs	r2, r2, #16
 8003534:	701a      	strb	r2, [r3, #0]
	Timer_Config();
 8003536:	f7ff ffad 	bl	8003494 <Timer_Config>
	UART_Config();
 800353a:	f7ff ff85 	bl	8003448 <UART_Config>
	LEDS_Init();
 800353e:	f7fc ffb9 	bl	80004b4 <LEDS_Init>
	CRC_Enable();
 8003542:	f7fc fe51 	bl	80001e8 <CRC_Enable>
	DMA_Init(vector,3);
 8003546:	463b      	mov	r3, r7
 8003548:	2103      	movs	r1, #3
 800354a:	4618      	mov	r0, r3
 800354c:	f7fc fe7a 	bl	8000244 <DMA_Init>
	//DMA_Enable();
	Timx_EnableInt(&timer5, TIM_DIER_UIE); //Esta linea es de prueba
 8003550:	2101      	movs	r1, #1
 8003552:	4808      	ldr	r0, [pc, #32]	; (8003574 <main+0x54>)
 8003554:	f7ff f840 	bl	80025d8 <Timx_EnableInt>
	while(1){
		//dato=UARTx_receiveData(&UART4_Struct);
		for(int i = 0; i<= 1000000; i++){}
 8003558:	2300      	movs	r3, #0
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	e002      	b.n	8003564 <main+0x44>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3301      	adds	r3, #1
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a04      	ldr	r2, [pc, #16]	; (8003578 <main+0x58>)
 8003568:	4293      	cmp	r3, r2
 800356a:	ddf8      	ble.n	800355e <main+0x3e>
 800356c:	e7f4      	b.n	8003558 <main+0x38>
 800356e:	bf00      	nop
 8003570:	080036a4 	.word	0x080036a4
 8003574:	200000d4 	.word	0x200000d4
 8003578:	000f4240 	.word	0x000f4240

0800357c <TIMx_RestartStruct>:
	//Max time=4294967295*(1/16Mhz)=268.43 seg=4.4minutes
	//convierto valor
	TimerTimeinseg=((((float)timer->Registers -> PSC+1)*(float)valoractual)/15999999);
}

void TIMx_RestartStruct( TIM_HandlerDef * time ,TIM_TypeDef * timerbase){
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
    time->Registers = timerbase;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	601a      	str	r2, [r3, #0]
    time->Load=0;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	815a      	strh	r2, [r3, #10]
    time->Prescaler=0;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	811a      	strh	r2, [r3, #8]
    time->Parameter.channel_mode[0]=0;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	711a      	strb	r2, [r3, #4]
    time->Parameter.channel_mode[1]=0;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	715a      	strb	r2, [r3, #5]
    time->Parameter.channel_mode[2]=0;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	719a      	strb	r2, [r3, #6]
    time->Parameter.channel_mode[3]=0;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	71da      	strb	r2, [r3, #7]

}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <TIMx_SetChannelCFG>:

void TIMx_SetChannelCFG(TIM_ChannelCFG * channel, uint8_t CCxE, uint8_t CCxP, float duty){
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	460b      	mov	r3, r1
 80035c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80035ca:	72fb      	strb	r3, [r7, #11]
 80035cc:	4613      	mov	r3, r2
 80035ce:	72bb      	strb	r3, [r7, #10]
	channel->CCxE = CCxE; //Habilitación
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	7afa      	ldrb	r2, [r7, #11]
 80035d4:	701a      	strb	r2, [r3, #0]
	channel->CCxP = CCxP; //Polaridad
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	7aba      	ldrb	r2, [r7, #10]
 80035da:	705a      	strb	r2, [r3, #1]
	channel->DutyCycle = duty; //Ciclo de trabajo
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	605a      	str	r2, [r3, #4]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035f0:	480d      	ldr	r0, [pc, #52]	; (8003628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80035f4:	f7fc fe9a 	bl	800032c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035f8:	480c      	ldr	r0, [pc, #48]	; (800362c <LoopForever+0x6>)
  ldr r1, =_edata
 80035fa:	490d      	ldr	r1, [pc, #52]	; (8003630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <LoopForever+0xe>)
  movs r3, #0
 80035fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003600:	e002      	b.n	8003608 <LoopCopyDataInit>

08003602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003606:	3304      	adds	r3, #4

08003608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800360a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800360c:	d3f9      	bcc.n	8003602 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003610:	4c0a      	ldr	r4, [pc, #40]	; (800363c <LoopForever+0x16>)
  movs r3, #0
 8003612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003614:	e001      	b.n	800361a <LoopFillZerobss>

08003616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003618:	3204      	adds	r2, #4

0800361a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800361a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800361c:	d3fb      	bcc.n	8003616 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800361e:	f000 f811 	bl	8003644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003622:	f7ff ff7d 	bl	8003520 <main>

08003626 <LoopForever>:

LoopForever:
  b LoopForever
 8003626:	e7fe      	b.n	8003626 <LoopForever>
  ldr   r0, =_estack
 8003628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800362c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003630:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003634:	080036b0 	.word	0x080036b0
  ldr r2, =_sbss
 8003638:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800363c:	200000ec 	.word	0x200000ec

08003640 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003640:	e7fe      	b.n	8003640 <ADC_IRQHandler>
	...

08003644 <__libc_init_array>:
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	4d0d      	ldr	r5, [pc, #52]	; (800367c <__libc_init_array+0x38>)
 8003648:	4c0d      	ldr	r4, [pc, #52]	; (8003680 <__libc_init_array+0x3c>)
 800364a:	1b64      	subs	r4, r4, r5
 800364c:	10a4      	asrs	r4, r4, #2
 800364e:	2600      	movs	r6, #0
 8003650:	42a6      	cmp	r6, r4
 8003652:	d109      	bne.n	8003668 <__libc_init_array+0x24>
 8003654:	4d0b      	ldr	r5, [pc, #44]	; (8003684 <__libc_init_array+0x40>)
 8003656:	4c0c      	ldr	r4, [pc, #48]	; (8003688 <__libc_init_array+0x44>)
 8003658:	f000 f818 	bl	800368c <_init>
 800365c:	1b64      	subs	r4, r4, r5
 800365e:	10a4      	asrs	r4, r4, #2
 8003660:	2600      	movs	r6, #0
 8003662:	42a6      	cmp	r6, r4
 8003664:	d105      	bne.n	8003672 <__libc_init_array+0x2e>
 8003666:	bd70      	pop	{r4, r5, r6, pc}
 8003668:	f855 3b04 	ldr.w	r3, [r5], #4
 800366c:	4798      	blx	r3
 800366e:	3601      	adds	r6, #1
 8003670:	e7ee      	b.n	8003650 <__libc_init_array+0xc>
 8003672:	f855 3b04 	ldr.w	r3, [r5], #4
 8003676:	4798      	blx	r3
 8003678:	3601      	adds	r6, #1
 800367a:	e7f2      	b.n	8003662 <__libc_init_array+0x1e>
 800367c:	080036a8 	.word	0x080036a8
 8003680:	080036a8 	.word	0x080036a8
 8003684:	080036a8 	.word	0x080036a8
 8003688:	080036ac 	.word	0x080036ac

0800368c <_init>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr

08003698 <_fini>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr
